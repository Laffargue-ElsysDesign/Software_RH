
HoloSoft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a4  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800849c  0800849c  0001849c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008550  08008550  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08008550  08008550  00018550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008558  08008558  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008558  08008558  00018558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800855c  0800855c  0001855c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08008560  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000030  0800858c  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200009bc  0800858c  000209bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021261  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e6  00000000  00000000  000412bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  00044aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  00046010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288f8  00000000  00000000  000473d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3b8  00000000  00000000  0006fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb1ef  00000000  00000000  0008c080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018726f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058e4  00000000  00000000  001872c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000030 	.word	0x20000030
 8000214:	00000000 	.word	0x00000000
 8000218:	08008484 	.word	0x08008484

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000034 	.word	0x20000034
 8000234:	08008484 	.word	0x08008484

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <BRAIN_main>:
#include "debug.h"
#include "secretary.h"

uint8_t statusflag_Motor1, statusflag_Motor2, statusflag_Motor3, statusflag_Motor4;
HAL_UART_StateTypeDef state = 0;
void BRAIN_main(){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	SECRETARY_send_to_UltraBrain(RESTART, 0);
 8000534:	2100      	movs	r1, #0
 8000536:	2002      	movs	r0, #2
 8000538:	f002 fba6 	bl	8002c88 <SECRETARY_send_to_UltraBrain>



	//	HAL_Delay(50);
		/* Vérification du STATUS_FLAG des moteurs */
		statusflag_Motor1 = HAL_GPIO_ReadPin(SF_DM_1_GPIO_Port, SF_DM_1_Pin);
 800053c:	2120      	movs	r1, #32
 800053e:	4836      	ldr	r0, [pc, #216]	; (8000618 <BRAIN_main+0xe8>)
 8000540:	f004 fac8 	bl	8004ad4 <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	461a      	mov	r2, r3
 8000548:	4b34      	ldr	r3, [pc, #208]	; (800061c <BRAIN_main+0xec>)
 800054a:	701a      	strb	r2, [r3, #0]
		statusflag_Motor2 = HAL_GPIO_ReadPin(SF_DM_2_GPIO_Port, SF_DM_2_Pin);
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	4834      	ldr	r0, [pc, #208]	; (8000620 <BRAIN_main+0xf0>)
 8000550:	f004 fac0 	bl	8004ad4 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	4b32      	ldr	r3, [pc, #200]	; (8000624 <BRAIN_main+0xf4>)
 800055a:	701a      	strb	r2, [r3, #0]
		statusflag_Motor3 = HAL_GPIO_ReadPin(SF_DM_3_GPIO_Port, SF_DM_3_Pin);
 800055c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000560:	4831      	ldr	r0, [pc, #196]	; (8000628 <BRAIN_main+0xf8>)
 8000562:	f004 fab7 	bl	8004ad4 <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	4b30      	ldr	r3, [pc, #192]	; (800062c <BRAIN_main+0xfc>)
 800056c:	701a      	strb	r2, [r3, #0]
		statusflag_Motor4 = HAL_GPIO_ReadPin(SF_DM_4_GPIO_Port, SF_DM_4_Pin);
 800056e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000572:	482f      	ldr	r0, [pc, #188]	; (8000630 <BRAIN_main+0x100>)
 8000574:	f004 faae 	bl	8004ad4 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <BRAIN_main+0x104>)
 800057e:	701a      	strb	r2, [r3, #0]
		if(statusflag_Motor1 | statusflag_Motor2 | statusflag_Motor3 | statusflag_Motor4) {
 8000580:	4b26      	ldr	r3, [pc, #152]	; (800061c <BRAIN_main+0xec>)
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <BRAIN_main+0xf4>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4313      	orrs	r3, r2
 800058a:	b2da      	uxtb	r2, r3
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <BRAIN_main+0xfc>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4313      	orrs	r3, r2
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <BRAIN_main+0x104>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	4313      	orrs	r3, r2
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d01d      	beq.n	80005dc <BRAIN_main+0xac>
			HAL_GPIO_WritePin(EN_DM_1_GPIO_Port, EN_DM_1_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	4820      	ldr	r0, [pc, #128]	; (8000628 <BRAIN_main+0xf8>)
 80005a8:	f004 faac 	bl	8004b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_DM_2_GPIO_Port, EN_DM_2_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b2:	481d      	ldr	r0, [pc, #116]	; (8000628 <BRAIN_main+0xf8>)
 80005b4:	f004 faa6 	bl	8004b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_DM_3_GPIO_Port, EN_DM_3_Pin, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005be:	481a      	ldr	r0, [pc, #104]	; (8000628 <BRAIN_main+0xf8>)
 80005c0:	f004 faa0 	bl	8004b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_DM_4_GPIO_Port, EN_DM_4_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ca:	4817      	ldr	r0, [pc, #92]	; (8000628 <BRAIN_main+0xf8>)
 80005cc:	f004 fa9a 	bl	8004b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_LE7_GPIO_Port, OUT_LE7_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	4818      	ldr	r0, [pc, #96]	; (8000638 <BRAIN_main+0x108>)
 80005d6:	f004 fa95 	bl	8004b04 <HAL_GPIO_WritePin>
 80005da:	e7af      	b.n	800053c <BRAIN_main+0xc>
		}
		else {
			HAL_GPIO_WritePin(EN_DM_1_GPIO_Port, EN_DM_1_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e2:	4811      	ldr	r0, [pc, #68]	; (8000628 <BRAIN_main+0xf8>)
 80005e4:	f004 fa8e 	bl	8004b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_DM_2_GPIO_Port, EN_DM_2_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <BRAIN_main+0xf8>)
 80005f0:	f004 fa88 	bl	8004b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_DM_3_GPIO_Port, EN_DM_3_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fa:	480b      	ldr	r0, [pc, #44]	; (8000628 <BRAIN_main+0xf8>)
 80005fc:	f004 fa82 	bl	8004b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_DM_4_GPIO_Port, EN_DM_4_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <BRAIN_main+0xf8>)
 8000608:	f004 fa7c 	bl	8004b04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_LE7_GPIO_Port, OUT_LE7_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	4809      	ldr	r0, [pc, #36]	; (8000638 <BRAIN_main+0x108>)
 8000612:	f004 fa77 	bl	8004b04 <HAL_GPIO_WritePin>
		statusflag_Motor1 = HAL_GPIO_ReadPin(SF_DM_1_GPIO_Port, SF_DM_1_Pin);
 8000616:	e791      	b.n	800053c <BRAIN_main+0xc>
 8000618:	40020400 	.word	0x40020400
 800061c:	200004ec 	.word	0x200004ec
 8000620:	40021400 	.word	0x40021400
 8000624:	20000768 	.word	0x20000768
 8000628:	40021000 	.word	0x40021000
 800062c:	200002a0 	.word	0x200002a0
 8000630:	40020000 	.word	0x40020000
 8000634:	200006e4 	.word	0x200006e4
 8000638:	40021800 	.word	0x40021800
 800063c:	00000000 	.word	0x00000000

08000640 <CORRECTOR_pid>:
/*PIDController pid1
PIDController pid2
PIDController pid3
PIDController pid3*/

void CORRECTOR_pid(ODOMETRY_speed_wheel wheel, PILOTE_target_speed wheel_speed){
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	; 0x40
 8000644:	af00      	add	r7, sp, #0
 8000646:	ed87 0b08 	vstr	d0, [r7, #32]
 800064a:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 800064e:	ed87 2b0c 	vstr	d2, [r7, #48]	; 0x30
 8000652:	ed87 3b0e 	vstr	d3, [r7, #56]	; 0x38
 8000656:	ed87 4b00 	vstr	d4, [r7]
 800065a:	ed87 5b02 	vstr	d5, [r7, #8]
 800065e:	ed87 6b04 	vstr	d6, [r7, #16]
 8000662:	ed87 7b06 	vstr	d7, [r7, #24]

	if(PID_ON) {
		pid_error_WheelMotor1_rpm = wheel_speed.target_WheelMotor1_rpm - wheel.speed_WheelMotor1_rpm;
 8000666:	ed97 6b00 	vldr	d6, [r7]
 800066a:	ed97 7b08 	vldr	d7, [r7, #32]
 800066e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000672:	4b83      	ldr	r3, [pc, #524]	; (8000880 <CORRECTOR_pid+0x240>)
 8000674:	ed83 7b00 	vstr	d7, [r3]
		pid_error_WheelMotor2_rpm = wheel_speed.target_WheelMotor2_rpm - wheel.speed_WheelMotor2_rpm;
 8000678:	ed97 6b02 	vldr	d6, [r7, #8]
 800067c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000680:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000684:	4b7f      	ldr	r3, [pc, #508]	; (8000884 <CORRECTOR_pid+0x244>)
 8000686:	ed83 7b00 	vstr	d7, [r3]
		pid_error_WheelMotor3_rpm = wheel_speed.target_WheelMotor3_rpm - wheel.speed_WheelMotor3_rpm;
 800068a:	ed97 6b04 	vldr	d6, [r7, #16]
 800068e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000692:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000696:	4b7c      	ldr	r3, [pc, #496]	; (8000888 <CORRECTOR_pid+0x248>)
 8000698:	ed83 7b00 	vstr	d7, [r3]
		pid_error_WheelMotor4_rpm = wheel_speed.target_WheelMotor4_rpm - wheel.speed_WheelMotor4_rpm;
 800069c:	ed97 6b06 	vldr	d6, [r7, #24]
 80006a0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80006a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006a8:	4b78      	ldr	r3, [pc, #480]	; (800088c <CORRECTOR_pid+0x24c>)
 80006aa:	ed83 7b00 	vstr	d7, [r3]

		pid_integral_WheelMotor1_rpm = pid_integral_WheelMotor1_rpm + ((pid_error_WheelMotor1_rpm + pid_lasterror_WheelMotor1_rpm)*pid_KI_WheelMotor1_rpm*SAMPLING_TIME)/2;
 80006ae:	4b74      	ldr	r3, [pc, #464]	; (8000880 <CORRECTOR_pid+0x240>)
 80006b0:	ed93 6b00 	vldr	d6, [r3]
 80006b4:	4b76      	ldr	r3, [pc, #472]	; (8000890 <CORRECTOR_pid+0x250>)
 80006b6:	ed93 7b00 	vldr	d7, [r3]
 80006ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80006be:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 80006c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006c6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8000878 <CORRECTOR_pid+0x238>
 80006ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80006d2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80006d6:	4b6f      	ldr	r3, [pc, #444]	; (8000894 <CORRECTOR_pid+0x254>)
 80006d8:	ed93 7b00 	vldr	d7, [r3]
 80006dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80006e0:	4b6c      	ldr	r3, [pc, #432]	; (8000894 <CORRECTOR_pid+0x254>)
 80006e2:	ed83 7b00 	vstr	d7, [r3]
		pid_integral_WheelMotor2_rpm = pid_integral_WheelMotor2_rpm + ((pid_error_WheelMotor2_rpm + pid_lasterror_WheelMotor1_rpm)*pid_KI_WheelMotor1_rpm*SAMPLING_TIME)/2;
 80006e6:	4b67      	ldr	r3, [pc, #412]	; (8000884 <CORRECTOR_pid+0x244>)
 80006e8:	ed93 6b00 	vldr	d6, [r3]
 80006ec:	4b68      	ldr	r3, [pc, #416]	; (8000890 <CORRECTOR_pid+0x250>)
 80006ee:	ed93 7b00 	vldr	d7, [r3]
 80006f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80006f6:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 80006fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006fe:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8000878 <CORRECTOR_pid+0x238>
 8000702:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000706:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800070a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800070e:	4b62      	ldr	r3, [pc, #392]	; (8000898 <CORRECTOR_pid+0x258>)
 8000710:	ed93 7b00 	vldr	d7, [r3]
 8000714:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000718:	4b5f      	ldr	r3, [pc, #380]	; (8000898 <CORRECTOR_pid+0x258>)
 800071a:	ed83 7b00 	vstr	d7, [r3]
		pid_integral_WheelMotor3_rpm = pid_integral_WheelMotor3_rpm + ((pid_error_WheelMotor3_rpm + pid_lasterror_WheelMotor1_rpm)*pid_KI_WheelMotor1_rpm*SAMPLING_TIME)/2;
 800071e:	4b5a      	ldr	r3, [pc, #360]	; (8000888 <CORRECTOR_pid+0x248>)
 8000720:	ed93 6b00 	vldr	d6, [r3]
 8000724:	4b5a      	ldr	r3, [pc, #360]	; (8000890 <CORRECTOR_pid+0x250>)
 8000726:	ed93 7b00 	vldr	d7, [r3]
 800072a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800072e:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8000732:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000736:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8000878 <CORRECTOR_pid+0x238>
 800073a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800073e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000742:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000746:	4b55      	ldr	r3, [pc, #340]	; (800089c <CORRECTOR_pid+0x25c>)
 8000748:	ed93 7b00 	vldr	d7, [r3]
 800074c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000750:	4b52      	ldr	r3, [pc, #328]	; (800089c <CORRECTOR_pid+0x25c>)
 8000752:	ed83 7b00 	vstr	d7, [r3]
		pid_integral_WheelMotor4_rpm = pid_integral_WheelMotor4_rpm + ((pid_error_WheelMotor4_rpm + pid_lasterror_WheelMotor1_rpm)*pid_KI_WheelMotor1_rpm*SAMPLING_TIME)/2;
 8000756:	4b4d      	ldr	r3, [pc, #308]	; (800088c <CORRECTOR_pid+0x24c>)
 8000758:	ed93 6b00 	vldr	d6, [r3]
 800075c:	4b4c      	ldr	r3, [pc, #304]	; (8000890 <CORRECTOR_pid+0x250>)
 800075e:	ed93 7b00 	vldr	d7, [r3]
 8000762:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000766:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 800076a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800076e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8000878 <CORRECTOR_pid+0x238>
 8000772:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000776:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800077a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800077e:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <CORRECTOR_pid+0x260>)
 8000780:	ed93 7b00 	vldr	d7, [r3]
 8000784:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <CORRECTOR_pid+0x260>)
 800078a:	ed83 7b00 	vstr	d7, [r3]

		/* Anti-wind-up via integrator clamping */
		if (pid_integral_WheelMotor1_rpm > PID_LIM_MAX_INT) {
 800078e:	4b41      	ldr	r3, [pc, #260]	; (8000894 <CORRECTOR_pid+0x254>)
 8000790:	ed93 7b00 	vldr	d7, [r3]
 8000794:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 8000798:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800079c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a0:	dd06      	ble.n	80007b0 <CORRECTOR_pid+0x170>

			pid_integral_WheelMotor1_rpm = PID_LIM_MAX_INT;
 80007a2:	493c      	ldr	r1, [pc, #240]	; (8000894 <CORRECTOR_pid+0x254>)
 80007a4:	f04f 0200 	mov.w	r2, #0
 80007a8:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <CORRECTOR_pid+0x264>)
 80007aa:	e9c1 2300 	strd	r2, r3, [r1]
 80007ae:	e00f      	b.n	80007d0 <CORRECTOR_pid+0x190>

		} else if (pid_integral_WheelMotor1_rpm < PID_LIM_MIN_INT) {
 80007b0:	4b38      	ldr	r3, [pc, #224]	; (8000894 <CORRECTOR_pid+0x254>)
 80007b2:	ed93 7b00 	vldr	d7, [r3]
 80007b6:	eebb 6b0e 	vmov.f64	d6, #190	; 0xc1f00000 -30.0
 80007ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80007be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c2:	d505      	bpl.n	80007d0 <CORRECTOR_pid+0x190>

			pid_integral_WheelMotor1_rpm = PID_LIM_MIN_INT;
 80007c4:	4933      	ldr	r1, [pc, #204]	; (8000894 <CORRECTOR_pid+0x254>)
 80007c6:	f04f 0200 	mov.w	r2, #0
 80007ca:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <CORRECTOR_pid+0x268>)
 80007cc:	e9c1 2300 	strd	r2, r3, [r1]

		}

		if (pid_integral_WheelMotor2_rpm > PID_LIM_MAX_INT) {
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <CORRECTOR_pid+0x258>)
 80007d2:	ed93 7b00 	vldr	d7, [r3]
 80007d6:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 80007da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80007de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e2:	dd06      	ble.n	80007f2 <CORRECTOR_pid+0x1b2>

			pid_integral_WheelMotor2_rpm = PID_LIM_MAX_INT;
 80007e4:	492c      	ldr	r1, [pc, #176]	; (8000898 <CORRECTOR_pid+0x258>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <CORRECTOR_pid+0x264>)
 80007ec:	e9c1 2300 	strd	r2, r3, [r1]
 80007f0:	e00f      	b.n	8000812 <CORRECTOR_pid+0x1d2>

		} else if (pid_integral_WheelMotor2_rpm < PID_LIM_MIN_INT) {
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <CORRECTOR_pid+0x258>)
 80007f4:	ed93 7b00 	vldr	d7, [r3]
 80007f8:	eebb 6b0e 	vmov.f64	d6, #190	; 0xc1f00000 -30.0
 80007fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000804:	d505      	bpl.n	8000812 <CORRECTOR_pid+0x1d2>

			pid_integral_WheelMotor2_rpm = PID_LIM_MIN_INT;
 8000806:	4924      	ldr	r1, [pc, #144]	; (8000898 <CORRECTOR_pid+0x258>)
 8000808:	f04f 0200 	mov.w	r2, #0
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <CORRECTOR_pid+0x268>)
 800080e:	e9c1 2300 	strd	r2, r3, [r1]

		}

		if (pid_integral_WheelMotor3_rpm > PID_LIM_MAX_INT) {
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <CORRECTOR_pid+0x25c>)
 8000814:	ed93 7b00 	vldr	d7, [r3]
 8000818:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 800081c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000824:	dd06      	ble.n	8000834 <CORRECTOR_pid+0x1f4>

			pid_integral_WheelMotor3_rpm = PID_LIM_MAX_INT;
 8000826:	491d      	ldr	r1, [pc, #116]	; (800089c <CORRECTOR_pid+0x25c>)
 8000828:	f04f 0200 	mov.w	r2, #0
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <CORRECTOR_pid+0x264>)
 800082e:	e9c1 2300 	strd	r2, r3, [r1]
 8000832:	e00f      	b.n	8000854 <CORRECTOR_pid+0x214>

		} else if (pid_integral_WheelMotor3_rpm < PID_LIM_MIN_INT) {
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <CORRECTOR_pid+0x25c>)
 8000836:	ed93 7b00 	vldr	d7, [r3]
 800083a:	eebb 6b0e 	vmov.f64	d6, #190	; 0xc1f00000 -30.0
 800083e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000846:	d505      	bpl.n	8000854 <CORRECTOR_pid+0x214>

			pid_integral_WheelMotor3_rpm = PID_LIM_MIN_INT;
 8000848:	4914      	ldr	r1, [pc, #80]	; (800089c <CORRECTOR_pid+0x25c>)
 800084a:	f04f 0200 	mov.w	r2, #0
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <CORRECTOR_pid+0x268>)
 8000850:	e9c1 2300 	strd	r2, r3, [r1]

		}

		if (pid_integral_WheelMotor4_rpm > PID_LIM_MAX_INT) {
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <CORRECTOR_pid+0x260>)
 8000856:	ed93 7b00 	vldr	d7, [r3]
 800085a:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 800085e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000866:	dd21      	ble.n	80008ac <CORRECTOR_pid+0x26c>

			pid_integral_WheelMotor4_rpm = PID_LIM_MAX_INT;
 8000868:	490d      	ldr	r1, [pc, #52]	; (80008a0 <CORRECTOR_pid+0x260>)
 800086a:	f04f 0200 	mov.w	r2, #0
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <CORRECTOR_pid+0x264>)
 8000870:	e9c1 2300 	strd	r2, r3, [r1]
 8000874:	e02a      	b.n	80008cc <CORRECTOR_pid+0x28c>
 8000876:	bf00      	nop
 8000878:	47ae147b 	.word	0x47ae147b
 800087c:	3f947ae1 	.word	0x3f947ae1
 8000880:	20000050 	.word	0x20000050
 8000884:	20000058 	.word	0x20000058
 8000888:	20000060 	.word	0x20000060
 800088c:	20000068 	.word	0x20000068
 8000890:	20000070 	.word	0x20000070
 8000894:	200000b0 	.word	0x200000b0
 8000898:	200000b8 	.word	0x200000b8
 800089c:	200000c0 	.word	0x200000c0
 80008a0:	200000c8 	.word	0x200000c8
 80008a4:	403e0000 	.word	0x403e0000
 80008a8:	c03e0000 	.word	0xc03e0000

		} else if (pid_integral_WheelMotor4_rpm < PID_LIM_MIN_INT) {
 80008ac:	4b8e      	ldr	r3, [pc, #568]	; (8000ae8 <CORRECTOR_pid+0x4a8>)
 80008ae:	ed93 7b00 	vldr	d7, [r3]
 80008b2:	eebb 6b0e 	vmov.f64	d6, #190	; 0xc1f00000 -30.0
 80008b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80008ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008be:	d505      	bpl.n	80008cc <CORRECTOR_pid+0x28c>

			pid_integral_WheelMotor4_rpm = PID_LIM_MIN_INT;
 80008c0:	4989      	ldr	r1, [pc, #548]	; (8000ae8 <CORRECTOR_pid+0x4a8>)
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	4b89      	ldr	r3, [pc, #548]	; (8000aec <CORRECTOR_pid+0x4ac>)
 80008c8:	e9c1 2300 	strd	r2, r3, [r1]

		}



		pid_derivate_WheelMotor1_rpm = -(2.0f * pid_KD_WheelMotor1_rpm * (wheel.speed_WheelMotor1_rpm - pid_lastmeasure_WheelMotor1_rpm)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80008cc:	ed97 6b08 	vldr	d6, [r7, #32]
 80008d0:	4b87      	ldr	r3, [pc, #540]	; (8000af0 <CORRECTOR_pid+0x4b0>)
 80008d2:	ed93 7b00 	vldr	d7, [r3]
 80008d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80008da:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8000ad0 <CORRECTOR_pid+0x490>
 80008de:	ee27 6b06 	vmul.f64	d6, d7, d6
                						+ (2.0f * PID_TAU - SAMPLING_TIME) * pid_derivate_WheelMotor1_rpm)
 80008e2:	4b84      	ldr	r3, [pc, #528]	; (8000af4 <CORRECTOR_pid+0x4b4>)
 80008e4:	ed93 7b00 	vldr	d7, [r3]
 80008e8:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 8000ad8 <CORRECTOR_pid+0x498>
 80008ec:	ee27 7b05 	vmul.f64	d7, d7, d5
 80008f0:	ee36 7b07 	vadd.f64	d7, d6, d7
		pid_derivate_WheelMotor1_rpm = -(2.0f * pid_KD_WheelMotor1_rpm * (wheel.speed_WheelMotor1_rpm - pid_lastmeasure_WheelMotor1_rpm)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80008f4:	eeb1 6b47 	vneg.f64	d6, d7
                						/ (2.0f * PID_TAU + SAMPLING_TIME);
 80008f8:	ed9f 5b79 	vldr	d5, [pc, #484]	; 8000ae0 <CORRECTOR_pid+0x4a0>
 80008fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
		pid_derivate_WheelMotor1_rpm = -(2.0f * pid_KD_WheelMotor1_rpm * (wheel.speed_WheelMotor1_rpm - pid_lastmeasure_WheelMotor1_rpm)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000900:	4b7c      	ldr	r3, [pc, #496]	; (8000af4 <CORRECTOR_pid+0x4b4>)
 8000902:	ed83 7b00 	vstr	d7, [r3]
		pid_derivate_WheelMotor2_rpm = -(2.0f * pid_KD_WheelMotor2_rpm * (wheel.speed_WheelMotor2_rpm - pid_lastmeasure_WheelMotor2_rpm)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000906:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 800090a:	4b7b      	ldr	r3, [pc, #492]	; (8000af8 <CORRECTOR_pid+0x4b8>)
 800090c:	ed93 7b00 	vldr	d7, [r3]
 8000910:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000914:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8000ad0 <CORRECTOR_pid+0x490>
 8000918:	ee27 6b06 	vmul.f64	d6, d7, d6
										+ (2.0f * PID_TAU - SAMPLING_TIME) * pid_derivate_WheelMotor2_rpm)
 800091c:	4b77      	ldr	r3, [pc, #476]	; (8000afc <CORRECTOR_pid+0x4bc>)
 800091e:	ed93 7b00 	vldr	d7, [r3]
 8000922:	ed9f 5b6d 	vldr	d5, [pc, #436]	; 8000ad8 <CORRECTOR_pid+0x498>
 8000926:	ee27 7b05 	vmul.f64	d7, d7, d5
 800092a:	ee36 7b07 	vadd.f64	d7, d6, d7
		pid_derivate_WheelMotor2_rpm = -(2.0f * pid_KD_WheelMotor2_rpm * (wheel.speed_WheelMotor2_rpm - pid_lastmeasure_WheelMotor2_rpm)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800092e:	eeb1 6b47 	vneg.f64	d6, d7
										/ (2.0f * PID_TAU + SAMPLING_TIME);
 8000932:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000ae0 <CORRECTOR_pid+0x4a0>
 8000936:	ee86 7b05 	vdiv.f64	d7, d6, d5
		pid_derivate_WheelMotor2_rpm = -(2.0f * pid_KD_WheelMotor2_rpm * (wheel.speed_WheelMotor2_rpm - pid_lastmeasure_WheelMotor2_rpm)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800093a:	4b70      	ldr	r3, [pc, #448]	; (8000afc <CORRECTOR_pid+0x4bc>)
 800093c:	ed83 7b00 	vstr	d7, [r3]
		pid_derivate_WheelMotor3_rpm = -(2.0f * pid_KD_WheelMotor3_rpm * (wheel.speed_WheelMotor3_rpm - pid_lastmeasure_WheelMotor3_rpm)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000940:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8000944:	4b6e      	ldr	r3, [pc, #440]	; (8000b00 <CORRECTOR_pid+0x4c0>)
 8000946:	ed93 7b00 	vldr	d7, [r3]
 800094a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800094e:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8000ad0 <CORRECTOR_pid+0x490>
 8000952:	ee27 6b06 	vmul.f64	d6, d7, d6
										+ (2.0f * PID_TAU - SAMPLING_TIME) * pid_derivate_WheelMotor3_rpm)
 8000956:	4b6b      	ldr	r3, [pc, #428]	; (8000b04 <CORRECTOR_pid+0x4c4>)
 8000958:	ed93 7b00 	vldr	d7, [r3]
 800095c:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 8000ad8 <CORRECTOR_pid+0x498>
 8000960:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000964:	ee36 7b07 	vadd.f64	d7, d6, d7
		pid_derivate_WheelMotor3_rpm = -(2.0f * pid_KD_WheelMotor3_rpm * (wheel.speed_WheelMotor3_rpm - pid_lastmeasure_WheelMotor3_rpm)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000968:	eeb1 6b47 	vneg.f64	d6, d7
										/ (2.0f * PID_TAU + SAMPLING_TIME);
 800096c:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8000ae0 <CORRECTOR_pid+0x4a0>
 8000970:	ee86 7b05 	vdiv.f64	d7, d6, d5
		pid_derivate_WheelMotor3_rpm = -(2.0f * pid_KD_WheelMotor3_rpm * (wheel.speed_WheelMotor3_rpm - pid_lastmeasure_WheelMotor3_rpm)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8000974:	4b63      	ldr	r3, [pc, #396]	; (8000b04 <CORRECTOR_pid+0x4c4>)
 8000976:	ed83 7b00 	vstr	d7, [r3]
		pid_derivate_WheelMotor4_rpm = -(2.0f * pid_KD_WheelMotor4_rpm * (wheel.speed_WheelMotor4_rpm - pid_lastmeasure_WheelMotor4_rpm)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800097a:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800097e:	4b62      	ldr	r3, [pc, #392]	; (8000b08 <CORRECTOR_pid+0x4c8>)
 8000980:	ed93 7b00 	vldr	d7, [r3]
 8000984:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000988:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8000ad0 <CORRECTOR_pid+0x490>
 800098c:	ee27 6b06 	vmul.f64	d6, d7, d6
										+ (2.0f * PID_TAU - SAMPLING_TIME) * pid_derivate_WheelMotor4_rpm)
 8000990:	4b5e      	ldr	r3, [pc, #376]	; (8000b0c <CORRECTOR_pid+0x4cc>)
 8000992:	ed93 7b00 	vldr	d7, [r3]
 8000996:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8000ad8 <CORRECTOR_pid+0x498>
 800099a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800099e:	ee36 7b07 	vadd.f64	d7, d6, d7
		pid_derivate_WheelMotor4_rpm = -(2.0f * pid_KD_WheelMotor4_rpm * (wheel.speed_WheelMotor4_rpm - pid_lastmeasure_WheelMotor4_rpm)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80009a2:	eeb1 6b47 	vneg.f64	d6, d7
										/ (2.0f * PID_TAU + SAMPLING_TIME);
 80009a6:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8000ae0 <CORRECTOR_pid+0x4a0>
 80009aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
		pid_derivate_WheelMotor4_rpm = -(2.0f * pid_KD_WheelMotor4_rpm * (wheel.speed_WheelMotor4_rpm - pid_lastmeasure_WheelMotor4_rpm)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80009ae:	4b57      	ldr	r3, [pc, #348]	; (8000b0c <CORRECTOR_pid+0x4cc>)
 80009b0:	ed83 7b00 	vstr	d7, [r3]


		pid_out.pid_output_WheelMotor1_rpm = (pid_KP_WheelMotor1_rpm * pid_error_WheelMotor1_rpm) + (pid_integral_WheelMotor1_rpm) + (pid_derivate_WheelMotor1_rpm);
 80009b4:	4b56      	ldr	r3, [pc, #344]	; (8000b10 <CORRECTOR_pid+0x4d0>)
 80009b6:	ed93 7b00 	vldr	d7, [r3]
 80009ba:	ee37 6b07 	vadd.f64	d6, d7, d7
 80009be:	4b55      	ldr	r3, [pc, #340]	; (8000b14 <CORRECTOR_pid+0x4d4>)
 80009c0:	ed93 7b00 	vldr	d7, [r3]
 80009c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80009c8:	4b4a      	ldr	r3, [pc, #296]	; (8000af4 <CORRECTOR_pid+0x4b4>)
 80009ca:	ed93 7b00 	vldr	d7, [r3]
 80009ce:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009d2:	4b51      	ldr	r3, [pc, #324]	; (8000b18 <CORRECTOR_pid+0x4d8>)
 80009d4:	ed83 7b00 	vstr	d7, [r3]
		pid_out.pid_output_WheelMotor2_rpm = (pid_KP_WheelMotor2_rpm * pid_error_WheelMotor2_rpm) + (pid_integral_WheelMotor2_rpm) + (pid_derivate_WheelMotor2_rpm);
 80009d8:	4b50      	ldr	r3, [pc, #320]	; (8000b1c <CORRECTOR_pid+0x4dc>)
 80009da:	ed93 7b00 	vldr	d7, [r3]
 80009de:	ee37 6b07 	vadd.f64	d6, d7, d7
 80009e2:	4b4f      	ldr	r3, [pc, #316]	; (8000b20 <CORRECTOR_pid+0x4e0>)
 80009e4:	ed93 7b00 	vldr	d7, [r3]
 80009e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80009ec:	4b43      	ldr	r3, [pc, #268]	; (8000afc <CORRECTOR_pid+0x4bc>)
 80009ee:	ed93 7b00 	vldr	d7, [r3]
 80009f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009f6:	4b48      	ldr	r3, [pc, #288]	; (8000b18 <CORRECTOR_pid+0x4d8>)
 80009f8:	ed83 7b02 	vstr	d7, [r3, #8]
		pid_out.pid_output_WheelMotor3_rpm = (pid_KP_WheelMotor3_rpm * pid_error_WheelMotor3_rpm) + (pid_integral_WheelMotor3_rpm) + (pid_derivate_WheelMotor3_rpm);
 80009fc:	4b49      	ldr	r3, [pc, #292]	; (8000b24 <CORRECTOR_pid+0x4e4>)
 80009fe:	ed93 7b00 	vldr	d7, [r3]
 8000a02:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000a06:	4b48      	ldr	r3, [pc, #288]	; (8000b28 <CORRECTOR_pid+0x4e8>)
 8000a08:	ed93 7b00 	vldr	d7, [r3]
 8000a0c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000a10:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <CORRECTOR_pid+0x4c4>)
 8000a12:	ed93 7b00 	vldr	d7, [r3]
 8000a16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <CORRECTOR_pid+0x4d8>)
 8000a1c:	ed83 7b04 	vstr	d7, [r3, #16]
		pid_out.pid_output_WheelMotor4_rpm = (pid_KP_WheelMotor4_rpm * pid_error_WheelMotor4_rpm) + (pid_integral_WheelMotor4_rpm) + (pid_derivate_WheelMotor4_rpm);
 8000a20:	4b42      	ldr	r3, [pc, #264]	; (8000b2c <CORRECTOR_pid+0x4ec>)
 8000a22:	ed93 7b00 	vldr	d7, [r3]
 8000a26:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <CORRECTOR_pid+0x4a8>)
 8000a2c:	ed93 7b00 	vldr	d7, [r3]
 8000a30:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000a34:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <CORRECTOR_pid+0x4cc>)
 8000a36:	ed93 7b00 	vldr	d7, [r3]
 8000a3a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a3e:	4b36      	ldr	r3, [pc, #216]	; (8000b18 <CORRECTOR_pid+0x4d8>)
 8000a40:	ed83 7b06 	vstr	d7, [r3, #24]



		pid_lasterror_WheelMotor1_rpm = pid_error_WheelMotor1_rpm;
 8000a44:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <CORRECTOR_pid+0x4d0>)
 8000a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a4a:	4939      	ldr	r1, [pc, #228]	; (8000b30 <CORRECTOR_pid+0x4f0>)
 8000a4c:	e9c1 2300 	strd	r2, r3, [r1]
		pid_lasterror_WheelMotor2_rpm = pid_error_WheelMotor2_rpm;
 8000a50:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <CORRECTOR_pid+0x4dc>)
 8000a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a56:	4937      	ldr	r1, [pc, #220]	; (8000b34 <CORRECTOR_pid+0x4f4>)
 8000a58:	e9c1 2300 	strd	r2, r3, [r1]
		pid_lasterror_WheelMotor3_rpm = pid_error_WheelMotor3_rpm;
 8000a5c:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <CORRECTOR_pid+0x4e4>)
 8000a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a62:	4935      	ldr	r1, [pc, #212]	; (8000b38 <CORRECTOR_pid+0x4f8>)
 8000a64:	e9c1 2300 	strd	r2, r3, [r1]
		pid_lasterror_WheelMotor4_rpm = pid_error_WheelMotor4_rpm;
 8000a68:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <CORRECTOR_pid+0x4ec>)
 8000a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a6e:	4933      	ldr	r1, [pc, #204]	; (8000b3c <CORRECTOR_pid+0x4fc>)
 8000a70:	e9c1 2300 	strd	r2, r3, [r1]


		pid_lastmeasure_WheelMotor1_rpm = wheel.speed_WheelMotor1_rpm;
 8000a74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000a78:	491d      	ldr	r1, [pc, #116]	; (8000af0 <CORRECTOR_pid+0x4b0>)
 8000a7a:	e9c1 2300 	strd	r2, r3, [r1]
		pid_lastmeasure_WheelMotor2_rpm = wheel.speed_WheelMotor2_rpm;
 8000a7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000a82:	491d      	ldr	r1, [pc, #116]	; (8000af8 <CORRECTOR_pid+0x4b8>)
 8000a84:	e9c1 2300 	strd	r2, r3, [r1]
		pid_lastmeasure_WheelMotor3_rpm = wheel.speed_WheelMotor3_rpm;
 8000a88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000a8c:	491c      	ldr	r1, [pc, #112]	; (8000b00 <CORRECTOR_pid+0x4c0>)
 8000a8e:	e9c1 2300 	strd	r2, r3, [r1]
		pid_lastmeasure_WheelMotor4_rpm = wheel.speed_WheelMotor4_rpm;
 8000a92:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000a96:	491c      	ldr	r1, [pc, #112]	; (8000b08 <CORRECTOR_pid+0x4c8>)
 8000a98:	e9c1 2300 	strd	r2, r3, [r1]
		pid_out.pid_output_WheelMotor4_rpm =  wheel_speed.target_WheelMotor4_rpm;
	}

	//DEBUG_update_corrector(wheel_speed.target_WheelMotor1_rpm, pid_out.pid_output_WheelMotor1_rpm, pid_out.pid_output_WheelMotor2_rpm, pid_out.pid_output_WheelMotor3_rpm, pid_error_WheelMotor1_rpm , pid_error_WheelMotor2_rpm, pid_error_WheelMotor3_rpm, pid_error_WheelMotor4_rpm, wheel.speed_WheelMotor1_rpm, wheel.speed_WheelMotor2_rpm, wheel.speed_WheelMotor3_rpm, wheel.speed_WheelMotor4_rpm);

	MOTORS_update(pid_out);
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <CORRECTOR_pid+0x4d8>)
 8000a9e:	ed93 4b00 	vldr	d4, [r3]
 8000aa2:	ed93 5b02 	vldr	d5, [r3, #8]
 8000aa6:	ed93 6b04 	vldr	d6, [r3, #16]
 8000aaa:	ed93 7b06 	vldr	d7, [r3, #24]
 8000aae:	eeb0 0b44 	vmov.f64	d0, d4
 8000ab2:	eeb0 1b45 	vmov.f64	d1, d5
 8000ab6:	eeb0 2b46 	vmov.f64	d2, d6
 8000aba:	eeb0 3b47 	vmov.f64	d3, d7
 8000abe:	f001 fa8b 	bl	8001fd8 <MOTORS_update>

}
 8000ac2:	bf00      	nop
 8000ac4:	3740      	adds	r7, #64	; 0x40
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	f3af 8000 	nop.w
	...
 8000ad8:	47ae147a 	.word	0x47ae147a
 8000adc:	3fa47ae1 	.word	0x3fa47ae1
 8000ae0:	47ae147b 	.word	0x47ae147b
 8000ae4:	3fb47ae1 	.word	0x3fb47ae1
 8000ae8:	200000c8 	.word	0x200000c8
 8000aec:	c03e0000 	.word	0xc03e0000
 8000af0:	20000090 	.word	0x20000090
 8000af4:	200000d0 	.word	0x200000d0
 8000af8:	20000098 	.word	0x20000098
 8000afc:	200000d8 	.word	0x200000d8
 8000b00:	200000a0 	.word	0x200000a0
 8000b04:	200000e0 	.word	0x200000e0
 8000b08:	200000a8 	.word	0x200000a8
 8000b0c:	200000e8 	.word	0x200000e8
 8000b10:	20000050 	.word	0x20000050
 8000b14:	200000b0 	.word	0x200000b0
 8000b18:	20000910 	.word	0x20000910
 8000b1c:	20000058 	.word	0x20000058
 8000b20:	200000b8 	.word	0x200000b8
 8000b24:	20000060 	.word	0x20000060
 8000b28:	200000c0 	.word	0x200000c0
 8000b2c:	20000068 	.word	0x20000068
 8000b30:	20000070 	.word	0x20000070
 8000b34:	20000078 	.word	0x20000078
 8000b38:	20000080 	.word	0x20000080
 8000b3c:	20000088 	.word	0x20000088

08000b40 <IT_init>:


uint8_t	spi4_rx[14] = {0};
uint8_t data_uart[16] = {0};
uint16_t it_trace = 0;
void IT_init(){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim7);
 8000b44:	4806      	ldr	r0, [pc, #24]	; (8000b60 <IT_init+0x20>)
 8000b46:	f005 fbc3 	bl	80062d0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <IT_init+0x24>)
 8000b4c:	f005 fbc0 	bl	80062d0 <HAL_TIM_Base_Start_IT>

//	HAL_SPI_Receive_IT(&hspi4, spi4_rx, sizeof(spi4_rx));
	HAL_UART_Receive_IT(&huart3, data_uart, sizeof(data_uart));
 8000b50:	2210      	movs	r2, #16
 8000b52:	4905      	ldr	r1, [pc, #20]	; (8000b68 <IT_init+0x28>)
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <IT_init+0x2c>)
 8000b56:	f006 fde5 	bl	8007724 <HAL_UART_Receive_IT>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200008d0 	.word	0x200008d0
 8000b64:	200006e8 	.word	0x200006e8
 8000b68:	200000f0 	.word	0x200000f0
 8000b6c:	200002e4 	.word	0x200002e4

08000b70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7) {//20ms
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x16>
		PILOTE_mouv();
 8000b82:	f001 ff39 	bl	80029f8 <PILOTE_mouv>
	}
	if(htim->Instance == TIM6) {//1000ms
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d101      	bne.n	8000b94 <HAL_TIM_PeriodElapsedCallback+0x24>
		PILOTE_stop();
 8000b90:	f001 ff10 	bl	80029b4 <PILOTE_stop>
	}
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40001400 	.word	0x40001400
 8000ba0:	40001000 	.word	0x40001000

08000ba4 <HAL_UART_RxCpltCallback>:
	if(hspi->Instance == SPI4) {
		JOYSTICK_recieve_order(spi4_rx);
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3) {
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_UART_RxCpltCallback+0x30>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d109      	bne.n	8000bca <HAL_UART_RxCpltCallback+0x26>
		SECRETARY_dispatcher(data_uart);
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <HAL_UART_RxCpltCallback+0x34>)
 8000bb8:	f001 ffd0 	bl	8002b5c <SECRETARY_dispatcher>
		//HAL_GPIO_TogglePin(OUT_LE3_GPIO_Port, OUT_LE3_Pin);
		//HAL_UART_Abort_IT(&huart3);
		//HAL_UART_Transmit(&huart3, data_uart, sizeof(data_uart),100);
		SECRETARY_process_main();
 8000bbc:	f002 f968 	bl	8002e90 <SECRETARY_process_main>
		HAL_UART_Receive_IT(&huart3, data_uart, sizeof(data_uart));
 8000bc0:	2210      	movs	r2, #16
 8000bc2:	4905      	ldr	r1, [pc, #20]	; (8000bd8 <HAL_UART_RxCpltCallback+0x34>)
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <HAL_UART_RxCpltCallback+0x38>)
 8000bc6:	f006 fdad 	bl	8007724 <HAL_UART_Receive_IT>

	}


}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40004800 	.word	0x40004800
 8000bd8:	200000f0 	.word	0x200000f0
 8000bdc:	200002e4 	.word	0x200002e4

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be4:	f003 f843 	bl	8003c6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be8:	f000 f83e 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bec:	f000 ffd2 	bl	8001b94 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000bf0:	f000 fa2c 	bl	800104c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000bf4:	f000 ff3e 	bl	8001a74 <MX_USART1_UART_Init>
  MX_I2C4_Init();
 8000bf8:	f000 f9aa 	bl	8000f50 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000bfc:	f000 f9e8 	bl	8000fd0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000c00:	f000 fa5c 	bl	80010bc <MX_SPI3_Init>
  MX_SPI6_Init();
 8000c04:	f000 fad0 	bl	80011a8 <MX_SPI6_Init>
  MX_USART2_UART_Init();
 8000c08:	f000 ff64 	bl	8001ad4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c0c:	f000 ff92 	bl	8001b34 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8000c10:	f000 fa92 	bl	8001138 <MX_SPI4_Init>
  MX_ADC1_Init();
 8000c14:	f000 f8be 	bl	8000d94 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000c18:	f000 f91e 	bl	8000e58 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000c1c:	f000 fb02 	bl	8001224 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c20:	f000 fb54 	bl	80012cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c24:	f000 fba8 	bl	8001378 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000c28:	f000 fbfc 	bl	8001424 <MX_TIM5_Init>
  MX_TIM14_Init();
 8000c2c:	f000 fed4 	bl	80019d8 <MX_TIM14_Init>
  MX_TIM8_Init();
 8000c30:	f000 fcbc 	bl	80015ac <MX_TIM8_Init>
  MX_TIM9_Init();
 8000c34:	f000 fd76 	bl	8001724 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000c38:	f000 fde4 	bl	8001804 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000c3c:	f000 fe30 	bl	80018a0 <MX_TIM11_Init>
  MX_TIM13_Init();
 8000c40:	f000 fe7c 	bl	800193c <MX_TIM13_Init>
  MX_TIM7_Init();
 8000c44:	f000 fc7c 	bl	8001540 <MX_TIM7_Init>
  MX_TIM6_Init();
 8000c48:	f000 fc42 	bl	80014d0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  board_message_init();
 8000c4c:	f001 f8d0 	bl	8001df0 <board_message_init>
  board_motors_init();
 8000c50:	f001 f90c 	bl	8001e6c <board_motors_init>
  board_encodeurs_init();
 8000c54:	f001 f98e 	bl	8001f74 <board_encodeurs_init>
  ODOMETRY_init();
 8000c58:	f001 fb80 	bl	800235c <ODOMETRY_init>
  IT_init();
 8000c5c:	f7ff ff70 	bl	8000b40 <IT_init>
  BRAIN_main();
 8000c60:	f7ff fc66 	bl	8000530 <BRAIN_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <main+0x84>
	...

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0b8      	sub	sp, #224	; 0xe0
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c72:	2234      	movs	r2, #52	; 0x34
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f007 fbfc 	bl	8008474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	2290      	movs	r2, #144	; 0x90
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f007 fbed 	bl	8008474 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b3b      	ldr	r3, [pc, #236]	; (8000d88 <SystemClock_Config+0x120>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a3a      	ldr	r2, [pc, #232]	; (8000d88 <SystemClock_Config+0x120>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b38      	ldr	r3, [pc, #224]	; (8000d88 <SystemClock_Config+0x120>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb2:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <SystemClock_Config+0x124>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a35      	ldr	r2, [pc, #212]	; (8000d8c <SystemClock_Config+0x124>)
 8000cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <SystemClock_Config+0x124>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000cec:	23d8      	movs	r3, #216	; 0xd8
 8000cee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d02:	4618      	mov	r0, r3
 8000d04:	f004 f8aa 	bl	8004e5c <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d0e:	f001 f959 	bl	8001fc4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d12:	f004 f853 	bl	8004dbc <HAL_PWREx_EnableOverDrive>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d1c:	f001 f952 	bl	8001fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d20:	230f      	movs	r3, #15
 8000d22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d46:	2107      	movs	r1, #7
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 faf9 	bl	8005340 <HAL_RCC_ClockConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000d54:	f001 f936 	bl	8001fc4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <SystemClock_Config+0x128>)
 8000d5a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 fce3 	bl	800573c <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000d7c:	f001 f922 	bl	8001fc4 <Error_Handler>
  }
}
 8000d80:	bf00      	nop
 8000d82:	37e0      	adds	r7, #224	; 0xe0
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40007000 	.word	0x40007000
 8000d90:	000201c0 	.word	0x000201c0

08000d94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000da6:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000da8:	4a28      	ldr	r2, [pc, #160]	; (8000e4c <MX_ADC1_Init+0xb8>)
 8000daa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000dae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000db2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000db4:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <MX_ADC1_Init+0xbc>)
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000de2:	2202      	movs	r2, #2
 8000de4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df4:	4814      	ldr	r0, [pc, #80]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000df6:	f002 ff97 	bl	8003d28 <HAL_ADC_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e00:	f001 f8e0 	bl	8001fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e04:	230f      	movs	r3, #15
 8000e06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000e16:	f003 f92b 	bl	8004070 <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e20:	f001 f8d0 	bl	8001fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_ADC1_Init+0xc0>)
 8000e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_ADC1_Init+0xb4>)
 8000e32:	f003 f91d 	bl	8004070 <HAL_ADC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e3c:	f001 f8c2 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200004f0 	.word	0x200004f0
 8000e4c:	40012000 	.word	0x40012000
 8000e50:	0f000001 	.word	0x0f000001
 8000e54:	10000012 	.word	0x10000012

08000e58 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000e6c:	4a36      	ldr	r2, [pc, #216]	; (8000f48 <MX_ADC3_Init+0xf0>)
 8000e6e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e70:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000e72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e76:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e78:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e7e:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e98:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000e9a:	4a2c      	ldr	r2, [pc, #176]	; (8000f4c <MX_ADC3_Init+0xf4>)
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9e:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 4;
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000eb8:	4822      	ldr	r0, [pc, #136]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000eba:	f002 ff35 	bl	8003d28 <HAL_ADC_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000ec4:	f001 f87e 	bl	8001fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ec8:	230a      	movs	r3, #10
 8000eca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481a      	ldr	r0, [pc, #104]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000eda:	f003 f8c9 	bl	8004070 <HAL_ADC_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000ee4:	f001 f86e 	bl	8001fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ee8:	230b      	movs	r3, #11
 8000eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000ef6:	f003 f8bb 	bl	8004070 <HAL_ADC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000f00:	f001 f860 	bl	8001fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f04:	230c      	movs	r3, #12
 8000f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000f12:	f003 f8ad 	bl	8004070 <HAL_ADC_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000f1c:	f001 f852 	bl	8001fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f20:	230d      	movs	r3, #13
 8000f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f24:	2304      	movs	r3, #4
 8000f26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_ADC3_Init+0xec>)
 8000f2e:	f003 f89f 	bl	8004070 <HAL_ADC_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8000f38:	f001 f844 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000538 	.word	0x20000538
 8000f48:	40012200 	.word	0x40012200
 8000f4c:	0f000001 	.word	0x0f000001

08000f50 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_I2C4_Init+0x74>)
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <MX_I2C4_Init+0x78>)
 8000f58:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x6000030D;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_I2C4_Init+0x74>)
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <MX_I2C4_Init+0x7c>)
 8000f5e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_I2C4_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_I2C4_Init+0x74>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_I2C4_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_I2C4_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_I2C4_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_I2C4_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_I2C4_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f8a:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <MX_I2C4_Init+0x74>)
 8000f8c:	f003 fdee 	bl	8004b6c <HAL_I2C_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000f96:	f001 f815 	bl	8001fc4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <MX_I2C4_Init+0x74>)
 8000f9e:	f003 fe75 	bl	8004c8c <HAL_I2CEx_ConfigAnalogFilter>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000fa8:	f001 f80c 	bl	8001fc4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000fac:	2100      	movs	r1, #0
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_I2C4_Init+0x74>)
 8000fb0:	f003 feb7 	bl	8004d22 <HAL_I2CEx_ConfigDigitalFilter>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000fba:	f001 f803 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200001b0 	.word	0x200001b0
 8000fc8:	40006000 	.word	0x40006000
 8000fcc:	6000030d 	.word	0x6000030d

08000fd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <MX_SPI1_Init+0x74>)
 8000fd6:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <MX_SPI1_Init+0x78>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fda:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <MX_SPI1_Init+0x74>)
 8000fdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <MX_SPI1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_SPI1_Init+0x74>)
 8000fea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_SPI1_Init+0x74>)
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <MX_SPI1_Init+0x74>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_SPI1_Init+0x74>)
 8000ffe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001002:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_SPI1_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_SPI1_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_SPI1_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_SPI1_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_SPI1_Init+0x74>)
 800101e:	2207      	movs	r2, #7
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MX_SPI1_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_SPI1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_SPI1_Init+0x74>)
 8001030:	f004 ff72 	bl	8005f18 <HAL_SPI_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800103a:	f000 ffc3 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000076c 	.word	0x2000076c
 8001048:	40013000 	.word	0x40013000

0800104c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_SPI2_Init+0x68>)
 8001052:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <MX_SPI2_Init+0x6c>)
 8001054:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_SPI2_Init+0x68>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_SPI2_Init+0x68>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_SPI2_Init+0x68>)
 8001064:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001068:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_SPI2_Init+0x68>)
 800106c:	2202      	movs	r2, #2
 800106e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <MX_SPI2_Init+0x68>)
 8001072:	2201      	movs	r2, #1
 8001074:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_SPI2_Init+0x68>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <MX_SPI2_Init+0x68>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_SPI2_Init+0x68>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <MX_SPI2_Init+0x68>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_SPI2_Init+0x68>)
 8001090:	2207      	movs	r2, #7
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <MX_SPI2_Init+0x68>)
 8001096:	2200      	movs	r2, #0
 8001098:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_SPI2_Init+0x68>)
 800109c:	2200      	movs	r2, #0
 800109e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <MX_SPI2_Init+0x68>)
 80010a2:	f004 ff39 	bl	8005f18 <HAL_SPI_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80010ac:	f000 ff8a 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200001fc 	.word	0x200001fc
 80010b8:	40003800 	.word	0x40003800

080010bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_SPI3_Init+0x74>)
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <MX_SPI3_Init+0x78>)
 80010c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_SPI3_Init+0x74>)
 80010c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_SPI3_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_SPI3_Init+0x74>)
 80010d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_SPI3_Init+0x74>)
 80010de:	2202      	movs	r2, #2
 80010e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_SPI3_Init+0x74>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_SPI3_Init+0x74>)
 80010ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_SPI3_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_SPI3_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_SPI3_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_SPI3_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_SPI3_Init+0x74>)
 800110a:	2207      	movs	r2, #7
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <MX_SPI3_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_SPI3_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_SPI3_Init+0x74>)
 800111c:	f004 fefc 	bl	8005f18 <HAL_SPI_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001126:	f000 ff4d 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000488 	.word	0x20000488
 8001134:	40003c00 	.word	0x40003c00

08001138 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_SPI4_Init+0x68>)
 800113e:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <MX_SPI4_Init+0x6c>)
 8001140:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_SPI4_Init+0x68>)
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_SPI4_Init+0x68>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_SPI4_Init+0x68>)
 8001150:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001154:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_SPI4_Init+0x68>)
 8001158:	2202      	movs	r2, #2
 800115a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_SPI4_Init+0x68>)
 800115e:	2201      	movs	r2, #1
 8001160:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_SPI4_Init+0x68>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <MX_SPI4_Init+0x68>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_SPI4_Init+0x68>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_SPI4_Init+0x68>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_SPI4_Init+0x68>)
 800117c:	2207      	movs	r2, #7
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_SPI4_Init+0x68>)
 8001182:	2200      	movs	r2, #0
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_SPI4_Init+0x68>)
 8001188:	2200      	movs	r2, #0
 800118a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_SPI4_Init+0x68>)
 800118e:	f004 fec3 	bl	8005f18 <HAL_SPI_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8001198:	f000 ff14 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000680 	.word	0x20000680
 80011a4:	40013400 	.word	0x40013400

080011a8 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_SPI6_Init+0x74>)
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <MX_SPI6_Init+0x78>)
 80011b0:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_SPI6_Init+0x74>)
 80011b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011b8:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_SPI6_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_SPI6_Init+0x74>)
 80011c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011c6:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_SPI6_Init+0x74>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_SPI6_Init+0x74>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_SPI6_Init+0x74>)
 80011d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011da:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_SPI6_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_SPI6_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_SPI6_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_SPI6_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_SPI6_Init+0x74>)
 80011f6:	2207      	movs	r2, #7
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_SPI6_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_SPI6_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_SPI6_Init+0x74>)
 8001208:	f004 fe86 	bl	8005f18 <HAL_SPI_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 8001212:	f000 fed7 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200003a4 	.word	0x200003a4
 8001220:	40015400 	.word	0x40015400

08001224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	2224      	movs	r2, #36	; 0x24
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f007 f91e 	bl	8008474 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <MX_TIM2_Init+0xa4>)
 8001244:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001248:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <MX_TIM2_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_TIM2_Init+0xa4>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_TIM2_Init+0xa4>)
 8001258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_TIM2_Init+0xa4>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_TIM2_Init+0xa4>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800126a:	2303      	movs	r3, #3
 800126c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001272:	2301      	movs	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001282:	2301      	movs	r3, #1
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_TIM2_Init+0xa4>)
 8001296:	f005 f8bf 	bl	8006418 <HAL_TIM_Encoder_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80012a0:	f000 fe90 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_TIM2_Init+0xa4>)
 80012b2:	f006 f85f 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80012bc:	f000 fe82 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3730      	adds	r7, #48	; 0x30
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200007d0 	.word	0x200007d0

080012cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08c      	sub	sp, #48	; 0x30
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	2224      	movs	r2, #36	; 0x24
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f007 f8ca 	bl	8008474 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	463b      	mov	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_TIM3_Init+0xa4>)
 80012ec:	4a21      	ldr	r2, [pc, #132]	; (8001374 <MX_TIM3_Init+0xa8>)
 80012ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_TIM3_Init+0xa4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_TIM3_Init+0xa4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_TIM3_Init+0xa4>)
 80012fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001302:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM3_Init+0xa4>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_TIM3_Init+0xa4>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001310:	2303      	movs	r3, #3
 8001312:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001318:	2301      	movs	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001328:	2301      	movs	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	4619      	mov	r1, r3
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_TIM3_Init+0xa4>)
 800133c:	f005 f86c 	bl	8006418 <HAL_TIM_Encoder_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001346:	f000 fe3d 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001352:	463b      	mov	r3, r7
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_TIM3_Init+0xa4>)
 8001358:	f006 f80c 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001362:	f000 fe2f 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3730      	adds	r7, #48	; 0x30
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000448 	.word	0x20000448
 8001374:	40000400 	.word	0x40000400

08001378 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	2224      	movs	r2, #36	; 0x24
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f007 f874 	bl	8008474 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	463b      	mov	r3, r7
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001396:	4b21      	ldr	r3, [pc, #132]	; (800141c <MX_TIM4_Init+0xa4>)
 8001398:	4a21      	ldr	r2, [pc, #132]	; (8001420 <MX_TIM4_Init+0xa8>)
 800139a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_TIM4_Init+0xa4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <MX_TIM4_Init+0xa4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <MX_TIM4_Init+0xa4>)
 80013aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_TIM4_Init+0xa4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <MX_TIM4_Init+0xa4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013bc:	2303      	movs	r3, #3
 80013be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c4:	2301      	movs	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d4:	2301      	movs	r3, #1
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	480d      	ldr	r0, [pc, #52]	; (800141c <MX_TIM4_Init+0xa4>)
 80013e8:	f005 f816 	bl	8006418 <HAL_TIM_Encoder_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80013f2:	f000 fde7 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013fe:	463b      	mov	r3, r7
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <MX_TIM4_Init+0xa4>)
 8001404:	f005 ffb6 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800140e:	f000 fdd9 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3730      	adds	r7, #48	; 0x30
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200002a4 	.word	0x200002a4
 8001420:	40000800 	.word	0x40000800

08001424 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	; 0x30
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	2224      	movs	r2, #36	; 0x24
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f007 f81e 	bl	8008474 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	463b      	mov	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001442:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <MX_TIM5_Init+0xa4>)
 8001444:	4a21      	ldr	r2, [pc, #132]	; (80014cc <MX_TIM5_Init+0xa8>)
 8001446:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <MX_TIM5_Init+0xa4>)
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <MX_TIM5_Init+0xa4>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <MX_TIM5_Init+0xa4>)
 8001456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_TIM5_Init+0xa4>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_TIM5_Init+0xa4>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001468:	2303      	movs	r3, #3
 800146a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001470:	2301      	movs	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001480:	2301      	movs	r3, #1
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4619      	mov	r1, r3
 8001492:	480d      	ldr	r0, [pc, #52]	; (80014c8 <MX_TIM5_Init+0xa4>)
 8001494:	f004 ffc0 	bl	8006418 <HAL_TIM_Encoder_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800149e:	f000 fd91 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_TIM5_Init+0xa4>)
 80014b0:	f005 ff60 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80014ba:	f000 fd83 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	3730      	adds	r7, #48	; 0x30
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000408 	.word	0x20000408
 80014cc:	40000c00 	.word	0x40000c00

080014d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_TIM6_Init+0x68>)
 80014e2:	4a16      	ldr	r2, [pc, #88]	; (800153c <MX_TIM6_Init+0x6c>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_TIM6_Init+0x68>)
 80014e8:	f642 2230 	movw	r2, #10800	; 0x2a30
 80014ec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_TIM6_Init+0x68>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <MX_TIM6_Init+0x68>)
 80014f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80014fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_TIM6_Init+0x68>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_TIM6_Init+0x68>)
 8001504:	f004 feb9 	bl	800627a <HAL_TIM_Base_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800150e:	f000 fd59 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <MX_TIM6_Init+0x68>)
 8001520:	f005 ff28 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800152a:	f000 fd4b 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200006e8 	.word	0x200006e8
 800153c:	40001000 	.word	0x40001000

08001540 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_TIM7_Init+0x64>)
 8001552:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <MX_TIM7_Init+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_TIM7_Init+0x64>)
 8001558:	f642 2230 	movw	r2, #10800	; 0x2a30
 800155c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_TIM7_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 199;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_TIM7_Init+0x64>)
 8001566:	22c7      	movs	r2, #199	; 0xc7
 8001568:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_TIM7_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <MX_TIM7_Init+0x64>)
 8001572:	f004 fe82 	bl	800627a <HAL_TIM_Base_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800157c:	f000 fd22 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_TIM7_Init+0x64>)
 800158e:	f005 fef1 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001598:	f000 fd14 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200008d0 	.word	0x200008d0
 80015a8:	40001400 	.word	0x40001400

080015ac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b09a      	sub	sp, #104	; 0x68
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	615a      	str	r2, [r3, #20]
 80015de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	222c      	movs	r2, #44	; 0x2c
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f006 ff44 	bl	8008474 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015ec:	4b4b      	ldr	r3, [pc, #300]	; (800171c <MX_TIM8_Init+0x170>)
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <MX_TIM8_Init+0x174>)
 80015f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 10;
 80015f2:	4b4a      	ldr	r3, [pc, #296]	; (800171c <MX_TIM8_Init+0x170>)
 80015f4:	220a      	movs	r2, #10
 80015f6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f8:	4b48      	ldr	r3, [pc, #288]	; (800171c <MX_TIM8_Init+0x170>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <MX_TIM8_Init+0x170>)
 8001600:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001604:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001606:	4b45      	ldr	r3, [pc, #276]	; (800171c <MX_TIM8_Init+0x170>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800160c:	4b43      	ldr	r3, [pc, #268]	; (800171c <MX_TIM8_Init+0x170>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b42      	ldr	r3, [pc, #264]	; (800171c <MX_TIM8_Init+0x170>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001618:	4840      	ldr	r0, [pc, #256]	; (800171c <MX_TIM8_Init+0x170>)
 800161a:	f004 fe2e 	bl	800627a <HAL_TIM_Base_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001624:	f000 fcce 	bl	8001fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800162e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001632:	4619      	mov	r1, r3
 8001634:	4839      	ldr	r0, [pc, #228]	; (800171c <MX_TIM8_Init+0x170>)
 8001636:	f005 f9f1 	bl	8006a1c <HAL_TIM_ConfigClockSource>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001640:	f000 fcc0 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001644:	4835      	ldr	r0, [pc, #212]	; (800171c <MX_TIM8_Init+0x170>)
 8001646:	f004 fe6d 	bl	8006324 <HAL_TIM_PWM_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001650:	f000 fcb8 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001660:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001664:	4619      	mov	r1, r3
 8001666:	482d      	ldr	r0, [pc, #180]	; (800171c <MX_TIM8_Init+0x170>)
 8001668:	f005 fe84 	bl	8007374 <HAL_TIMEx_MasterConfigSynchronization>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001672:	f000 fca7 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001676:	2360      	movs	r3, #96	; 0x60
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167e:	2300      	movs	r3, #0
 8001680:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001682:	2300      	movs	r3, #0
 8001684:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001696:	2208      	movs	r2, #8
 8001698:	4619      	mov	r1, r3
 800169a:	4820      	ldr	r0, [pc, #128]	; (800171c <MX_TIM8_Init+0x170>)
 800169c:	f005 f8a6 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80016a6:	f000 fc8d 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016ae:	220c      	movs	r2, #12
 80016b0:	4619      	mov	r1, r3
 80016b2:	481a      	ldr	r0, [pc, #104]	; (800171c <MX_TIM8_Init+0x170>)
 80016b4:	f005 f89a 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 80016be:	f000 fc81 	bl	8001fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4809      	ldr	r0, [pc, #36]	; (800171c <MX_TIM8_Init+0x170>)
 80016f8:	f005 fe98 	bl	800742c <HAL_TIMEx_ConfigBreakDeadTime>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8001702:	f000 fc5f 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_TIM8_Init+0x170>)
 8001708:	f002 f800 	bl	800370c <HAL_TIM_MspPostInit>
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <MX_TIM8_Init+0x170>)
 800170e:	f001 fffd 	bl	800370c <HAL_TIM_MspPostInit>

}
 8001712:	bf00      	nop
 8001714:	3768      	adds	r7, #104	; 0x68
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000260 	.word	0x20000260
 8001720:	40010400 	.word	0x40010400

08001724 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08c      	sub	sp, #48	; 0x30
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172a:	f107 0320 	add.w	r3, r7, #32
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	615a      	str	r2, [r3, #20]
 8001748:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800174a:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <MX_TIM9_Init+0xd8>)
 800174c:	4a2c      	ldr	r2, [pc, #176]	; (8001800 <MX_TIM9_Init+0xdc>)
 800174e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10;
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <MX_TIM9_Init+0xd8>)
 8001752:	220a      	movs	r2, #10
 8001754:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <MX_TIM9_Init+0xd8>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 800175c:	4b27      	ldr	r3, [pc, #156]	; (80017fc <MX_TIM9_Init+0xd8>)
 800175e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001762:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <MX_TIM9_Init+0xd8>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <MX_TIM9_Init+0xd8>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001770:	4822      	ldr	r0, [pc, #136]	; (80017fc <MX_TIM9_Init+0xd8>)
 8001772:	f004 fd82 	bl	800627a <HAL_TIM_Base_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800177c:	f000 fc22 	bl	8001fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001786:	f107 0320 	add.w	r3, r7, #32
 800178a:	4619      	mov	r1, r3
 800178c:	481b      	ldr	r0, [pc, #108]	; (80017fc <MX_TIM9_Init+0xd8>)
 800178e:	f005 f945 	bl	8006a1c <HAL_TIM_ConfigClockSource>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001798:	f000 fc14 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800179c:	4817      	ldr	r0, [pc, #92]	; (80017fc <MX_TIM9_Init+0xd8>)
 800179e:	f004 fdc1 	bl	8006324 <HAL_TIM_PWM_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80017a8:	f000 fc0c 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ac:	2360      	movs	r3, #96	; 0x60
 80017ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	480e      	ldr	r0, [pc, #56]	; (80017fc <MX_TIM9_Init+0xd8>)
 80017c4:	f005 f812 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80017ce:	f000 fbf9 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2204      	movs	r2, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4808      	ldr	r0, [pc, #32]	; (80017fc <MX_TIM9_Init+0xd8>)
 80017da:	f005 f807 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 80017e4:	f000 fbee 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <MX_TIM9_Init+0xd8>)
 80017ea:	f001 ff8f 	bl	800370c <HAL_TIM_MspPostInit>
  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80017ee:	4803      	ldr	r0, [pc, #12]	; (80017fc <MX_TIM9_Init+0xd8>)
 80017f0:	f001 ff8c 	bl	800370c <HAL_TIM_MspPostInit>

}
 80017f4:	bf00      	nop
 80017f6:	3730      	adds	r7, #48	; 0x30
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000728 	.word	0x20000728
 8001800:	40014000 	.word	0x40014000

08001804 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
 8001818:	615a      	str	r2, [r3, #20]
 800181a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <MX_TIM10_Init+0x94>)
 800181e:	4a1f      	ldr	r2, [pc, #124]	; (800189c <MX_TIM10_Init+0x98>)
 8001820:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10;
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <MX_TIM10_Init+0x94>)
 8001824:	220a      	movs	r2, #10
 8001826:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <MX_TIM10_Init+0x94>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_TIM10_Init+0x94>)
 8001830:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001834:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <MX_TIM10_Init+0x94>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <MX_TIM10_Init+0x94>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001842:	4815      	ldr	r0, [pc, #84]	; (8001898 <MX_TIM10_Init+0x94>)
 8001844:	f004 fd19 	bl	800627a <HAL_TIM_Base_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800184e:	f000 fbb9 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001852:	4811      	ldr	r0, [pc, #68]	; (8001898 <MX_TIM10_Init+0x94>)
 8001854:	f004 fd66 	bl	8006324 <HAL_TIM_PWM_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800185e:	f000 fbb1 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001862:	2360      	movs	r3, #96	; 0x60
 8001864:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	4619      	mov	r1, r3
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <MX_TIM10_Init+0x94>)
 800187a:	f004 ffb7 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001884:	f000 fb9e 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <MX_TIM10_Init+0x94>)
 800188a:	f001 ff3f 	bl	800370c <HAL_TIM_MspPostInit>

}
 800188e:	bf00      	nop
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000364 	.word	0x20000364
 800189c:	40014400 	.word	0x40014400

080018a0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
 80018b4:	615a      	str	r2, [r3, #20]
 80018b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80018b8:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <MX_TIM11_Init+0x94>)
 80018ba:	4a1f      	ldr	r2, [pc, #124]	; (8001938 <MX_TIM11_Init+0x98>)
 80018bc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10;
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <MX_TIM11_Init+0x94>)
 80018c0:	220a      	movs	r2, #10
 80018c2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <MX_TIM11_Init+0x94>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <MX_TIM11_Init+0x94>)
 80018cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018d0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <MX_TIM11_Init+0x94>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <MX_TIM11_Init+0x94>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80018de:	4815      	ldr	r0, [pc, #84]	; (8001934 <MX_TIM11_Init+0x94>)
 80018e0:	f004 fccb 	bl	800627a <HAL_TIM_Base_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80018ea:	f000 fb6b 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80018ee:	4811      	ldr	r0, [pc, #68]	; (8001934 <MX_TIM11_Init+0x94>)
 80018f0:	f004 fd18 	bl	8006324 <HAL_TIM_PWM_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80018fa:	f000 fb63 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fe:	2360      	movs	r3, #96	; 0x60
 8001900:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	2200      	movs	r2, #0
 8001912:	4619      	mov	r1, r3
 8001914:	4807      	ldr	r0, [pc, #28]	; (8001934 <MX_TIM11_Init+0x94>)
 8001916:	f004 ff69 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001920:	f000 fb50 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <MX_TIM11_Init+0x94>)
 8001926:	f001 fef1 	bl	800370c <HAL_TIM_MspPostInit>

}
 800192a:	bf00      	nop
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000640 	.word	0x20000640
 8001938:	40014800 	.word	0x40014800

0800193c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
 8001950:	615a      	str	r2, [r3, #20]
 8001952:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <MX_TIM13_Init+0x94>)
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <MX_TIM13_Init+0x98>)
 8001958:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 5;
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <MX_TIM13_Init+0x94>)
 800195c:	2205      	movs	r2, #5
 800195e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <MX_TIM13_Init+0x94>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <MX_TIM13_Init+0x94>)
 8001968:	f240 32e7 	movw	r2, #999	; 0x3e7
 800196c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <MX_TIM13_Init+0x94>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <MX_TIM13_Init+0x94>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800197a:	4815      	ldr	r0, [pc, #84]	; (80019d0 <MX_TIM13_Init+0x94>)
 800197c:	f004 fc7d 	bl	800627a <HAL_TIM_Base_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001986:	f000 fb1d 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800198a:	4811      	ldr	r0, [pc, #68]	; (80019d0 <MX_TIM13_Init+0x94>)
 800198c:	f004 fcca 	bl	8006324 <HAL_TIM_PWM_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001996:	f000 fb15 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800199a:	2360      	movs	r3, #96	; 0x60
 800199c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2200      	movs	r2, #0
 80019ae:	4619      	mov	r1, r3
 80019b0:	4807      	ldr	r0, [pc, #28]	; (80019d0 <MX_TIM13_Init+0x94>)
 80019b2:	f004 ff1b 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80019bc:	f000 fb02 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80019c0:	4803      	ldr	r0, [pc, #12]	; (80019d0 <MX_TIM13_Init+0x94>)
 80019c2:	f001 fea3 	bl	800370c <HAL_TIM_MspPostInit>

}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000580 	.word	0x20000580
 80019d4:	40001c00 	.word	0x40001c00

080019d8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
 80019ec:	615a      	str	r2, [r3, #20]
 80019ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <MX_TIM14_Init+0x94>)
 80019f2:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <MX_TIM14_Init+0x98>)
 80019f4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 5;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <MX_TIM14_Init+0x94>)
 80019f8:	2205      	movs	r2, #5
 80019fa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_TIM14_Init+0x94>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_TIM14_Init+0x94>)
 8001a04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a08:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_TIM14_Init+0x94>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_TIM14_Init+0x94>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001a16:	4815      	ldr	r0, [pc, #84]	; (8001a6c <MX_TIM14_Init+0x94>)
 8001a18:	f004 fc2f 	bl	800627a <HAL_TIM_Base_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001a22:	f000 facf 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001a26:	4811      	ldr	r0, [pc, #68]	; (8001a6c <MX_TIM14_Init+0x94>)
 8001a28:	f004 fc7c 	bl	8006324 <HAL_TIM_PWM_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001a32:	f000 fac7 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a36:	2360      	movs	r3, #96	; 0x60
 8001a38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4807      	ldr	r0, [pc, #28]	; (8001a6c <MX_TIM14_Init+0x94>)
 8001a4e:	f004 fecd 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001a58:	f000 fab4 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001a5c:	4803      	ldr	r0, [pc, #12]	; (8001a6c <MX_TIM14_Init+0x94>)
 8001a5e:	f001 fe55 	bl	800370c <HAL_TIM_MspPostInit>

}
 8001a62:	bf00      	nop
 8001a64:	3720      	adds	r7, #32
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000890 	.word	0x20000890
 8001a70:	40002000 	.word	0x40002000

08001a74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_USART1_UART_Init+0x58>)
 8001a7a:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <MX_USART1_UART_Init+0x5c>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_USART1_UART_Init+0x58>)
 8001a80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_USART1_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_USART1_UART_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_USART1_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_USART1_UART_Init+0x58>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_USART1_UART_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_USART1_UART_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_USART1_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_USART1_UART_Init+0x58>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_USART1_UART_Init+0x58>)
 8001ab8:	f005 fd54 	bl	8007564 <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ac2:	f000 fa7f 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200005c0 	.word	0x200005c0
 8001ad0:	40011000 	.word	0x40011000

08001ad4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001ada:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <MX_USART2_UART_Init+0x5c>)
 8001adc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001afa:	220c      	movs	r2, #12
 8001afc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_USART2_UART_Init+0x58>)
 8001b18:	f005 fd24 	bl	8007564 <HAL_UART_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b22:	f000 fa4f 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000810 	.word	0x20000810
 8001b30:	40004400 	.word	0x40004400

08001b34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_USART3_UART_Init+0x58>)
 8001b3a:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <MX_USART3_UART_Init+0x5c>)
 8001b3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b3e:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <MX_USART3_UART_Init+0x58>)
 8001b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_USART3_UART_Init+0x58>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_USART3_UART_Init+0x58>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <MX_USART3_UART_Init+0x58>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MX_USART3_UART_Init+0x58>)
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <MX_USART3_UART_Init+0x58>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <MX_USART3_UART_Init+0x58>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <MX_USART3_UART_Init+0x58>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MX_USART3_UART_Init+0x58>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b76:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_USART3_UART_Init+0x58>)
 8001b78:	f005 fcf4 	bl	8007564 <HAL_UART_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b82:	f000 fa1f 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200002e4 	.word	0x200002e4
 8001b90:	40004800 	.word	0x40004800

08001b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08e      	sub	sp, #56	; 0x38
 8001b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001baa:	4b8a      	ldr	r3, [pc, #552]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a89      	ldr	r2, [pc, #548]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001bb0:	f043 0310 	orr.w	r3, r3, #16
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b87      	ldr	r3, [pc, #540]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	623b      	str	r3, [r7, #32]
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bc2:	4b84      	ldr	r3, [pc, #528]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a83      	ldr	r2, [pc, #524]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001bc8:	f043 0320 	orr.w	r3, r3, #32
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b81      	ldr	r3, [pc, #516]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0320 	and.w	r3, r3, #32
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bda:	4b7e      	ldr	r3, [pc, #504]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a7d      	ldr	r2, [pc, #500]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b7b      	ldr	r3, [pc, #492]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf2:	4b78      	ldr	r3, [pc, #480]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a77      	ldr	r2, [pc, #476]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b75      	ldr	r3, [pc, #468]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b72      	ldr	r3, [pc, #456]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a71      	ldr	r2, [pc, #452]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b6f      	ldr	r3, [pc, #444]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	4b6c      	ldr	r3, [pc, #432]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a6b      	ldr	r2, [pc, #428]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b69      	ldr	r3, [pc, #420]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3a:	4b66      	ldr	r3, [pc, #408]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a65      	ldr	r2, [pc, #404]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b63      	ldr	r3, [pc, #396]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c52:	4b60      	ldr	r3, [pc, #384]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a5f      	ldr	r2, [pc, #380]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <MX_GPIO_Init+0x240>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SLEW_DM_Pin|INV_DM_Pin|STM_GPIO3_Pin|STM_GPIO4_Pin
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f44f 516c 	mov.w	r1, #15104	; 0x3b00
 8001c70:	4859      	ldr	r0, [pc, #356]	; (8001dd8 <MX_GPIO_Init+0x244>)
 8001c72:	f002 ff47 	bl	8004b04 <HAL_GPIO_WritePin>
                          |EEPROM_WC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STM_GPIO1_Pin|STM_GPIO2_Pin, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2106      	movs	r1, #6
 8001c7a:	4858      	ldr	r0, [pc, #352]	; (8001ddc <MX_GPIO_Init+0x248>)
 8001c7c:	f002 ff42 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_DM_1_Pin|EN_DM_2_Pin|EN_DM_3_Pin|EN_DM_4_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 41d4 	mov.w	r1, #27136	; 0x6a00
 8001c86:	4856      	ldr	r0, [pc, #344]	; (8001de0 <MX_GPIO_Init+0x24c>)
 8001c88:	f002 ff3c 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_LE3_Pin|OUT_LE4_Pin|OUT_LE5_Pin|OUT_LE6_Pin
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	21fc      	movs	r1, #252	; 0xfc
 8001c90:	4854      	ldr	r0, [pc, #336]	; (8001de4 <MX_GPIO_Init+0x250>)
 8001c92:	f002 ff37 	bl	8004b04 <HAL_GPIO_WritePin>
                          |OUT_LE7_Pin|CAPT_O_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ULTRA_DIR_Pin|WDI_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8001c9c:	4852      	ldr	r0, [pc, #328]	; (8001de8 <MX_GPIO_Init+0x254>)
 8001c9e:	f002 ff31 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SF_DM_2_Pin */
  GPIO_InitStruct.Pin = SF_DM_2_Pin;
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SF_DM_2_GPIO_Port, &GPIO_InitStruct);
 8001cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4848      	ldr	r0, [pc, #288]	; (8001dd8 <MX_GPIO_Init+0x244>)
 8001cb6:	f002 fd61 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : SLEW_DM_Pin INV_DM_Pin STM_GPIO3_Pin STM_GPIO4_Pin
                           EEPROM_WC_Pin */
  GPIO_InitStruct.Pin = SLEW_DM_Pin|INV_DM_Pin|STM_GPIO3_Pin|STM_GPIO4_Pin
 8001cba:	f44f 536c 	mov.w	r3, #15104	; 0x3b00
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
                          |EEPROM_WC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4841      	ldr	r0, [pc, #260]	; (8001dd8 <MX_GPIO_Init+0x244>)
 8001cd4:	f002 fd52 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : STM_GPIO1_Pin STM_GPIO2_Pin */
  GPIO_InitStruct.Pin = STM_GPIO1_Pin|STM_GPIO2_Pin;
 8001cd8:	2306      	movs	r3, #6
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cec:	4619      	mov	r1, r3
 8001cee:	483b      	ldr	r0, [pc, #236]	; (8001ddc <MX_GPIO_Init+0x248>)
 8001cf0:	f002 fd44 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_DM_1_Pin EN_DM_2_Pin EN_DM_3_Pin EN_DM_4_Pin */
  GPIO_InitStruct.Pin = EN_DM_1_Pin|EN_DM_2_Pin|EN_DM_3_Pin|EN_DM_4_Pin;
 8001cf4:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4834      	ldr	r0, [pc, #208]	; (8001de0 <MX_GPIO_Init+0x24c>)
 8001d0e:	f002 fd35 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pin : SF_DM_3_Pin */
  GPIO_InitStruct.Pin = SF_DM_3_Pin;
 8001d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SF_DM_3_GPIO_Port, &GPIO_InitStruct);
 8001d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d24:	4619      	mov	r1, r3
 8001d26:	482e      	ldr	r0, [pc, #184]	; (8001de0 <MX_GPIO_Init+0x24c>)
 8001d28:	f002 fd28 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LE3_Pin OUT_LE4_Pin OUT_LE5_Pin OUT_LE6_Pin
                           OUT_LE7_Pin CAPT_O_RST_Pin */
  GPIO_InitStruct.Pin = OUT_LE3_Pin|OUT_LE4_Pin|OUT_LE5_Pin|OUT_LE6_Pin
 8001d2c:	23fc      	movs	r3, #252	; 0xfc
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_LE7_Pin|CAPT_O_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d40:	4619      	mov	r1, r3
 8001d42:	4828      	ldr	r0, [pc, #160]	; (8001de4 <MX_GPIO_Init+0x250>)
 8001d44:	f002 fd1a 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRA_DIR_Pin WDI_Pin */
  GPIO_InitStruct.Pin = ULTRA_DIR_Pin|WDI_Pin;
 8001d48:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4821      	ldr	r0, [pc, #132]	; (8001de8 <MX_GPIO_Init+0x254>)
 8001d62:	f002 fd0b 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pin : SF_DM_4_Pin */
  GPIO_InitStruct.Pin = SF_DM_4_Pin;
 8001d66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SF_DM_4_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d78:	4619      	mov	r1, r3
 8001d7a:	481b      	ldr	r0, [pc, #108]	; (8001de8 <MX_GPIO_Init+0x254>)
 8001d7c:	f002 fcfe 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTION_3_Pin MOTION_1_Pin */
  GPIO_InitStruct.Pin = MOTION_3_Pin|MOTION_1_Pin;
 8001d80:	2311      	movs	r3, #17
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d90:	4619      	mov	r1, r3
 8001d92:	4816      	ldr	r0, [pc, #88]	; (8001dec <MX_GPIO_Init+0x258>)
 8001d94:	f002 fcf2 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTION_6_Pin */
  GPIO_InitStruct.Pin = MOTION_6_Pin;
 8001d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MOTION_6_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001daa:	4619      	mov	r1, r3
 8001dac:	480d      	ldr	r0, [pc, #52]	; (8001de4 <MX_GPIO_Init+0x250>)
 8001dae:	f002 fce5 	bl	800477c <HAL_GPIO_Init>

  /*Configure GPIO pin : SF_DM_1_Pin */
  GPIO_InitStruct.Pin = SF_DM_1_Pin;
 8001db2:	2320      	movs	r3, #32
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SF_DM_1_GPIO_Port, &GPIO_InitStruct);
 8001dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_GPIO_Init+0x248>)
 8001dc6:	f002 fcd9 	bl	800477c <HAL_GPIO_Init>

}
 8001dca:	bf00      	nop
 8001dcc:	3738      	adds	r7, #56	; 0x38
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40021400 	.word	0x40021400
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40021800 	.word	0x40021800
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40020c00 	.word	0x40020c00

08001df0 <board_message_init>:

/* USER CODE BEGIN 4 */


void board_message_init(void) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", sizeof("\r\n"), HAL_MAX_DELAY);
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
 8001df8:	2203      	movs	r2, #3
 8001dfa:	4918      	ldr	r1, [pc, #96]	; (8001e5c <board_message_init+0x6c>)
 8001dfc:	4818      	ldr	r0, [pc, #96]	; (8001e60 <board_message_init+0x70>)
 8001dfe:	f005 fbff 	bl	8007600 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", sizeof("\r\n"), HAL_MAX_DELAY);
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	2203      	movs	r2, #3
 8001e08:	4914      	ldr	r1, [pc, #80]	; (8001e5c <board_message_init+0x6c>)
 8001e0a:	4815      	ldr	r0, [pc, #84]	; (8001e60 <board_message_init+0x70>)
 8001e0c:	f005 fbf8 	bl	8007600 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", sizeof("\r\n"), HAL_MAX_DELAY);
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
 8001e14:	2203      	movs	r2, #3
 8001e16:	4911      	ldr	r1, [pc, #68]	; (8001e5c <board_message_init+0x6c>)
 8001e18:	4811      	ldr	r0, [pc, #68]	; (8001e60 <board_message_init+0x70>)
 8001e1a:	f005 fbf1 	bl	8007600 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"***********************************\r\n", sizeof("***********************************\r\n"), HAL_MAX_DELAY);
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	2226      	movs	r2, #38	; 0x26
 8001e24:	490f      	ldr	r1, [pc, #60]	; (8001e64 <board_message_init+0x74>)
 8001e26:	480e      	ldr	r0, [pc, #56]	; (8001e60 <board_message_init+0x70>)
 8001e28:	f005 fbea 	bl	8007600 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"* AsserVitesse_V01                *\r\n", sizeof("* AsserVitesse_V01                *\r\n"), HAL_MAX_DELAY);
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e30:	2226      	movs	r2, #38	; 0x26
 8001e32:	490d      	ldr	r1, [pc, #52]	; (8001e68 <board_message_init+0x78>)
 8001e34:	480a      	ldr	r0, [pc, #40]	; (8001e60 <board_message_init+0x70>)
 8001e36:	f005 fbe3 	bl	8007600 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"***********************************\r\n", sizeof("***********************************\r\n"), HAL_MAX_DELAY);
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	2226      	movs	r2, #38	; 0x26
 8001e40:	4908      	ldr	r1, [pc, #32]	; (8001e64 <board_message_init+0x74>)
 8001e42:	4807      	ldr	r0, [pc, #28]	; (8001e60 <board_message_init+0x70>)
 8001e44:	f005 fbdc 	bl	8007600 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", sizeof("\r\n"), HAL_MAX_DELAY);
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	4903      	ldr	r1, [pc, #12]	; (8001e5c <board_message_init+0x6c>)
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <board_message_init+0x70>)
 8001e52:	f005 fbd5 	bl	8007600 <HAL_UART_Transmit>
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	0800849c 	.word	0x0800849c
 8001e60:	20000810 	.word	0x20000810
 8001e64:	080084a0 	.word	0x080084a0
 8001e68:	080084c8 	.word	0x080084c8

08001e6c <board_motors_init>:



void board_motors_init(void) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)"Initialisation des moteurs.....\r\n", sizeof("Initialisation des moteurs.....\r\n"), HAL_MAX_DELAY);
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	2222      	movs	r2, #34	; 0x22
 8001e76:	4935      	ldr	r1, [pc, #212]	; (8001f4c <board_motors_init+0xe0>)
 8001e78:	4835      	ldr	r0, [pc, #212]	; (8001f50 <board_motors_init+0xe4>)
 8001e7a:	f005 fbc1 	bl	8007600 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(EN_DM_1_GPIO_Port, EN_DM_1_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e84:	4833      	ldr	r0, [pc, #204]	; (8001f54 <board_motors_init+0xe8>)
 8001e86:	f002 fe3d 	bl	8004b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_DM_2_GPIO_Port, EN_DM_2_Pin, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e90:	4830      	ldr	r0, [pc, #192]	; (8001f54 <board_motors_init+0xe8>)
 8001e92:	f002 fe37 	bl	8004b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_DM_3_GPIO_Port, EN_DM_3_Pin, GPIO_PIN_RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e9c:	482d      	ldr	r0, [pc, #180]	; (8001f54 <board_motors_init+0xe8>)
 8001e9e:	f002 fe31 	bl	8004b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_DM_4_GPIO_Port, EN_DM_4_Pin, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ea8:	482a      	ldr	r0, [pc, #168]	; (8001f54 <board_motors_init+0xe8>)
 8001eaa:	f002 fe2b 	bl	8004b04 <HAL_GPIO_WritePin>
	/*HAL_GPIO_WritePin(EN_DM_1_GPIO_Port, EN_DM_1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(EN_DM_2_GPIO_Port, EN_DM_2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(EN_DM_3_GPIO_Port, EN_DM_3_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(EN_DM_4_GPIO_Port, EN_DM_4_Pin, GPIO_PIN_SET);*/

	HAL_GPIO_WritePin(SLEW_DM_GPIO_Port, SLEW_DM_Pin, GPIO_PIN_SET);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb4:	4828      	ldr	r0, [pc, #160]	; (8001f58 <board_motors_init+0xec>)
 8001eb6:	f002 fe25 	bl	8004b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INV_DM_GPIO_Port, INV_DM_Pin, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ec0:	4825      	ldr	r0, [pc, #148]	; (8001f58 <board_motors_init+0xec>)
 8001ec2:	f002 fe1f 	bl	8004b04 <HAL_GPIO_WritePin>

	htim10.Instance->CCR1 = 0;	// MOTOR1 -> IN1
 8001ec6:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <board_motors_init+0xf0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	635a      	str	r2, [r3, #52]	; 0x34
	htim11.Instance->CCR1 = 0;	// MOTOR1 -> IN2
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <board_motors_init+0xf4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34
	htim9.Instance->CCR1 = 0;	// MOTOR2 -> IN1
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <board_motors_init+0xf8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2200      	movs	r2, #0
 8001edc:	635a      	str	r2, [r3, #52]	; 0x34
	htim9.Instance->CCR2 = 0;	// MOTOR2 -> IN2
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <board_motors_init+0xf8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
	htim13.Instance->CCR1 = 0;	// MOTOR3 -> IN1
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <board_motors_init+0xfc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	635a      	str	r2, [r3, #52]	; 0x34
	htim14.Instance->CCR1 = 0;	// MOTOR3 -> IN2
 8001eee:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <board_motors_init+0x100>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR3 = 0;	// MOTOR4 -> IN1
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <board_motors_init+0x104>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	63da      	str	r2, [r3, #60]	; 0x3c
	htim8.Instance->CCR4 = 0;	// MOTOR4 -> IN2
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <board_motors_init+0x104>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2200      	movs	r2, #0
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001f06:	2100      	movs	r1, #0
 8001f08:	4814      	ldr	r0, [pc, #80]	; (8001f5c <board_motors_init+0xf0>)
 8001f0a:	f004 fa41 	bl	8006390 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4813      	ldr	r0, [pc, #76]	; (8001f60 <board_motors_init+0xf4>)
 8001f12:	f004 fa3d 	bl	8006390 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001f16:	2100      	movs	r1, #0
 8001f18:	4812      	ldr	r0, [pc, #72]	; (8001f64 <board_motors_init+0xf8>)
 8001f1a:	f004 fa39 	bl	8006390 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8001f1e:	2104      	movs	r1, #4
 8001f20:	4810      	ldr	r0, [pc, #64]	; (8001f64 <board_motors_init+0xf8>)
 8001f22:	f004 fa35 	bl	8006390 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001f26:	2100      	movs	r1, #0
 8001f28:	480f      	ldr	r0, [pc, #60]	; (8001f68 <board_motors_init+0xfc>)
 8001f2a:	f004 fa31 	bl	8006390 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001f2e:	2100      	movs	r1, #0
 8001f30:	480e      	ldr	r0, [pc, #56]	; (8001f6c <board_motors_init+0x100>)
 8001f32:	f004 fa2d 	bl	8006390 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001f36:	2108      	movs	r1, #8
 8001f38:	480d      	ldr	r0, [pc, #52]	; (8001f70 <board_motors_init+0x104>)
 8001f3a:	f004 fa29 	bl	8006390 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001f3e:	210c      	movs	r1, #12
 8001f40:	480b      	ldr	r0, [pc, #44]	; (8001f70 <board_motors_init+0x104>)
 8001f42:	f004 fa25 	bl	8006390 <HAL_TIM_PWM_Start>

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	080084f0 	.word	0x080084f0
 8001f50:	20000810 	.word	0x20000810
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40021400 	.word	0x40021400
 8001f5c:	20000364 	.word	0x20000364
 8001f60:	20000640 	.word	0x20000640
 8001f64:	20000728 	.word	0x20000728
 8001f68:	20000580 	.word	0x20000580
 8001f6c:	20000890 	.word	0x20000890
 8001f70:	20000260 	.word	0x20000260

08001f74 <board_encodeurs_init>:

void board_encodeurs_init(void) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)"Initialisation des encodeurs.....\r\n", sizeof("Initialisation des encodeurs.....\r\n"), HAL_MAX_DELAY);
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7c:	2224      	movs	r2, #36	; 0x24
 8001f7e:	490b      	ldr	r1, [pc, #44]	; (8001fac <board_encodeurs_init+0x38>)
 8001f80:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <board_encodeurs_init+0x3c>)
 8001f82:	f005 fb3d 	bl	8007600 <HAL_UART_Transmit>


	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);		// Encodeur M1
 8001f86:	213c      	movs	r1, #60	; 0x3c
 8001f88:	480a      	ldr	r0, [pc, #40]	; (8001fb4 <board_encodeurs_init+0x40>)
 8001f8a:	f004 fad7 	bl	800653c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);		// Encodeur M2
 8001f8e:	213c      	movs	r1, #60	; 0x3c
 8001f90:	4809      	ldr	r0, [pc, #36]	; (8001fb8 <board_encodeurs_init+0x44>)
 8001f92:	f004 fad3 	bl	800653c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);		// Encodeur M3
 8001f96:	213c      	movs	r1, #60	; 0x3c
 8001f98:	4808      	ldr	r0, [pc, #32]	; (8001fbc <board_encodeurs_init+0x48>)
 8001f9a:	f004 facf 	bl	800653c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);		// Encodeur M4
 8001f9e:	213c      	movs	r1, #60	; 0x3c
 8001fa0:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <board_encodeurs_init+0x4c>)
 8001fa2:	f004 facb 	bl	800653c <HAL_TIM_Encoder_Start>


}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	08008514 	.word	0x08008514
 8001fb0:	20000810 	.word	0x20000810
 8001fb4:	200002a4 	.word	0x200002a4
 8001fb8:	20000448 	.word	0x20000448
 8001fbc:	200007d0 	.word	0x200007d0
 8001fc0:	20000408 	.word	0x20000408

08001fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	0000      	movs	r0, r0
 8001fd4:	0000      	movs	r0, r0
	...

08001fd8 <MOTORS_update>:
#define COEF_DUTYCYCLE 99
uint16_t dutyCycle[NB_MOTORS] = {0};
double pid_consigne[NB_MOTORS] = {0};
uint16_t dutycycle_Motor1, dutycycle_Motor2, dutycycle_Motor3, dutycycle_Motor4;

void MOTORS_update(CORRECTOR_pid_out pid_out){
 8001fd8:	b480      	push	{r7}
 8001fda:	b08b      	sub	sp, #44	; 0x2c
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	eeb0 4b40 	vmov.f64	d4, d0
 8001fe2:	eeb0 5b41 	vmov.f64	d5, d1
 8001fe6:	eeb0 6b42 	vmov.f64	d6, d2
 8001fea:	eeb0 7b43 	vmov.f64	d7, d3
 8001fee:	ed87 4b00 	vstr	d4, [r7]
 8001ff2:	ed87 5b02 	vstr	d5, [r7, #8]
 8001ff6:	ed87 6b04 	vstr	d6, [r7, #16]
 8001ffa:	ed87 7b06 	vstr	d7, [r7, #24]

	pid_consigne[0] = pid_out.pid_output_WheelMotor1_rpm;
 8001ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002002:	49ab      	ldr	r1, [pc, #684]	; (80022b0 <MOTORS_update+0x2d8>)
 8002004:	e9c1 2300 	strd	r2, r3, [r1]
	pid_consigne[1] = pid_out.pid_output_WheelMotor2_rpm;
 8002008:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800200c:	49a8      	ldr	r1, [pc, #672]	; (80022b0 <MOTORS_update+0x2d8>)
 800200e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid_consigne[2] = pid_out.pid_output_WheelMotor3_rpm;
 8002012:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002016:	49a6      	ldr	r1, [pc, #664]	; (80022b0 <MOTORS_update+0x2d8>)
 8002018:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pid_consigne[3] = pid_out.pid_output_WheelMotor4_rpm;
 800201c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002020:	49a3      	ldr	r1, [pc, #652]	; (80022b0 <MOTORS_update+0x2d8>)
 8002022:	e9c1 2306 	strd	r2, r3, [r1, #24]

	// on major la correction du PID
	for (uint8_t motor = 0; motor < NB_MOTORS; motor++){
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800202c:	e044      	b.n	80020b8 <MOTORS_update+0xe0>
		if(pid_consigne[motor] > pid_outputMaxP) {
 800202e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002032:	4a9f      	ldr	r2, [pc, #636]	; (80022b0 <MOTORS_update+0x2d8>)
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	ed93 7b00 	vldr	d7, [r3]
 800203c:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8002298 <MOTORS_update+0x2c0>
 8002040:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002048:	dd0a      	ble.n	8002060 <MOTORS_update+0x88>
			pid_consigne[motor] = pid_outputMaxP;
 800204a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800204e:	4a98      	ldr	r2, [pc, #608]	; (80022b0 <MOTORS_update+0x2d8>)
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	18d1      	adds	r1, r2, r3
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	4b96      	ldr	r3, [pc, #600]	; (80022b4 <MOTORS_update+0x2dc>)
 800205a:	e9c1 2300 	strd	r2, r3, [r1]
 800205e:	e026      	b.n	80020ae <MOTORS_update+0xd6>
		}
		else if(pid_consigne[motor] < pid_outputMaxN) {
 8002060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002064:	4a92      	ldr	r2, [pc, #584]	; (80022b0 <MOTORS_update+0x2d8>)
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	ed93 7b00 	vldr	d7, [r3]
 800206e:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 80022a0 <MOTORS_update+0x2c8>
 8002072:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	d50a      	bpl.n	8002092 <MOTORS_update+0xba>
			pid_consigne[motor] = pid_outputMaxN;
 800207c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002080:	4a8b      	ldr	r2, [pc, #556]	; (80022b0 <MOTORS_update+0x2d8>)
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	18d1      	adds	r1, r2, r3
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	4b8b      	ldr	r3, [pc, #556]	; (80022b8 <MOTORS_update+0x2e0>)
 800208c:	e9c1 2300 	strd	r2, r3, [r1]
 8002090:	e00d      	b.n	80020ae <MOTORS_update+0xd6>
		}
		else {
			pid_consigne[motor] = pid_consigne[motor];
 8002092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002096:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800209a:	4a85      	ldr	r2, [pc, #532]	; (80022b0 <MOTORS_update+0x2d8>)
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	4882      	ldr	r0, [pc, #520]	; (80022b0 <MOTORS_update+0x2d8>)
 80020a6:	00c9      	lsls	r1, r1, #3
 80020a8:	4401      	add	r1, r0
 80020aa:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint8_t motor = 0; motor < NB_MOTORS; motor++){
 80020ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020b2:	3301      	adds	r3, #1
 80020b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d9b6      	bls.n	800202e <MOTORS_update+0x56>
		}
	}
	// on transforme la consigne du PID en dutycycle avec une valeur absolue et un coefficient
	for (uint8_t motor = 0; motor < NB_MOTORS; motor++){
 80020c0:	2300      	movs	r3, #0
 80020c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020c6:	e03d      	b.n	8002144 <MOTORS_update+0x16c>
		if(pid_consigne[motor] < 0) {
 80020c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020cc:	4a78      	ldr	r2, [pc, #480]	; (80022b0 <MOTORS_update+0x2d8>)
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	ed93 7b00 	vldr	d7, [r3]
 80020d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80020da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020de:	d517      	bpl.n	8002110 <MOTORS_update+0x138>
			dutyCycle[motor] = (uint16_t)(-pid_consigne[motor] * COEF_DUTYCYCLE);
 80020e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020e4:	4a72      	ldr	r2, [pc, #456]	; (80022b0 <MOTORS_update+0x2d8>)
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	ed93 7b00 	vldr	d7, [r3]
 80020ee:	eeb1 7b47 	vneg.f64	d7, d7
 80020f2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80022a8 <MOTORS_update+0x2d0>
 80020f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002102:	ee17 2a90 	vmov	r2, s15
 8002106:	b291      	uxth	r1, r2
 8002108:	4a6c      	ldr	r2, [pc, #432]	; (80022bc <MOTORS_update+0x2e4>)
 800210a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800210e:	e014      	b.n	800213a <MOTORS_update+0x162>
		}
		else {
			dutyCycle[motor] = (uint16_t)(pid_consigne[motor] * COEF_DUTYCYCLE);
 8002110:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002114:	4a66      	ldr	r2, [pc, #408]	; (80022b0 <MOTORS_update+0x2d8>)
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	ed93 7b00 	vldr	d7, [r3]
 800211e:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80022a8 <MOTORS_update+0x2d0>
 8002122:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002126:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800212a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800212e:	ee17 2a90 	vmov	r2, s15
 8002132:	b291      	uxth	r1, r2
 8002134:	4a61      	ldr	r2, [pc, #388]	; (80022bc <MOTORS_update+0x2e4>)
 8002136:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t motor = 0; motor < NB_MOTORS; motor++){
 800213a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800213e:	3301      	adds	r3, #1
 8002140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002144:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002148:	2b03      	cmp	r3, #3
 800214a:	d9bd      	bls.n	80020c8 <MOTORS_update+0xf0>
		}
	}

	//on major le dutycycle
	for (uint8_t motor = 0; motor < NB_MOTORS; motor++){
 800214c:	2300      	movs	r3, #0
 800214e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002152:	e01f      	b.n	8002194 <MOTORS_update+0x1bc>
		if(dutyCycle[motor] > DUTYCYCLE_MAX) {
 8002154:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002158:	4a58      	ldr	r2, [pc, #352]	; (80022bc <MOTORS_update+0x2e4>)
 800215a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800215e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8002162:	4293      	cmp	r3, r2
 8002164:	d907      	bls.n	8002176 <MOTORS_update+0x19e>
			dutyCycle[motor] = DUTYCYCLE_MAX;
 8002166:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800216a:	4a54      	ldr	r2, [pc, #336]	; (80022bc <MOTORS_update+0x2e4>)
 800216c:	f240 31e6 	movw	r1, #998	; 0x3e6
 8002170:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002174:	e009      	b.n	800218a <MOTORS_update+0x1b2>
		}
		else {
			dutyCycle[motor] = dutyCycle[motor];
 8002176:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800217a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800217e:	494f      	ldr	r1, [pc, #316]	; (80022bc <MOTORS_update+0x2e4>)
 8002180:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002184:	4a4d      	ldr	r2, [pc, #308]	; (80022bc <MOTORS_update+0x2e4>)
 8002186:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t motor = 0; motor < NB_MOTORS; motor++){
 800218a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800218e:	3301      	adds	r3, #1
 8002190:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002194:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002198:	2b03      	cmp	r3, #3
 800219a:	d9db      	bls.n	8002154 <MOTORS_update+0x17c>
	//	}
	//	else {
	//		htim9.Instance->CCR1 = 0;
	//		htim9.Instance->CCR2 = 0;
	//	}
	if(pid_consigne[0] > 0) {
 800219c:	4b44      	ldr	r3, [pc, #272]	; (80022b0 <MOTORS_update+0x2d8>)
 800219e:	ed93 7b00 	vldr	d7, [r3]
 80021a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80021a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021aa:	dd09      	ble.n	80021c0 <MOTORS_update+0x1e8>
		htim10.Instance->CCR1 = 0;
 80021ac:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <MOTORS_update+0x2e8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34
		htim11.Instance->CCR1 = dutyCycle[0];
 80021b4:	4b41      	ldr	r3, [pc, #260]	; (80022bc <MOTORS_update+0x2e4>)
 80021b6:	881a      	ldrh	r2, [r3, #0]
 80021b8:	4b42      	ldr	r3, [pc, #264]	; (80022c4 <MOTORS_update+0x2ec>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34
 80021be:	e019      	b.n	80021f4 <MOTORS_update+0x21c>
	}
	else if(pid_consigne[0] < 0) {
 80021c0:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <MOTORS_update+0x2d8>)
 80021c2:	ed93 7b00 	vldr	d7, [r3]
 80021c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80021ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ce:	d509      	bpl.n	80021e4 <MOTORS_update+0x20c>
		htim10.Instance->CCR1 = dutyCycle[0];
 80021d0:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <MOTORS_update+0x2e4>)
 80021d2:	881a      	ldrh	r2, [r3, #0]
 80021d4:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <MOTORS_update+0x2e8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34
		htim11.Instance->CCR1 = 0;
 80021da:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <MOTORS_update+0x2ec>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2200      	movs	r2, #0
 80021e0:	635a      	str	r2, [r3, #52]	; 0x34
 80021e2:	e007      	b.n	80021f4 <MOTORS_update+0x21c>
	}
	else {
		htim10.Instance->CCR1 = 0;
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <MOTORS_update+0x2e8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2200      	movs	r2, #0
 80021ea:	635a      	str	r2, [r3, #52]	; 0x34
		htim11.Instance->CCR1 = 0;
 80021ec:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <MOTORS_update+0x2ec>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2200      	movs	r2, #0
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if(pid_consigne[1] > 0) {
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <MOTORS_update+0x2d8>)
 80021f6:	ed93 7b02 	vldr	d7, [r3, #8]
 80021fa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80021fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002202:	dd09      	ble.n	8002218 <MOTORS_update+0x240>
		htim9.Instance->CCR1 = 0;
 8002204:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <MOTORS_update+0x2f0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2200      	movs	r2, #0
 800220a:	635a      	str	r2, [r3, #52]	; 0x34
		htim9.Instance->CCR2 = dutyCycle[1];
 800220c:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <MOTORS_update+0x2e4>)
 800220e:	885a      	ldrh	r2, [r3, #2]
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <MOTORS_update+0x2f0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	639a      	str	r2, [r3, #56]	; 0x38
 8002216:	e019      	b.n	800224c <MOTORS_update+0x274>
	}
	else if(pid_consigne[1] < 0) {
 8002218:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <MOTORS_update+0x2d8>)
 800221a:	ed93 7b02 	vldr	d7, [r3, #8]
 800221e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002226:	d509      	bpl.n	800223c <MOTORS_update+0x264>
		htim9.Instance->CCR1 = dutyCycle[1];
 8002228:	4b24      	ldr	r3, [pc, #144]	; (80022bc <MOTORS_update+0x2e4>)
 800222a:	885a      	ldrh	r2, [r3, #2]
 800222c:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <MOTORS_update+0x2f0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	635a      	str	r2, [r3, #52]	; 0x34
		htim9.Instance->CCR2 = 0;
 8002232:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <MOTORS_update+0x2f0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2200      	movs	r2, #0
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
 800223a:	e007      	b.n	800224c <MOTORS_update+0x274>
	}
	else {
		htim9.Instance->CCR1 = 0;
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <MOTORS_update+0x2f0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2200      	movs	r2, #0
 8002242:	635a      	str	r2, [r3, #52]	; 0x34
		htim9.Instance->CCR2 = 0;
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <MOTORS_update+0x2f0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2200      	movs	r2, #0
 800224a:	639a      	str	r2, [r3, #56]	; 0x38
	}


	if(pid_consigne[2] > 0) {
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <MOTORS_update+0x2d8>)
 800224e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002252:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225a:	dd09      	ble.n	8002270 <MOTORS_update+0x298>
		htim13.Instance->CCR1 = dutyCycle[2];
 800225c:	4b17      	ldr	r3, [pc, #92]	; (80022bc <MOTORS_update+0x2e4>)
 800225e:	889a      	ldrh	r2, [r3, #4]
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <MOTORS_update+0x2f4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	635a      	str	r2, [r3, #52]	; 0x34
		htim14.Instance->CCR1 = 0;
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <MOTORS_update+0x2f8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2200      	movs	r2, #0
 800226c:	635a      	str	r2, [r3, #52]	; 0x34
 800226e:	e039      	b.n	80022e4 <MOTORS_update+0x30c>
	}
	else if(pid_consigne[2] < 0) {
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <MOTORS_update+0x2d8>)
 8002272:	ed93 7b04 	vldr	d7, [r3, #16]
 8002276:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	d529      	bpl.n	80022d4 <MOTORS_update+0x2fc>
		htim13.Instance->CCR1 = 0;
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <MOTORS_update+0x2f4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2200      	movs	r2, #0
 8002286:	635a      	str	r2, [r3, #52]	; 0x34
		htim14.Instance->CCR1 = dutyCycle[2];
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <MOTORS_update+0x2e4>)
 800228a:	889a      	ldrh	r2, [r3, #4]
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <MOTORS_update+0x2f8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	635a      	str	r2, [r3, #52]	; 0x34
 8002292:	e027      	b.n	80022e4 <MOTORS_update+0x30c>
 8002294:	f3af 8000 	nop.w
 8002298:	00000000 	.word	0x00000000
 800229c:	40490000 	.word	0x40490000
 80022a0:	00000000 	.word	0x00000000
 80022a4:	c0490000 	.word	0xc0490000
 80022a8:	00000000 	.word	0x00000000
 80022ac:	4058c000 	.word	0x4058c000
 80022b0:	20000108 	.word	0x20000108
 80022b4:	40490000 	.word	0x40490000
 80022b8:	c0490000 	.word	0xc0490000
 80022bc:	20000100 	.word	0x20000100
 80022c0:	20000364 	.word	0x20000364
 80022c4:	20000640 	.word	0x20000640
 80022c8:	20000728 	.word	0x20000728
 80022cc:	20000580 	.word	0x20000580
 80022d0:	20000890 	.word	0x20000890
	}
	else {
		htim13.Instance->CCR1 = 0;
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <MOTORS_update+0x370>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2200      	movs	r2, #0
 80022da:	635a      	str	r2, [r3, #52]	; 0x34
		htim14.Instance->CCR1 = 0;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <MOTORS_update+0x374>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2200      	movs	r2, #0
 80022e2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if(pid_consigne[3] > 0) {
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <MOTORS_update+0x378>)
 80022e6:	ed93 7b06 	vldr	d7, [r3, #24]
 80022ea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80022ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f2:	dd09      	ble.n	8002308 <MOTORS_update+0x330>
		htim8.Instance->CCR3 = dutyCycle[3];
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <MOTORS_update+0x37c>)
 80022f6:	88da      	ldrh	r2, [r3, #6]
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <MOTORS_update+0x380>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	63da      	str	r2, [r3, #60]	; 0x3c
		htim8.Instance->CCR4 = 0;
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <MOTORS_update+0x380>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	641a      	str	r2, [r3, #64]	; 0x40
	else {
		htim8.Instance->CCR3 = 0;
		htim8.Instance->CCR4 = 0;
	}

}
 8002306:	e019      	b.n	800233c <MOTORS_update+0x364>
	else if(pid_consigne[3] < 0) {
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <MOTORS_update+0x378>)
 800230a:	ed93 7b06 	vldr	d7, [r3, #24]
 800230e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	d509      	bpl.n	800232c <MOTORS_update+0x354>
		htim8.Instance->CCR3 = 0;
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <MOTORS_update+0x380>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2200      	movs	r2, #0
 800231e:	63da      	str	r2, [r3, #60]	; 0x3c
		htim8.Instance->CCR4 = dutyCycle[3];
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <MOTORS_update+0x37c>)
 8002322:	88da      	ldrh	r2, [r3, #6]
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <MOTORS_update+0x380>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
}
 800232a:	e007      	b.n	800233c <MOTORS_update+0x364>
		htim8.Instance->CCR3 = 0;
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <MOTORS_update+0x380>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	63da      	str	r2, [r3, #60]	; 0x3c
		htim8.Instance->CCR4 = 0;
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <MOTORS_update+0x380>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800233c:	bf00      	nop
 800233e:	372c      	adds	r7, #44	; 0x2c
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	20000580 	.word	0x20000580
 800234c:	20000890 	.word	0x20000890
 8002350:	20000108 	.word	0x20000108
 8002354:	20000100 	.word	0x20000100
 8002358:	20000260 	.word	0x20000260

0800235c <ODOMETRY_init>:


static double X, Y, Z;
int16_t time2, old_time, freq;

void ODOMETRY_init(){
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
	last_encoder1 = 0;
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <ODOMETRY_init+0x28>)
 8002362:	2200      	movs	r2, #0
 8002364:	801a      	strh	r2, [r3, #0]
	last_encoder2 = 0;
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <ODOMETRY_init+0x2c>)
 8002368:	2200      	movs	r2, #0
 800236a:	801a      	strh	r2, [r3, #0]
	last_encoder3 = 0;
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <ODOMETRY_init+0x30>)
 800236e:	2200      	movs	r2, #0
 8002370:	801a      	strh	r2, [r3, #0]
	last_encoder4 = 0;
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <ODOMETRY_init+0x34>)
 8002374:	2200      	movs	r2, #0
 8002376:	801a      	strh	r2, [r3, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000130 	.word	0x20000130
 8002388:	20000132 	.word	0x20000132
 800238c:	20000134 	.word	0x20000134
 8002390:	20000136 	.word	0x20000136
 8002394:	00000000 	.word	0x00000000

08002398 <ODOMETRY_it_10ms>:
void ODOMETRY_it_5ms(){

}


ODOMETRY_speed_wheel ODOMETRY_it_10ms(){
 8002398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800239c:	b090      	sub	sp, #64	; 0x40
 800239e:	af00      	add	r7, sp, #0

	/*double pietEncode1,pietEncode2,pietEncode3, pietEncode4;
	double SR = 0;*/
	HAL_GPIO_TogglePin(STM_GPIO1_GPIO_Port, STM_GPIO1_Pin);
 80023a0:	2102      	movs	r1, #2
 80023a2:	4861      	ldr	r0, [pc, #388]	; (8002528 <ODOMETRY_it_10ms+0x190>)
 80023a4:	f002 fbc7 	bl	8004b36 <HAL_GPIO_TogglePin>
	encoder_Motor1 = ((double)__HAL_TIM_GET_COUNTER(&htim4)); //perte de quelque impulsion
 80023a8:	4b60      	ldr	r3, [pc, #384]	; (800252c <ODOMETRY_it_10ms+0x194>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023b6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80023ba:	ee17 3a90 	vmov	r3, s15
 80023be:	b21a      	sxth	r2, r3
 80023c0:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <ODOMETRY_it_10ms+0x198>)
 80023c2:	801a      	strh	r2, [r3, #0]
	encoder_Motor2 = ((double)__HAL_TIM_GET_COUNTER(&htim3));
 80023c4:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <ODOMETRY_it_10ms+0x19c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023d2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80023d6:	ee17 3a90 	vmov	r3, s15
 80023da:	b21a      	sxth	r2, r3
 80023dc:	4b56      	ldr	r3, [pc, #344]	; (8002538 <ODOMETRY_it_10ms+0x1a0>)
 80023de:	801a      	strh	r2, [r3, #0]
	encoder_Motor3 = ((double)__HAL_TIM_GET_COUNTER(&htim2));
 80023e0:	4b56      	ldr	r3, [pc, #344]	; (800253c <ODOMETRY_it_10ms+0x1a4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023ee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80023f2:	ee17 3a90 	vmov	r3, s15
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	4b51      	ldr	r3, [pc, #324]	; (8002540 <ODOMETRY_it_10ms+0x1a8>)
 80023fa:	801a      	strh	r2, [r3, #0]
	encoder_Motor4 = ((double)__HAL_TIM_GET_COUNTER(&htim5));
 80023fc:	4b51      	ldr	r3, [pc, #324]	; (8002544 <ODOMETRY_it_10ms+0x1ac>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	ee07 3a90 	vmov	s15, r3
 8002406:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800240a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800240e:	ee17 3a90 	vmov	r3, s15
 8002412:	b21a      	sxth	r2, r3
 8002414:	4b4c      	ldr	r3, [pc, #304]	; (8002548 <ODOMETRY_it_10ms+0x1b0>)
 8002416:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002418:	4b44      	ldr	r3, [pc, #272]	; (800252c <ODOMETRY_it_10ms+0x194>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002420:	4b44      	ldr	r3, [pc, #272]	; (8002534 <ODOMETRY_it_10ms+0x19c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2200      	movs	r2, #0
 8002426:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002428:	4b44      	ldr	r3, [pc, #272]	; (800253c <ODOMETRY_it_10ms+0x1a4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2200      	movs	r2, #0
 800242e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 8002430:	4b44      	ldr	r3, [pc, #272]	; (8002544 <ODOMETRY_it_10ms+0x1ac>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2200      	movs	r2, #0
 8002436:	625a      	str	r2, [r3, #36]	; 0x24
	/*wheels_speed.speed_WheelMotor1_rpm = (2*(double)(M_PI)*(double)SAMPLING_TIME*(-encoder_Motor1))/(double)encodeurResolution;  // rad/s
	wheels_speed.speed_WheelMotor2_rpm = (2*(double)(M_PI)*(double)SAMPLING_TIME*(-encoder_Motor2))/(double)encodeurResolution;
	wheels_speed.speed_WheelMotor3_rpm = (2*(double)(M_PI)*(double)SAMPLING_TIME*(encoder_Motor3))/(double)encodeurResolution;
	wheels_speed.speed_WheelMotor4_rpm = (2*(double)(M_PI)*(double)SAMPLING_TIME*(encoder_Motor4))/(double)encodeurResolution;*/

	wheels_speed.speed_WheelMotor1_rpm = (-encoder_Motor1)/((double)encodeurResolution*(double)SAMPLING_TIME);  // rad/s
 8002438:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <ODOMETRY_it_10ms+0x198>)
 800243a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243e:	425b      	negs	r3, r3
 8002440:	ee07 3a90 	vmov	s15, r3
 8002444:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002448:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8002520 <ODOMETRY_it_10ms+0x188>
 800244c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002450:	4b3e      	ldr	r3, [pc, #248]	; (800254c <ODOMETRY_it_10ms+0x1b4>)
 8002452:	ed83 7b00 	vstr	d7, [r3]
	wheels_speed.speed_WheelMotor2_rpm = (-encoder_Motor2)/((double)encodeurResolution*(double)SAMPLING_TIME); //tr/s
 8002456:	4b38      	ldr	r3, [pc, #224]	; (8002538 <ODOMETRY_it_10ms+0x1a0>)
 8002458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245c:	425b      	negs	r3, r3
 800245e:	ee07 3a90 	vmov	s15, r3
 8002462:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002466:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8002520 <ODOMETRY_it_10ms+0x188>
 800246a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800246e:	4b37      	ldr	r3, [pc, #220]	; (800254c <ODOMETRY_it_10ms+0x1b4>)
 8002470:	ed83 7b02 	vstr	d7, [r3, #8]
	wheels_speed.speed_WheelMotor3_rpm = (encoder_Motor3)/((double)encodeurResolution*(double)SAMPLING_TIME);
 8002474:	4b32      	ldr	r3, [pc, #200]	; (8002540 <ODOMETRY_it_10ms+0x1a8>)
 8002476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002482:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8002520 <ODOMETRY_it_10ms+0x188>
 8002486:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800248a:	4b30      	ldr	r3, [pc, #192]	; (800254c <ODOMETRY_it_10ms+0x1b4>)
 800248c:	ed83 7b04 	vstr	d7, [r3, #16]
	wheels_speed.speed_WheelMotor4_rpm = (encoder_Motor4)/((double)encodeurResolution*(double)SAMPLING_TIME);
 8002490:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <ODOMETRY_it_10ms+0x1b0>)
 8002492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800249e:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8002520 <ODOMETRY_it_10ms+0x188>
 80024a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024a6:	4b29      	ldr	r3, [pc, #164]	; (800254c <ODOMETRY_it_10ms+0x1b4>)
 80024a8:	ed83 7b06 	vstr	d7, [r3, #24]

	//	DEBUG_update_corrector(0,0,0,0,encoder_Motor1,encoder_Motor2,encoder_Motor3,encoder_Motor4, last_encoder1,last_encoder2, last_encoder3, last_encoder4);

	ODOMETRY_calcul_speed_robot(wheels_speed);
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <ODOMETRY_it_10ms+0x1b4>)
 80024ae:	ed93 4b00 	vldr	d4, [r3]
 80024b2:	ed93 5b02 	vldr	d5, [r3, #8]
 80024b6:	ed93 6b04 	vldr	d6, [r3, #16]
 80024ba:	ed93 7b06 	vldr	d7, [r3, #24]
 80024be:	eeb0 0b44 	vmov.f64	d0, d4
 80024c2:	eeb0 1b45 	vmov.f64	d1, d5
 80024c6:	eeb0 2b46 	vmov.f64	d2, d6
 80024ca:	eeb0 3b47 	vmov.f64	d3, d7
 80024ce:	f000 f857 	bl	8002580 <ODOMETRY_calcul_speed_robot>

	return wheels_speed;
 80024d2:	4b1e      	ldr	r3, [pc, #120]	; (800254c <ODOMETRY_it_10ms+0x1b4>)
 80024d4:	f107 0420 	add.w	r4, r7, #32
 80024d8:	461d      	mov	r5, r3
 80024da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024e6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024ea:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80024ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80024f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024f6:	ec49 8b14 	vmov	d4, r8, r9
 80024fa:	ec45 4b15 	vmov	d5, r4, r5
 80024fe:	ec41 0b16 	vmov	d6, r0, r1
 8002502:	ec43 2b17 	vmov	d7, r2, r3
}
 8002506:	eeb0 0b44 	vmov.f64	d0, d4
 800250a:	eeb0 1b45 	vmov.f64	d1, d5
 800250e:	eeb0 2b46 	vmov.f64	d2, d6
 8002512:	eeb0 3b47 	vmov.f64	d3, d7
 8002516:	3740      	adds	r7, #64	; 0x40
 8002518:	46bd      	mov	sp, r7
 800251a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800251e:	bf00      	nop
 8002520:	33333333 	.word	0x33333333
 8002524:	404eb333 	.word	0x404eb333
 8002528:	40020400 	.word	0x40020400
 800252c:	200002a4 	.word	0x200002a4
 8002530:	20000128 	.word	0x20000128
 8002534:	20000448 	.word	0x20000448
 8002538:	2000012a 	.word	0x2000012a
 800253c:	200007d0 	.word	0x200007d0
 8002540:	2000012c 	.word	0x2000012c
 8002544:	20000408 	.word	0x20000408
 8002548:	2000012e 	.word	0x2000012e
 800254c:	20000138 	.word	0x20000138

08002550 <ODOMETRY_get_speed_robot>:

ODOMETRY_speed_wheel ODOMETRY_get_speed_wheels(){
	return wheels_speed;
}

ODOMETRY_speed_robot ODOMETRY_get_speed_robot(){
 8002550:	b4b0      	push	{r4, r5, r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	return robot_speed;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a08      	ldr	r2, [pc, #32]	; (800257c <ODOMETRY_get_speed_robot+0x2c>)
 800255c:	461c      	mov	r4, r3
 800255e:	4615      	mov	r5, r2
 8002560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002568:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800256c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bcb0      	pop	{r4, r5, r7}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000158 	.word	0x20000158

08002580 <ODOMETRY_calcul_speed_robot>:

void ODOMETRY_calcul_speed_robot(ODOMETRY_speed_wheel wheels_speed){
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	eeb0 4b40 	vmov.f64	d4, d0
 800258a:	eeb0 5b41 	vmov.f64	d5, d1
 800258e:	eeb0 6b42 	vmov.f64	d6, d2
 8002592:	eeb0 7b43 	vmov.f64	d7, d3
 8002596:	ed87 4b00 	vstr	d4, [r7]
 800259a:	ed87 5b02 	vstr	d5, [r7, #8]
 800259e:	ed87 6b04 	vstr	d6, [r7, #16]
 80025a2:	ed87 7b06 	vstr	d7, [r7, #24]

	robot_speed.speed_X    = ( wheels_speed.speed_WheelMotor4_rpm + wheels_speed.speed_WheelMotor1_rpm + wheels_speed.speed_WheelMotor2_rpm + wheels_speed.speed_WheelMotor3_rpm) * (wheelDiameter*M_PI/4); //en mètre/s
 80025a6:	ed97 6b06 	vldr	d6, [r7, #24]
 80025aa:	ed97 7b00 	vldr	d7, [r7]
 80025ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80025b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80025b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80025ba:	ed97 7b04 	vldr	d7, [r7, #16]
 80025be:	ee36 7b07 	vadd.f64	d7, d6, d7
 80025c2:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8002710 <ODOMETRY_calcul_speed_robot+0x190>
 80025c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <ODOMETRY_calcul_speed_robot+0x1c0>)
 80025cc:	ed83 7b00 	vstr	d7, [r3]
	robot_speed.speed_Y    = (-wheels_speed.speed_WheelMotor4_rpm + wheels_speed.speed_WheelMotor1_rpm - wheels_speed.speed_WheelMotor2_rpm + wheels_speed.speed_WheelMotor3_rpm) * (wheelDiameter*M_PI/4); //en mètre/s
 80025d0:	ed97 6b00 	vldr	d6, [r7]
 80025d4:	ed97 7b06 	vldr	d7, [r7, #24]
 80025d8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80025dc:	ed97 7b02 	vldr	d7, [r7, #8]
 80025e0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80025e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80025e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80025ec:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8002710 <ODOMETRY_calcul_speed_robot+0x190>
 80025f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80025f4:	4b52      	ldr	r3, [pc, #328]	; (8002740 <ODOMETRY_calcul_speed_robot+0x1c0>)
 80025f6:	ed83 7b02 	vstr	d7, [r3, #8]
	robot_speed.speed_teta = ( wheels_speed.speed_WheelMotor4_rpm - wheels_speed.speed_WheelMotor1_rpm - wheels_speed.speed_WheelMotor2_rpm + wheels_speed.speed_WheelMotor3_rpm) * (wheelDiameter*M_PI/(4*(L1+L2))); // rad/s
 80025fa:	ed97 6b06 	vldr	d6, [r7, #24]
 80025fe:	ed97 7b00 	vldr	d7, [r7]
 8002602:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002606:	ed97 7b02 	vldr	d7, [r7, #8]
 800260a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800260e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002612:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002616:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8002718 <ODOMETRY_calcul_speed_robot+0x198>
 800261a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <ODOMETRY_calcul_speed_robot+0x1c0>)
 8002620:	ed83 7b04 	vstr	d7, [r3, #16]

	robot_speed.dist_X = robot_speed.dist_X + ( (-encoder_Motor1 - encoder_Motor2 + encoder_Motor3 + encoder_Motor4 )/(4*(double)encodeurResolution))*((double)(M_PI)*wheelDiameter); //en mètre/s
 8002624:	4b46      	ldr	r3, [pc, #280]	; (8002740 <ODOMETRY_calcul_speed_robot+0x1c0>)
 8002626:	ed93 6b06 	vldr	d6, [r3, #24]
 800262a:	4b46      	ldr	r3, [pc, #280]	; (8002744 <ODOMETRY_calcul_speed_robot+0x1c4>)
 800262c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002630:	425b      	negs	r3, r3
 8002632:	4a45      	ldr	r2, [pc, #276]	; (8002748 <ODOMETRY_calcul_speed_robot+0x1c8>)
 8002634:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	4a44      	ldr	r2, [pc, #272]	; (800274c <ODOMETRY_calcul_speed_robot+0x1cc>)
 800263c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002640:	4413      	add	r3, r2
 8002642:	4a43      	ldr	r2, [pc, #268]	; (8002750 <ODOMETRY_calcul_speed_robot+0x1d0>)
 8002644:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002648:	4413      	add	r3, r2
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002652:	ed9f 4b33 	vldr	d4, [pc, #204]	; 8002720 <ODOMETRY_calcul_speed_robot+0x1a0>
 8002656:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800265a:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8002728 <ODOMETRY_calcul_speed_robot+0x1a8>
 800265e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002662:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002666:	4b36      	ldr	r3, [pc, #216]	; (8002740 <ODOMETRY_calcul_speed_robot+0x1c0>)
 8002668:	ed83 7b06 	vstr	d7, [r3, #24]
	robot_speed.dist_Y = robot_speed.dist_Y + ( (-encoder_Motor1 + encoder_Motor2 + encoder_Motor3 - encoder_Motor4 )/(4*(double)encodeurResolution))*((double)(M_PI)*wheelDiameter); //en mètre/s
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <ODOMETRY_calcul_speed_robot+0x1c0>)
 800266e:	ed93 6b08 	vldr	d6, [r3, #32]
 8002672:	4b35      	ldr	r3, [pc, #212]	; (8002748 <ODOMETRY_calcul_speed_robot+0x1c8>)
 8002674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002678:	461a      	mov	r2, r3
 800267a:	4b32      	ldr	r3, [pc, #200]	; (8002744 <ODOMETRY_calcul_speed_robot+0x1c4>)
 800267c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	4a32      	ldr	r2, [pc, #200]	; (800274c <ODOMETRY_calcul_speed_robot+0x1cc>)
 8002684:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002688:	4413      	add	r3, r2
 800268a:	4a31      	ldr	r2, [pc, #196]	; (8002750 <ODOMETRY_calcul_speed_robot+0x1d0>)
 800268c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800269a:	ed9f 4b21 	vldr	d4, [pc, #132]	; 8002720 <ODOMETRY_calcul_speed_robot+0x1a0>
 800269e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80026a2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002728 <ODOMETRY_calcul_speed_robot+0x1a8>
 80026a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80026aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80026ae:	4b24      	ldr	r3, [pc, #144]	; (8002740 <ODOMETRY_calcul_speed_robot+0x1c0>)
 80026b0:	ed83 7b08 	vstr	d7, [r3, #32]
	robot_speed.teta_Z = robot_speed.teta_Z + ( (encoder_Motor1 + encoder_Motor2 + encoder_Motor3 + encoder_Motor4 )/(4*(double)encodeurResolution))*((double)(M_PI)*wheelDiameter/((L1+L2)))*57,2957795; //en mètre/s
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <ODOMETRY_calcul_speed_robot+0x1c0>)
 80026b6:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <ODOMETRY_calcul_speed_robot+0x1c4>)
 80026bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b21      	ldr	r3, [pc, #132]	; (8002748 <ODOMETRY_calcul_speed_robot+0x1c8>)
 80026c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c8:	4413      	add	r3, r2
 80026ca:	4a20      	ldr	r2, [pc, #128]	; (800274c <ODOMETRY_calcul_speed_robot+0x1cc>)
 80026cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80026d0:	4413      	add	r3, r2
 80026d2:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <ODOMETRY_calcul_speed_robot+0x1d0>)
 80026d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80026d8:	4413      	add	r3, r2
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80026e2:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 8002720 <ODOMETRY_calcul_speed_robot+0x1a0>
 80026e6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80026ea:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8002730 <ODOMETRY_calcul_speed_robot+0x1b0>
 80026ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 80026f2:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8002738 <ODOMETRY_calcul_speed_robot+0x1b8>
 80026f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80026fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <ODOMETRY_calcul_speed_robot+0x1c0>)
 8002700:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	//	DEBUG_update_odometry(robot_speed.speed_X, robot_speed.speed_Y, robot_speed.speed_teta,wheels_speed.speed_WheelMotor1_rpm , wheels_speed.speed_WheelMotor2_rpm , wheels_speed.speed_WheelMotor3_rpm , wheels_speed.speed_WheelMotor4_rpm, 0, 0, 0);

	/*X += robot_speed.speed_X*0.01;
	Y += robot_speed.speed_Y*0.01;
	Z += robot_speed.speed_teta*0.01;*/
}
 8002704:	bf00      	nop
 8002706:	3724      	adds	r7, #36	; 0x24
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	769cf0e0 	.word	0x769cf0e0
 8002714:	3fb41b2f 	.word	0x3fb41b2f
 8002718:	855544c8 	.word	0x855544c8
 800271c:	3fd1f3b3 	.word	0x3fd1f3b3
 8002720:	00000000 	.word	0x00000000
 8002724:	40c7fc00 	.word	0x40c7fc00
 8002728:	769cf0e0 	.word	0x769cf0e0
 800272c:	3fd41b2f 	.word	0x3fd41b2f
 8002730:	855544c8 	.word	0x855544c8
 8002734:	3ff1f3b3 	.word	0x3ff1f3b3
 8002738:	00000000 	.word	0x00000000
 800273c:	404c8000 	.word	0x404c8000
 8002740:	20000158 	.word	0x20000158
 8002744:	20000128 	.word	0x20000128
 8002748:	2000012a 	.word	0x2000012a
 800274c:	2000012c 	.word	0x2000012c
 8002750:	2000012e 	.word	0x2000012e
 8002754:	00000000 	.word	0x00000000

08002758 <PILOTE_recieve_cmd>:
 *
 * @param x en cm/s
 * @param y en cm/s
 * @param z en centirad/s
 */
void PILOTE_recieve_cmd(double x, double y, double z){
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	ed87 0b06 	vstr	d0, [r7, #24]
 8002762:	ed87 1b04 	vstr	d1, [r7, #16]
 8002766:	ed87 2b02 	vstr	d2, [r7, #8]

	TIM6->CNT = 0; ///remise à 0 du watchdog de 1s
 800276a:	4b8b      	ldr	r3, [pc, #556]	; (8002998 <PILOTE_recieve_cmd+0x240>)
 800276c:	2200      	movs	r2, #0
 800276e:	625a      	str	r2, [r3, #36]	; 0x24

	if((((double)((int8_t)x)/100) >= vitx_max) ){
 8002770:	ed97 7b06 	vldr	d7, [r7, #24]
 8002774:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002778:	edc7 7a01 	vstr	s15, [r7, #4]
 800277c:	793b      	ldrb	r3, [r7, #4]
 800277e:	b25b      	sxtb	r3, r3
 8002780:	ee07 3a90 	vmov	s15, r3
 8002784:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002788:	ed9f 5b81 	vldr	d5, [pc, #516]	; 8002990 <PILOTE_recieve_cmd+0x238>
 800278c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002790:	4b82      	ldr	r3, [pc, #520]	; (800299c <PILOTE_recieve_cmd+0x244>)
 8002792:	ed93 7b00 	vldr	d7, [r3]
 8002796:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	db05      	blt.n	80027ac <PILOTE_recieve_cmd+0x54>
		x = vitx_max;
 80027a0:	4b7e      	ldr	r3, [pc, #504]	; (800299c <PILOTE_recieve_cmd+0x244>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80027aa:	e033      	b.n	8002814 <PILOTE_recieve_cmd+0xbc>
	}else if (  (((double)((int8_t)x)/100) <= -vitx_max)){
 80027ac:	ed97 7b06 	vldr	d7, [r7, #24]
 80027b0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80027b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80027b8:	793b      	ldrb	r3, [r7, #4]
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	ee07 3a90 	vmov	s15, r3
 80027c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027c4:	ed9f 5b72 	vldr	d5, [pc, #456]	; 8002990 <PILOTE_recieve_cmd+0x238>
 80027c8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80027cc:	4b73      	ldr	r3, [pc, #460]	; (800299c <PILOTE_recieve_cmd+0x244>)
 80027ce:	ed93 7b00 	vldr	d7, [r3]
 80027d2:	eeb1 7b47 	vneg.f64	d7, d7
 80027d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80027da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027de:	d807      	bhi.n	80027f0 <PILOTE_recieve_cmd+0x98>
		x = -vitx_max;
 80027e0:	4b6e      	ldr	r3, [pc, #440]	; (800299c <PILOTE_recieve_cmd+0x244>)
 80027e2:	ed93 7b00 	vldr	d7, [r3]
 80027e6:	eeb1 7b47 	vneg.f64	d7, d7
 80027ea:	ed87 7b06 	vstr	d7, [r7, #24]
 80027ee:	e011      	b.n	8002814 <PILOTE_recieve_cmd+0xbc>
	}else{
		x = (double)((int8_t)x)/100;
 80027f0:	ed97 7b06 	vldr	d7, [r7, #24]
 80027f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80027f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80027fc:	793b      	ldrb	r3, [r7, #4]
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	ee07 3a90 	vmov	s15, r3
 8002804:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002808:	ed9f 5b61 	vldr	d5, [pc, #388]	; 8002990 <PILOTE_recieve_cmd+0x238>
 800280c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002810:	ed87 7b06 	vstr	d7, [r7, #24]
	}

	if ((((double)((int8_t)y)/100) >= vity_max)){
 8002814:	ed97 7b04 	vldr	d7, [r7, #16]
 8002818:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800281c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002820:	793b      	ldrb	r3, [r7, #4]
 8002822:	b25b      	sxtb	r3, r3
 8002824:	ee07 3a90 	vmov	s15, r3
 8002828:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800282c:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8002990 <PILOTE_recieve_cmd+0x238>
 8002830:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002834:	4b5a      	ldr	r3, [pc, #360]	; (80029a0 <PILOTE_recieve_cmd+0x248>)
 8002836:	ed93 7b00 	vldr	d7, [r3]
 800283a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	db05      	blt.n	8002850 <PILOTE_recieve_cmd+0xf8>
		y = vity_max;
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <PILOTE_recieve_cmd+0x248>)
 8002846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800284e:	e033      	b.n	80028b8 <PILOTE_recieve_cmd+0x160>
	}else if (  (((double)((int8_t)y)/100) <= -vity_max)){
 8002850:	ed97 7b04 	vldr	d7, [r7, #16]
 8002854:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002858:	edc7 7a01 	vstr	s15, [r7, #4]
 800285c:	793b      	ldrb	r3, [r7, #4]
 800285e:	b25b      	sxtb	r3, r3
 8002860:	ee07 3a90 	vmov	s15, r3
 8002864:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002868:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8002990 <PILOTE_recieve_cmd+0x238>
 800286c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <PILOTE_recieve_cmd+0x248>)
 8002872:	ed93 7b00 	vldr	d7, [r3]
 8002876:	eeb1 7b47 	vneg.f64	d7, d7
 800287a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800287e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002882:	d807      	bhi.n	8002894 <PILOTE_recieve_cmd+0x13c>
		y = -vity_max;
 8002884:	4b46      	ldr	r3, [pc, #280]	; (80029a0 <PILOTE_recieve_cmd+0x248>)
 8002886:	ed93 7b00 	vldr	d7, [r3]
 800288a:	eeb1 7b47 	vneg.f64	d7, d7
 800288e:	ed87 7b04 	vstr	d7, [r7, #16]
 8002892:	e011      	b.n	80028b8 <PILOTE_recieve_cmd+0x160>
	}else{
		y = ((double)((int8_t)y)/100);
 8002894:	ed97 7b04 	vldr	d7, [r7, #16]
 8002898:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800289c:	edc7 7a01 	vstr	s15, [r7, #4]
 80028a0:	793b      	ldrb	r3, [r7, #4]
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80028ac:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8002990 <PILOTE_recieve_cmd+0x238>
 80028b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80028b4:	ed87 7b04 	vstr	d7, [r7, #16]
	}

	if((((double)((int8_t)z)/100) >= vitz_max)){
 80028b8:	ed97 7b02 	vldr	d7, [r7, #8]
 80028bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80028c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80028c4:	793b      	ldrb	r3, [r7, #4]
 80028c6:	b25b      	sxtb	r3, r3
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80028d0:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8002990 <PILOTE_recieve_cmd+0x238>
 80028d4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80028d8:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <PILOTE_recieve_cmd+0x24c>)
 80028da:	ed93 7b00 	vldr	d7, [r3]
 80028de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80028e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e6:	db05      	blt.n	80028f4 <PILOTE_recieve_cmd+0x19c>
		z = vitz_max;
 80028e8:	4b2e      	ldr	r3, [pc, #184]	; (80029a4 <PILOTE_recieve_cmd+0x24c>)
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80028f2:	e033      	b.n	800295c <PILOTE_recieve_cmd+0x204>
	}else if(  (((double)((int8_t)z)/100) <= -vitz_max)){
 80028f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80028f8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80028fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8002900:	793b      	ldrb	r3, [r7, #4]
 8002902:	b25b      	sxtb	r3, r3
 8002904:	ee07 3a90 	vmov	s15, r3
 8002908:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800290c:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8002990 <PILOTE_recieve_cmd+0x238>
 8002910:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <PILOTE_recieve_cmd+0x24c>)
 8002916:	ed93 7b00 	vldr	d7, [r3]
 800291a:	eeb1 7b47 	vneg.f64	d7, d7
 800291e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002926:	d807      	bhi.n	8002938 <PILOTE_recieve_cmd+0x1e0>
		z = -vitz_max;
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <PILOTE_recieve_cmd+0x24c>)
 800292a:	ed93 7b00 	vldr	d7, [r3]
 800292e:	eeb1 7b47 	vneg.f64	d7, d7
 8002932:	ed87 7b02 	vstr	d7, [r7, #8]
 8002936:	e011      	b.n	800295c <PILOTE_recieve_cmd+0x204>
	}else{
		z = ((double)((int8_t)z)/100);
 8002938:	ed97 7b02 	vldr	d7, [r7, #8]
 800293c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002940:	edc7 7a01 	vstr	s15, [r7, #4]
 8002944:	793b      	ldrb	r3, [r7, #4]
 8002946:	b25b      	sxtb	r3, r3
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002950:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8002990 <PILOTE_recieve_cmd+0x238>
 8002954:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002958:	ed87 7b02 	vstr	d7, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800295c:	b672      	cpsid	i
}
 800295e:	bf00      	nop




	__disable_irq();
	cmd_x = x; // en mètre/s
 8002960:	4911      	ldr	r1, [pc, #68]	; (80029a8 <PILOTE_recieve_cmd+0x250>)
 8002962:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002966:	e9c1 2300 	strd	r2, r3, [r1]
	cmd_y = y; // en mètre/s
 800296a:	4910      	ldr	r1, [pc, #64]	; (80029ac <PILOTE_recieve_cmd+0x254>)
 800296c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002970:	e9c1 2300 	strd	r2, r3, [r1]
	cmd_z = z; // en rad/s
 8002974:	490e      	ldr	r1, [pc, #56]	; (80029b0 <PILOTE_recieve_cmd+0x258>)
 8002976:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800297a:	e9c1 2300 	strd	r2, r3, [r1]
  __ASM volatile ("cpsie i" : : : "memory");
 800297e:	b662      	cpsie	i
}
 8002980:	bf00      	nop
	__enable_irq();
	//	DEBUG_update_cmd(x, y, z);
}
 8002982:	bf00      	nop
 8002984:	3724      	adds	r7, #36	; 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	00000000 	.word	0x00000000
 8002994:	40590000 	.word	0x40590000
 8002998:	40001000 	.word	0x40001000
 800299c:	20000000 	.word	0x20000000
 80029a0:	20000008 	.word	0x20000008
 80029a4:	20000010 	.word	0x20000010
 80029a8:	200009a0 	.word	0x200009a0
 80029ac:	20000990 	.word	0x20000990
 80029b0:	200009b0 	.word	0x200009b0

080029b4 <PILOTE_stop>:

void PILOTE_stop(){
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
	cmd_x = 0; // en mètre/s
 80029b8:	490c      	ldr	r1, [pc, #48]	; (80029ec <PILOTE_stop+0x38>)
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	e9c1 2300 	strd	r2, r3, [r1]
	cmd_y = 0; // en mètre/s
 80029c6:	490a      	ldr	r1, [pc, #40]	; (80029f0 <PILOTE_stop+0x3c>)
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9c1 2300 	strd	r2, r3, [r1]
	cmd_z = 0; // en rad/s
 80029d4:	4907      	ldr	r1, [pc, #28]	; (80029f4 <PILOTE_stop+0x40>)
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9c1 2300 	strd	r2, r3, [r1]
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	200009a0 	.word	0x200009a0
 80029f0:	20000990 	.word	0x20000990
 80029f4:	200009b0 	.word	0x200009b0

080029f8 <PILOTE_mouv>:

void PILOTE_mouv(){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	time = HAL_GetTick();
 80029fc:	f001 f988 	bl	8003d10 <HAL_GetTick>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4a4f      	ldr	r2, [pc, #316]	; (8002b40 <PILOTE_mouv+0x148>)
 8002a04:	6013      	str	r3, [r2, #0]
	//	HAL_GPIO_TogglePin(OUT_LE3_GPIO_Port, OUT_LE3_Pin); // pin de débug pour verifier la période et vérifier qu'on ne dépasse pas l'it
	//PILOTE_target_speed wheel_speed = {0};

	wheel = ODOMETRY_it_10ms();
 8002a06:	f7ff fcc7 	bl	8002398 <ODOMETRY_it_10ms>
 8002a0a:	eeb0 4b40 	vmov.f64	d4, d0
 8002a0e:	eeb0 5b41 	vmov.f64	d5, d1
 8002a12:	eeb0 6b42 	vmov.f64	d6, d2
 8002a16:	eeb0 7b43 	vmov.f64	d7, d3
 8002a1a:	4b4a      	ldr	r3, [pc, #296]	; (8002b44 <PILOTE_mouv+0x14c>)
 8002a1c:	ed83 4b00 	vstr	d4, [r3]
 8002a20:	ed83 5b02 	vstr	d5, [r3, #8]
 8002a24:	ed83 6b04 	vstr	d6, [r3, #16]
 8002a28:	ed83 7b06 	vstr	d7, [r3, #24]
	SECRETARY_send_to_UltraBrain(ODOMETRY, 40);
 8002a2c:	2128      	movs	r1, #40	; 0x28
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f000 f92a 	bl	8002c88 <SECRETARY_send_to_UltraBrain>
	//		wheel_speed.target_WheelMotor3_rpm = (double)4; //en rad/s
	//		wheel_speed.target_WheelMotor4_rpm = (double)4; //en rad/s
	//	}else{
	//		i++;
	//	}
	wheel_speed.target_WheelMotor1_rpm = (cmd_x + cmd_y - cmd_z*(L1+L2))/((double)M_PI*wheelDiameter); //rad/s
 8002a34:	4b44      	ldr	r3, [pc, #272]	; (8002b48 <PILOTE_mouv+0x150>)
 8002a36:	ed93 6b00 	vldr	d6, [r3]
 8002a3a:	4b44      	ldr	r3, [pc, #272]	; (8002b4c <PILOTE_mouv+0x154>)
 8002a3c:	ed93 7b00 	vldr	d7, [r3]
 8002a40:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002a44:	4b42      	ldr	r3, [pc, #264]	; (8002b50 <PILOTE_mouv+0x158>)
 8002a46:	ed93 7b00 	vldr	d7, [r3]
 8002a4a:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8002b30 <PILOTE_mouv+0x138>
 8002a4e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002a52:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002a56:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8002b38 <PILOTE_mouv+0x140>
 8002a5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <PILOTE_mouv+0x15c>)
 8002a60:	ed83 7b00 	vstr	d7, [r3]
	wheel_speed.target_WheelMotor2_rpm = (cmd_x - cmd_y - cmd_z*(L1+L2))/((double)M_PI*wheelDiameter); //2021 => tour/s
 8002a64:	4b38      	ldr	r3, [pc, #224]	; (8002b48 <PILOTE_mouv+0x150>)
 8002a66:	ed93 6b00 	vldr	d6, [r3]
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <PILOTE_mouv+0x154>)
 8002a6c:	ed93 7b00 	vldr	d7, [r3]
 8002a70:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002a74:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <PILOTE_mouv+0x158>)
 8002a76:	ed93 7b00 	vldr	d7, [r3]
 8002a7a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8002b30 <PILOTE_mouv+0x138>
 8002a7e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002a82:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002a86:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8002b38 <PILOTE_mouv+0x140>
 8002a8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a8e:	4b31      	ldr	r3, [pc, #196]	; (8002b54 <PILOTE_mouv+0x15c>)
 8002a90:	ed83 7b02 	vstr	d7, [r3, #8]
	wheel_speed.target_WheelMotor3_rpm = (cmd_x + cmd_y + cmd_z*(L1+L2))/((double)M_PI*wheelDiameter);
 8002a94:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <PILOTE_mouv+0x150>)
 8002a96:	ed93 6b00 	vldr	d6, [r3]
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <PILOTE_mouv+0x154>)
 8002a9c:	ed93 7b00 	vldr	d7, [r3]
 8002aa0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <PILOTE_mouv+0x158>)
 8002aa6:	ed93 7b00 	vldr	d7, [r3]
 8002aaa:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8002b30 <PILOTE_mouv+0x138>
 8002aae:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002ab2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ab6:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8002b38 <PILOTE_mouv+0x140>
 8002aba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002abe:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <PILOTE_mouv+0x15c>)
 8002ac0:	ed83 7b04 	vstr	d7, [r3, #16]
	wheel_speed.target_WheelMotor4_rpm = (cmd_x - cmd_y + cmd_z*(L1+L2))/((double)M_PI*wheelDiameter);
 8002ac4:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <PILOTE_mouv+0x150>)
 8002ac6:	ed93 6b00 	vldr	d6, [r3]
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <PILOTE_mouv+0x154>)
 8002acc:	ed93 7b00 	vldr	d7, [r3]
 8002ad0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002ad4:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <PILOTE_mouv+0x158>)
 8002ad6:	ed93 7b00 	vldr	d7, [r3]
 8002ada:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8002b30 <PILOTE_mouv+0x138>
 8002ade:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002ae2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ae6:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8002b38 <PILOTE_mouv+0x140>
 8002aea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <PILOTE_mouv+0x15c>)
 8002af0:	ed83 7b06 	vstr	d7, [r3, #24]


	CORRECTOR_pid(wheel, wheel_speed);
 8002af4:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <PILOTE_mouv+0x15c>)
 8002af6:	ed93 4b00 	vldr	d4, [r3]
 8002afa:	ed93 5b02 	vldr	d5, [r3, #8]
 8002afe:	ed93 6b04 	vldr	d6, [r3, #16]
 8002b02:	ed93 7b06 	vldr	d7, [r3, #24]
 8002b06:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <PILOTE_mouv+0x14c>)
 8002b08:	ed93 0b00 	vldr	d0, [r3]
 8002b0c:	ed93 1b02 	vldr	d1, [r3, #8]
 8002b10:	ed93 2b04 	vldr	d2, [r3, #16]
 8002b14:	ed93 3b06 	vldr	d3, [r3, #24]
 8002b18:	f7fd fd92 	bl	8000640 <CORRECTOR_pid>

	//	HAL_GPIO_TogglePin(OUT_LE3_GPIO_Port, OUT_LE3_Pin);
	time_tret = (HAL_GetTick() - time);
 8002b1c:	f001 f8f8 	bl	8003d10 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <PILOTE_mouv+0x148>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <PILOTE_mouv+0x160>)
 8002b2a:	6013      	str	r3, [r2, #0]
	//	DEBUG_update_cmd(0, time, time_tret);
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	1eb851ec 	.word	0x1eb851ec
 8002b34:	3fd1eb85 	.word	0x3fd1eb85
 8002b38:	769cf0e0 	.word	0x769cf0e0
 8002b3c:	3fd41b2f 	.word	0x3fd41b2f
 8002b40:	20000188 	.word	0x20000188
 8002b44:	20000930 	.word	0x20000930
 8002b48:	200009a0 	.word	0x200009a0
 8002b4c:	20000990 	.word	0x20000990
 8002b50:	200009b0 	.word	0x200009b0
 8002b54:	20000950 	.word	0x20000950
 8002b58:	2000018c 	.word	0x2000018c

08002b5c <SECRETARY_dispatcher>:
static uint16_t msg_len = 0;

static double test_x = -1.186789123;


void SECRETARY_dispatcher(uint8_t* data){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	bool_e cmd_read = FALSE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	733b      	strb	r3, [r7, #12]
	SECRETARY_protocol protocol_state = SOF;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]
	bool_e error_msg = FALSE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	73bb      	strb	r3, [r7, #14]
	bool_e msg_ok = FALSE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	737b      	strb	r3, [r7, #13]
	do{
		switch (protocol_state){
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	2b0f      	cmp	r3, #15
 8002b78:	d86e      	bhi.n	8002c58 <SECRETARY_dispatcher+0xfc>
 8002b7a:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <SECRETARY_dispatcher+0x24>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002bc1 	.word	0x08002bc1
 8002b84:	08002be5 	.word	0x08002be5
 8002b88:	08002c31 	.word	0x08002c31
 8002b8c:	08002c37 	.word	0x08002c37
 8002b90:	08002c5f 	.word	0x08002c5f
 8002b94:	08002c59 	.word	0x08002c59
 8002b98:	08002c59 	.word	0x08002c59
 8002b9c:	08002c59 	.word	0x08002c59
 8002ba0:	08002c59 	.word	0x08002c59
 8002ba4:	08002c59 	.word	0x08002c59
 8002ba8:	08002c59 	.word	0x08002c59
 8002bac:	08002c59 	.word	0x08002c59
 8002bb0:	08002c59 	.word	0x08002c59
 8002bb4:	08002c59 	.word	0x08002c59
 8002bb8:	08002c3d 	.word	0x08002c3d
 8002bbc:	08002c43 	.word	0x08002c43
		case SOF:
			if(data[SOF] != 0x5A){
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b5a      	cmp	r3, #90	; 0x5a
 8002bc6:	d006      	beq.n	8002bd6 <SECRETARY_dispatcher+0x7a>
				HAL_GPIO_TogglePin(OUT_LE4_GPIO_Port, OUT_LE4_Pin);
 8002bc8:	2108      	movs	r1, #8
 8002bca:	482d      	ldr	r0, [pc, #180]	; (8002c80 <SECRETARY_dispatcher+0x124>)
 8002bcc:	f001 ffb3 	bl	8004b36 <HAL_GPIO_TogglePin>
				error_msg = TRUE;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73bb      	strb	r3, [r7, #14]
			}else{
				HAL_GPIO_TogglePin(OUT_LE5_GPIO_Port, OUT_LE5_Pin);
				protocol_state = EndOfFrame;
			}
			break;
 8002bd4:	e044      	b.n	8002c60 <SECRETARY_dispatcher+0x104>
				HAL_GPIO_TogglePin(OUT_LE5_GPIO_Port, OUT_LE5_Pin);
 8002bd6:	2110      	movs	r1, #16
 8002bd8:	4829      	ldr	r0, [pc, #164]	; (8002c80 <SECRETARY_dispatcher+0x124>)
 8002bda:	f001 ffac 	bl	8004b36 <HAL_GPIO_TogglePin>
				protocol_state = EndOfFrame;
 8002bde:	230f      	movs	r3, #15
 8002be0:	73fb      	strb	r3, [r7, #15]
			break;
 8002be2:	e03d      	b.n	8002c60 <SECRETARY_dispatcher+0x104>
				SECRETARY_send_to_UltraBrain(ODOMETRY, data[CNT]);
				cmd_read = TRUE;
			}
			if(data[CMD] & (1 << MOUVEMENT)){*/
				//HAL_GPIO_TogglePin(OUT_LE6_GPIO_Port, OUT_LE6_Pin);
				PILOTE_recieve_cmd(((double)(int32_t)data[BYTE0]), ((double)(int32_t)data[BYTE1]), ((double)(int32_t)data[BYTE2]));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3305      	adds	r3, #5
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3306      	adds	r3, #6
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	ee06 3a90 	vmov	s13, r3
 8002bfc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3307      	adds	r3, #7
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	ee05 3a90 	vmov	s11, r3
 8002c0a:	eeb8 5be5 	vcvt.f64.s32	d5, s11
 8002c0e:	eeb0 2b45 	vmov.f64	d2, d5
 8002c12:	eeb0 1b46 	vmov.f64	d1, d6
 8002c16:	eeb0 0b47 	vmov.f64	d0, d7
 8002c1a:	f7ff fd9d 	bl	8002758 <PILOTE_recieve_cmd>
				SECRETARY_send_to_UltraBrain(ODOMETRY, 40);
 8002c1e:	2128      	movs	r1, #40	; 0x28
 8002c20:	2000      	movs	r0, #0
 8002c22:	f000 f831 	bl	8002c88 <SECRETARY_send_to_UltraBrain>
				msg_ok = TRUE;
 8002c26:	2301      	movs	r3, #1
 8002c28:	737b      	strb	r3, [r7, #13]
				cmd_read = TRUE;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	733b      	strb	r3, [r7, #12]
			if(!cmd_read){
				error_msg = FALSE;
			}else{
				msg_ok = TRUE;
			}*/
			break;
 8002c2e:	e017      	b.n	8002c60 <SECRETARY_dispatcher+0x104>
		case STATUS:
			protocol_state = CMD;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
			break;
 8002c34:	e014      	b.n	8002c60 <SECRETARY_dispatcher+0x104>
		case CNT:
			if(TRUE){//data[CNT] == holo_CNT){
				protocol_state = STATUS;
 8002c36:	2302      	movs	r3, #2
 8002c38:	73fb      	strb	r3, [r7, #15]
			}else{
				error_msg = TRUE;
			}
			break;
 8002c3a:	e011      	b.n	8002c60 <SECRETARY_dispatcher+0x104>
		case NBYTES:
			break;
		case CHK:
			protocol_state = CNT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	73fb      	strb	r3, [r7, #15]
			break;
 8002c40:	e00e      	b.n	8002c60 <SECRETARY_dispatcher+0x104>
		case EndOfFrame:
			if(data[EndOfFrame] != 0xA5){
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	330f      	adds	r3, #15
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2ba5      	cmp	r3, #165	; 0xa5
 8002c4a:	d002      	beq.n	8002c52 <SECRETARY_dispatcher+0xf6>
				error_msg = TRUE;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73bb      	strb	r3, [r7, #14]
			}else{
				protocol_state = CMD;//CHK;
			}
			break;
 8002c50:	e006      	b.n	8002c60 <SECRETARY_dispatcher+0x104>
				protocol_state = CMD;//CHK;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
			break;
 8002c56:	e003      	b.n	8002c60 <SECRETARY_dispatcher+0x104>
		default:
			error_msg = TRUE;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73bb      	strb	r3, [r7, #14]
			break;
 8002c5c:	e000      	b.n	8002c60 <SECRETARY_dispatcher+0x104>
			break;
 8002c5e:	bf00      	nop
		}
	}while ( !msg_ok && !error_msg);
 8002c60:	7b7b      	ldrb	r3, [r7, #13]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <SECRETARY_dispatcher+0x110>
 8002c66:	7bbb      	ldrb	r3, [r7, #14]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d083      	beq.n	8002b74 <SECRETARY_dispatcher+0x18>

	if(error_msg == TRUE){
 8002c6c:	7bbb      	ldrb	r3, [r7, #14]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <SECRETARY_dispatcher+0x11a>
		HAL_NVIC_SystemReset();
 8002c72:	f001 fd50 	bl	8004716 <HAL_NVIC_SystemReset>
	}
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40021800 	.word	0x40021800
 8002c84:	00000000 	.word	0x00000000

08002c88 <SECRETARY_send_to_UltraBrain>:


void SECRETARY_send_to_UltraBrain(SECRETARY_cmd_ultra cmd, uint8_t CouNT){
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b090      	sub	sp, #64	; 0x40
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	460a      	mov	r2, r1
 8002c92:	71fb      	strb	r3, [r7, #7]
 8002c94:	4613      	mov	r3, r2
 8002c96:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	msg_to_send[SOF]    	=   0x5A;
 8002c9e:	4b78      	ldr	r3, [pc, #480]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002ca0:	225a      	movs	r2, #90	; 0x5a
 8002ca2:	701a      	strb	r2, [r3, #0]
	msg_to_send[CMD]    	=   1<<cmd;
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	b25a      	sxtb	r2, r3
 8002cae:	4b74      	ldr	r3, [pc, #464]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002cb0:	705a      	strb	r2, [r3, #1]
	msg_to_send[STATUS] 	=	status;
 8002cb2:	f997 203f 	ldrsb.w	r2, [r7, #63]	; 0x3f
 8002cb6:	4b72      	ldr	r3, [pc, #456]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002cb8:	709a      	strb	r2, [r3, #2]
	msg_to_send[CNT]    	=	holo_CNT;
 8002cba:	4b72      	ldr	r3, [pc, #456]	; (8002e84 <SECRETARY_send_to_UltraBrain+0x1fc>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	b252      	sxtb	r2, r2
 8002cc2:	4b6f      	ldr	r3, [pc, #444]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002cc4:	70da      	strb	r2, [r3, #3]
	msg_to_send[NBYTES] 	=	0;
 8002cc6:	4b6e      	ldr	r3, [pc, #440]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	711a      	strb	r2, [r3, #4]
	msg_to_send[BYTE0]  	=	0;
 8002ccc:	4b6c      	ldr	r3, [pc, #432]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	715a      	strb	r2, [r3, #5]
	msg_to_send[BYTE1] 		=	0;
 8002cd2:	4b6b      	ldr	r3, [pc, #428]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	719a      	strb	r2, [r3, #6]
	msg_to_send[BYTE2] 		=	0;
 8002cd8:	4b69      	ldr	r3, [pc, #420]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	71da      	strb	r2, [r3, #7]
	msg_to_send[BYTE3]  	=	0;
 8002cde:	4b68      	ldr	r3, [pc, #416]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	721a      	strb	r2, [r3, #8]
	msg_to_send[BYTE4]  	=	0;
 8002ce4:	4b66      	ldr	r3, [pc, #408]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	725a      	strb	r2, [r3, #9]
	msg_to_send[BYTE5]  	=	0;
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	729a      	strb	r2, [r3, #10]
	msg_to_send[BYTE6]  	=	0;
 8002cf0:	4b63      	ldr	r3, [pc, #396]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	72da      	strb	r2, [r3, #11]
	msg_to_send[BYTE7]  	=	0;
 8002cf6:	4b62      	ldr	r3, [pc, #392]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	731a      	strb	r2, [r3, #12]
	msg_to_send[BYTE8]  	=	0;
 8002cfc:	4b60      	ldr	r3, [pc, #384]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	735a      	strb	r2, [r3, #13]
	msg_to_send[CHK]    	=	0;
 8002d02:	4b5f      	ldr	r3, [pc, #380]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	739a      	strb	r2, [r3, #14]
	msg_to_send[EndOfFrame] =	0xA5;
 8002d08:	4b5d      	ldr	r3, [pc, #372]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002d0a:	22a5      	movs	r2, #165	; 0xa5
 8002d0c:	73da      	strb	r2, [r3, #15]

	ODOMETRY_speed_robot speed_robot = ODOMETRY_get_speed_robot();
 8002d0e:	f107 0308 	add.w	r3, r7, #8
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fc1c 	bl	8002550 <ODOMETRY_get_speed_robot>
	switch(cmd){
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <SECRETARY_send_to_UltraBrain+0x9e>
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	f000 8092 	beq.w	8002e48 <SECRETARY_send_to_UltraBrain+0x1c0>
		break;}
	case RESTART:

		break;
	default:
		break;
 8002d24:	e091      	b.n	8002e4a <SECRETARY_send_to_UltraBrain+0x1c2>
		msg_to_send[BYTE0] = (int8_t)(speed_robot.speed_X*1000);//(((int16_t)(speed_robot.speed_X*32000)) >> 8);
 8002d26:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d2a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002e70 <SECRETARY_send_to_UltraBrain+0x1e8>
 8002d2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d32:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d36:	edc7 7a00 	vstr	s15, [r7]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	b25a      	sxtb	r2, r3
 8002d3e:	4b50      	ldr	r3, [pc, #320]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002d40:	715a      	strb	r2, [r3, #5]
		msg_to_send[BYTE1] = (int8_t)(speed_robot.speed_X*100);
 8002d42:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d46:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8002e78 <SECRETARY_send_to_UltraBrain+0x1f0>
 8002d4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d4e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d52:	edc7 7a00 	vstr	s15, [r7]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b25a      	sxtb	r2, r3
 8002d5a:	4b49      	ldr	r3, [pc, #292]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002d5c:	719a      	strb	r2, [r3, #6]
		msg_to_send[BYTE2] = (int8_t)(test_x*100);
 8002d5e:	4b4a      	ldr	r3, [pc, #296]	; (8002e88 <SECRETARY_send_to_UltraBrain+0x200>)
 8002d60:	ed93 7b00 	vldr	d7, [r3]
 8002d64:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002e78 <SECRETARY_send_to_UltraBrain+0x1f0>
 8002d68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d70:	edc7 7a00 	vstr	s15, [r7]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	b25a      	sxtb	r2, r3
 8002d78:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002d7a:	71da      	strb	r2, [r3, #7]
		msg_to_send[BYTE3] = (int8_t)(speed_robot.speed_Y*100);
 8002d7c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d80:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8002e78 <SECRETARY_send_to_UltraBrain+0x1f0>
 8002d84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d88:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d8c:	edc7 7a00 	vstr	s15, [r7]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	b25a      	sxtb	r2, r3
 8002d94:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002d96:	721a      	strb	r2, [r3, #8]
		msg_to_send[BYTE4] = (int8_t)(test_x*100);
 8002d98:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <SECRETARY_send_to_UltraBrain+0x200>)
 8002d9a:	ed93 7b00 	vldr	d7, [r3]
 8002d9e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8002e78 <SECRETARY_send_to_UltraBrain+0x1f0>
 8002da2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002da6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002daa:	edc7 7a00 	vstr	s15, [r7]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b25a      	sxtb	r2, r3
 8002db2:	4b33      	ldr	r3, [pc, #204]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002db4:	725a      	strb	r2, [r3, #9]
		msg_to_send[BYTE5] = (int8_t)(speed_robot.speed_teta*100);
 8002db6:	ed97 7b06 	vldr	d7, [r7, #24]
 8002dba:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8002e78 <SECRETARY_send_to_UltraBrain+0x1f0>
 8002dbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002dc2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002dc6:	edc7 7a00 	vstr	s15, [r7]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	b25a      	sxtb	r2, r3
 8002dce:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002dd0:	729a      	strb	r2, [r3, #10]
		msg_to_send[BYTE6] = (int8_t)(speed_robot.dist_X*100);
 8002dd2:	ed97 7b08 	vldr	d7, [r7, #32]
 8002dd6:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8002e78 <SECRETARY_send_to_UltraBrain+0x1f0>
 8002dda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002dde:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002de2:	edc7 7a00 	vstr	s15, [r7]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	b25a      	sxtb	r2, r3
 8002dea:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002dec:	72da      	strb	r2, [r3, #11]
		msg_to_send[BYTE7] = (int8_t)(speed_robot.dist_Y*100);
 8002dee:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002df2:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8002e78 <SECRETARY_send_to_UltraBrain+0x1f0>
 8002df6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002dfa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002dfe:	edc7 7a00 	vstr	s15, [r7]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b25a      	sxtb	r2, r3
 8002e06:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002e08:	731a      	strb	r2, [r3, #12]
		msg_to_send[BYTE8] = (int8_t)(-speed_robot.teta_Z);
 8002e0a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002e0e:	eeb1 7b47 	vneg.f64	d7, d7
 8002e12:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002e16:	edc7 7a00 	vstr	s15, [r7]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b25a      	sxtb	r2, r3
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <SECRETARY_send_to_UltraBrain+0x1f8>)
 8002e20:	735a      	strb	r2, [r3, #13]
		speed_robot.dist_X = 0;
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		speed_robot.dist_Y = 0;
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		speed_robot.teta_Z = 0;
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		break;}
 8002e46:	e000      	b.n	8002e4a <SECRETARY_send_to_UltraBrain+0x1c2>
		break;
 8002e48:	bf00      	nop
	}

	//DEBUG_update_odometry(msg_to_send[BYTE0],msg_to_send[BYTE1],msg_to_send[BYTE2],msg_to_send[BYTE3],msg_to_send[BYTE4],msg_to_send[BYTE5],speed_robot.speed_X, speed_robot.speed_Y, speed_robot.speed_teta,0);


	is_msg_to_send = TRUE;
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <SECRETARY_send_to_UltraBrain+0x204>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
	if(msg_len < 16){
		message_not_long = TRUE;
	}
	HAL_UART_Transmit(&huart3, (uint8_t*)msg_to_send, MSG_LENGHT, HAL_MAX_DELAY);*/
	//SECRETARY_process_main();
	holo_CNT++;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <SECRETARY_send_to_UltraBrain+0x1fc>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	1c54      	adds	r4, r2, #1
 8002e58:	f143 0500 	adc.w	r5, r3, #0
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <SECRETARY_send_to_UltraBrain+0x1fc>)
 8002e5e:	e9c3 4500 	strd	r4, r5, [r3]


}
 8002e62:	bf00      	nop
 8002e64:	3740      	adds	r7, #64	; 0x40
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bdb0      	pop	{r4, r5, r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	f3af 8000 	nop.w
 8002e70:	00000000 	.word	0x00000000
 8002e74:	408f4000 	.word	0x408f4000
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	40590000 	.word	0x40590000
 8002e80:	2000019c 	.word	0x2000019c
 8002e84:	20000190 	.word	0x20000190
 8002e88:	20000018 	.word	0x20000018
 8002e8c:	20000198 	.word	0x20000198

08002e90 <SECRETARY_process_main>:


void SECRETARY_process_main(){
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
	if(is_msg_to_send){
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <SECRETARY_process_main+0x38>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <SECRETARY_process_main+0x34>
		is_msg_to_send = FALSE;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <SECRETARY_process_main+0x38>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
		msg_len = sizeof(msg_to_send);
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <SECRETARY_process_main+0x3c>)
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	801a      	strh	r2, [r3, #0]
		if(msg_len < 16){
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <SECRETARY_process_main+0x3c>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	2b0f      	cmp	r3, #15
 8002eae:	d802      	bhi.n	8002eb6 <SECRETARY_process_main+0x26>
			message_not_long = TRUE;
 8002eb0:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <SECRETARY_process_main+0x40>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Transmit(&huart3, (uint8_t*)msg_to_send, MSG_LENGHT, HAL_MAX_DELAY);
 8002eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eba:	2210      	movs	r2, #16
 8002ebc:	4905      	ldr	r1, [pc, #20]	; (8002ed4 <SECRETARY_process_main+0x44>)
 8002ebe:	4806      	ldr	r0, [pc, #24]	; (8002ed8 <SECRETARY_process_main+0x48>)
 8002ec0:	f004 fb9e 	bl	8007600 <HAL_UART_Transmit>

	}
}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000198 	.word	0x20000198
 8002ecc:	200001ae 	.word	0x200001ae
 8002ed0:	200001ac 	.word	0x200001ac
 8002ed4:	2000019c 	.word	0x2000019c
 8002ed8:	200002e4 	.word	0x200002e4

08002edc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_MspInit+0x44>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	4a0e      	ldr	r2, [pc, #56]	; (8002f20 <HAL_MspInit+0x44>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eec:	6413      	str	r3, [r2, #64]	; 0x40
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <HAL_MspInit+0x44>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_MspInit+0x44>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	4a08      	ldr	r2, [pc, #32]	; (8002f20 <HAL_MspInit+0x44>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f04:	6453      	str	r3, [r2, #68]	; 0x44
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_MspInit+0x44>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800

08002f24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08c      	sub	sp, #48	; 0x30
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 031c 	add.w	r3, r7, #28
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a32      	ldr	r2, [pc, #200]	; (800300c <HAL_ADC_MspInit+0xe8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d12c      	bne.n	8002fa0 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f46:	4b32      	ldr	r3, [pc, #200]	; (8003010 <HAL_ADC_MspInit+0xec>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	4a31      	ldr	r2, [pc, #196]	; (8003010 <HAL_ADC_MspInit+0xec>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f50:	6453      	str	r3, [r2, #68]	; 0x44
 8002f52:	4b2f      	ldr	r3, [pc, #188]	; (8003010 <HAL_ADC_MspInit+0xec>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5e:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <HAL_ADC_MspInit+0xec>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a2b      	ldr	r2, [pc, #172]	; (8003010 <HAL_ADC_MspInit+0xec>)
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b29      	ldr	r3, [pc, #164]	; (8003010 <HAL_ADC_MspInit+0xec>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ADC_VBATT_Pin;
 8002f76:	2320      	movs	r3, #32
 8002f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_VBATT_GPIO_Port, &GPIO_InitStruct);
 8002f82:	f107 031c 	add.w	r3, r7, #28
 8002f86:	4619      	mov	r1, r3
 8002f88:	4822      	ldr	r0, [pc, #136]	; (8003014 <HAL_ADC_MspInit+0xf0>)
 8002f8a:	f001 fbf7 	bl	800477c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 4, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2104      	movs	r1, #4
 8002f92:	2012      	movs	r0, #18
 8002f94:	f001 fb95 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002f98:	2012      	movs	r0, #18
 8002f9a:	f001 fbae 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002f9e:	e030      	b.n	8003002 <HAL_ADC_MspInit+0xde>
  else if(hadc->Instance==ADC3)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <HAL_ADC_MspInit+0xf4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d12b      	bne.n	8003002 <HAL_ADC_MspInit+0xde>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002faa:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_ADC_MspInit+0xec>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	4a18      	ldr	r2, [pc, #96]	; (8003010 <HAL_ADC_MspInit+0xec>)
 8002fb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb6:	4b16      	ldr	r3, [pc, #88]	; (8003010 <HAL_ADC_MspInit+0xec>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_ADC_MspInit+0xec>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <HAL_ADC_MspInit+0xec>)
 8002fc8:	f043 0304 	orr.w	r3, r3, #4
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <HAL_ADC_MspInit+0xec>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FB_DM_1_Pin|FB_DM_2_Pin|FB_DM_3_Pin|FB_DM_4_Pin;
 8002fda:	230f      	movs	r3, #15
 8002fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe6:	f107 031c 	add.w	r3, r7, #28
 8002fea:	4619      	mov	r1, r3
 8002fec:	4809      	ldr	r0, [pc, #36]	; (8003014 <HAL_ADC_MspInit+0xf0>)
 8002fee:	f001 fbc5 	bl	800477c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 4, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	2012      	movs	r0, #18
 8002ff8:	f001 fb63 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002ffc:	2012      	movs	r0, #18
 8002ffe:	f001 fb7c 	bl	80046fa <HAL_NVIC_EnableIRQ>
}
 8003002:	bf00      	nop
 8003004:	3730      	adds	r7, #48	; 0x30
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40012000 	.word	0x40012000
 8003010:	40023800 	.word	0x40023800
 8003014:	40020800 	.word	0x40020800
 8003018:	40012200 	.word	0x40012200

0800301c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	; 0x28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C4)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a17      	ldr	r2, [pc, #92]	; (8003098 <HAL_I2C_MspInit+0x7c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d128      	bne.n	8003090 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800303e:	4b17      	ldr	r3, [pc, #92]	; (800309c <HAL_I2C_MspInit+0x80>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a16      	ldr	r2, [pc, #88]	; (800309c <HAL_I2C_MspInit+0x80>)
 8003044:	f043 0320 	orr.w	r3, r3, #32
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b14      	ldr	r3, [pc, #80]	; (800309c <HAL_I2C_MspInit+0x80>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = ACC_SCL_Pin|ACC_SDA_Pin;
 8003056:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800305a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800305c:	2312      	movs	r3, #18
 800305e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003060:	2301      	movs	r3, #1
 8003062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003064:	2303      	movs	r3, #3
 8003066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003068:	2304      	movs	r3, #4
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4619      	mov	r1, r3
 8003072:	480b      	ldr	r0, [pc, #44]	; (80030a0 <HAL_I2C_MspInit+0x84>)
 8003074:	f001 fb82 	bl	800477c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <HAL_I2C_MspInit+0x80>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	4a07      	ldr	r2, [pc, #28]	; (800309c <HAL_I2C_MspInit+0x80>)
 800307e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003082:	6413      	str	r3, [r2, #64]	; 0x40
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_I2C_MspInit+0x80>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8003090:	bf00      	nop
 8003092:	3728      	adds	r7, #40	; 0x28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40006000 	.word	0x40006000
 800309c:	40023800 	.word	0x40023800
 80030a0:	40021400 	.word	0x40021400

080030a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b094      	sub	sp, #80	; 0x50
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a91      	ldr	r2, [pc, #580]	; (8003308 <HAL_SPI_MspInit+0x264>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d14d      	bne.n	8003162 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030c6:	4b91      	ldr	r3, [pc, #580]	; (800330c <HAL_SPI_MspInit+0x268>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	4a90      	ldr	r2, [pc, #576]	; (800330c <HAL_SPI_MspInit+0x268>)
 80030cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030d0:	6453      	str	r3, [r2, #68]	; 0x44
 80030d2:	4b8e      	ldr	r3, [pc, #568]	; (800330c <HAL_SPI_MspInit+0x268>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030da:	63bb      	str	r3, [r7, #56]	; 0x38
 80030dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030de:	4b8b      	ldr	r3, [pc, #556]	; (800330c <HAL_SPI_MspInit+0x268>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a8a      	ldr	r2, [pc, #552]	; (800330c <HAL_SPI_MspInit+0x268>)
 80030e4:	f043 0308 	orr.w	r3, r3, #8
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b88      	ldr	r3, [pc, #544]	; (800330c <HAL_SPI_MspInit+0x268>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030f6:	4b85      	ldr	r3, [pc, #532]	; (800330c <HAL_SPI_MspInit+0x268>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a84      	ldr	r2, [pc, #528]	; (800330c <HAL_SPI_MspInit+0x268>)
 80030fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003100:	6313      	str	r3, [r2, #48]	; 0x30
 8003102:	4b82      	ldr	r3, [pc, #520]	; (800330c <HAL_SPI_MspInit+0x268>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI_1_MOSI_Pin;
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003112:	2302      	movs	r3, #2
 8003114:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311a:	2303      	movs	r3, #3
 800311c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800311e:	2305      	movs	r3, #5
 8003120:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(SPI_1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8003122:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003126:	4619      	mov	r1, r3
 8003128:	4879      	ldr	r0, [pc, #484]	; (8003310 <HAL_SPI_MspInit+0x26c>)
 800312a:	f001 fb27 	bl	800477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_1_MISO_Pin|SPI_1_NCS_Pin|SPI_1_CLK_Pin;
 800312e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003134:	2302      	movs	r3, #2
 8003136:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313c:	2303      	movs	r3, #3
 800313e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003140:	2305      	movs	r3, #5
 8003142:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003144:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003148:	4619      	mov	r1, r3
 800314a:	4872      	ldr	r0, [pc, #456]	; (8003314 <HAL_SPI_MspInit+0x270>)
 800314c:	f001 fb16 	bl	800477c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 7, 0);
 8003150:	2200      	movs	r2, #0
 8003152:	2107      	movs	r1, #7
 8003154:	2023      	movs	r0, #35	; 0x23
 8003156:	f001 fab4 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800315a:	2023      	movs	r0, #35	; 0x23
 800315c:	f001 facd 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8003160:	e11e      	b.n	80033a0 <HAL_SPI_MspInit+0x2fc>
  else if(hspi->Instance==SPI2)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a6c      	ldr	r2, [pc, #432]	; (8003318 <HAL_SPI_MspInit+0x274>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d142      	bne.n	80031f2 <HAL_SPI_MspInit+0x14e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800316c:	4b67      	ldr	r3, [pc, #412]	; (800330c <HAL_SPI_MspInit+0x268>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	4a66      	ldr	r2, [pc, #408]	; (800330c <HAL_SPI_MspInit+0x268>)
 8003172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003176:	6413      	str	r3, [r2, #64]	; 0x40
 8003178:	4b64      	ldr	r3, [pc, #400]	; (800330c <HAL_SPI_MspInit+0x268>)
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003184:	4b61      	ldr	r3, [pc, #388]	; (800330c <HAL_SPI_MspInit+0x268>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	4a60      	ldr	r2, [pc, #384]	; (800330c <HAL_SPI_MspInit+0x268>)
 800318a:	f043 0302 	orr.w	r3, r3, #2
 800318e:	6313      	str	r3, [r2, #48]	; 0x30
 8003190:	4b5e      	ldr	r3, [pc, #376]	; (800330c <HAL_SPI_MspInit+0x268>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = SPI_2_NCS_Pin;
 800319c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031aa:	2303      	movs	r3, #3
 80031ac:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031ae:	2305      	movs	r3, #5
 80031b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(SPI_2_NCS_GPIO_Port, &GPIO_InitStruct);
 80031b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031b6:	4619      	mov	r1, r3
 80031b8:	4858      	ldr	r0, [pc, #352]	; (800331c <HAL_SPI_MspInit+0x278>)
 80031ba:	f001 fadf 	bl	800477c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_2_CLK_Pin|SPI_2_MISO_Pin|SPI_2_MOSI_Pin;
 80031be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80031c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c8:	2301      	movs	r3, #1
 80031ca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031cc:	2303      	movs	r3, #3
 80031ce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031d0:	2305      	movs	r3, #5
 80031d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031d8:	4619      	mov	r1, r3
 80031da:	4850      	ldr	r0, [pc, #320]	; (800331c <HAL_SPI_MspInit+0x278>)
 80031dc:	f001 face 	bl	800477c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 7, 0);
 80031e0:	2200      	movs	r2, #0
 80031e2:	2107      	movs	r1, #7
 80031e4:	2024      	movs	r0, #36	; 0x24
 80031e6:	f001 fa6c 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80031ea:	2024      	movs	r0, #36	; 0x24
 80031ec:	f001 fa85 	bl	80046fa <HAL_NVIC_EnableIRQ>
}
 80031f0:	e0d6      	b.n	80033a0 <HAL_SPI_MspInit+0x2fc>
  else if(hspi->Instance==SPI3)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a4a      	ldr	r2, [pc, #296]	; (8003320 <HAL_SPI_MspInit+0x27c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d14e      	bne.n	800329a <HAL_SPI_MspInit+0x1f6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031fc:	4b43      	ldr	r3, [pc, #268]	; (800330c <HAL_SPI_MspInit+0x268>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	4a42      	ldr	r2, [pc, #264]	; (800330c <HAL_SPI_MspInit+0x268>)
 8003202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003206:	6413      	str	r3, [r2, #64]	; 0x40
 8003208:	4b40      	ldr	r3, [pc, #256]	; (800330c <HAL_SPI_MspInit+0x268>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003214:	4b3d      	ldr	r3, [pc, #244]	; (800330c <HAL_SPI_MspInit+0x268>)
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	4a3c      	ldr	r2, [pc, #240]	; (800330c <HAL_SPI_MspInit+0x268>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6313      	str	r3, [r2, #48]	; 0x30
 8003220:	4b3a      	ldr	r3, [pc, #232]	; (800330c <HAL_SPI_MspInit+0x268>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	623b      	str	r3, [r7, #32]
 800322a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800322c:	4b37      	ldr	r3, [pc, #220]	; (800330c <HAL_SPI_MspInit+0x268>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	4a36      	ldr	r2, [pc, #216]	; (800330c <HAL_SPI_MspInit+0x268>)
 8003232:	f043 0304 	orr.w	r3, r3, #4
 8003236:	6313      	str	r3, [r2, #48]	; 0x30
 8003238:	4b34      	ldr	r3, [pc, #208]	; (800330c <HAL_SPI_MspInit+0x268>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = SPI_3_NCS_Pin;
 8003244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003248:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003252:	2303      	movs	r3, #3
 8003254:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003256:	2306      	movs	r3, #6
 8003258:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(SPI_3_NCS_GPIO_Port, &GPIO_InitStruct);
 800325a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800325e:	4619      	mov	r1, r3
 8003260:	4830      	ldr	r0, [pc, #192]	; (8003324 <HAL_SPI_MspInit+0x280>)
 8003262:	f001 fa8b 	bl	800477c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_3_CLK_Pin|SPI_3_MISO_Pin|SPI_3_MOSI_Pin;
 8003266:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326c:	2302      	movs	r3, #2
 800326e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003274:	2303      	movs	r3, #3
 8003276:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003278:	2306      	movs	r3, #6
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800327c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003280:	4619      	mov	r1, r3
 8003282:	4829      	ldr	r0, [pc, #164]	; (8003328 <HAL_SPI_MspInit+0x284>)
 8003284:	f001 fa7a 	bl	800477c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 7, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2107      	movs	r1, #7
 800328c:	2033      	movs	r0, #51	; 0x33
 800328e:	f001 fa18 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003292:	2033      	movs	r0, #51	; 0x33
 8003294:	f001 fa31 	bl	80046fa <HAL_NVIC_EnableIRQ>
}
 8003298:	e082      	b.n	80033a0 <HAL_SPI_MspInit+0x2fc>
  else if(hspi->Instance==SPI4)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a23      	ldr	r2, [pc, #140]	; (800332c <HAL_SPI_MspInit+0x288>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d147      	bne.n	8003334 <HAL_SPI_MspInit+0x290>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_SPI_MspInit+0x268>)
 80032a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a8:	4a18      	ldr	r2, [pc, #96]	; (800330c <HAL_SPI_MspInit+0x268>)
 80032aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032ae:	6453      	str	r3, [r2, #68]	; 0x44
 80032b0:	4b16      	ldr	r3, [pc, #88]	; (800330c <HAL_SPI_MspInit+0x268>)
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032bc:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_SPI_MspInit+0x268>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	4a12      	ldr	r2, [pc, #72]	; (800330c <HAL_SPI_MspInit+0x268>)
 80032c2:	f043 0310 	orr.w	r3, r3, #16
 80032c6:	6313      	str	r3, [r2, #48]	; 0x30
 80032c8:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_SPI_MspInit+0x268>)
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI_4_CLK_Pin|SPI_4_NCS_Pin|SPI_4_MISO_Pin|SPI_4_MOSI_Pin;
 80032d4:	2374      	movs	r3, #116	; 0x74
 80032d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d8:	2302      	movs	r3, #2
 80032da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e0:	2303      	movs	r3, #3
 80032e2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80032e4:	2305      	movs	r3, #5
 80032e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032ec:	4619      	mov	r1, r3
 80032ee:	4810      	ldr	r0, [pc, #64]	; (8003330 <HAL_SPI_MspInit+0x28c>)
 80032f0:	f001 fa44 	bl	800477c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 7, 0);
 80032f4:	2200      	movs	r2, #0
 80032f6:	2107      	movs	r1, #7
 80032f8:	2054      	movs	r0, #84	; 0x54
 80032fa:	f001 f9e2 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80032fe:	2054      	movs	r0, #84	; 0x54
 8003300:	f001 f9fb 	bl	80046fa <HAL_NVIC_EnableIRQ>
}
 8003304:	e04c      	b.n	80033a0 <HAL_SPI_MspInit+0x2fc>
 8003306:	bf00      	nop
 8003308:	40013000 	.word	0x40013000
 800330c:	40023800 	.word	0x40023800
 8003310:	40020c00 	.word	0x40020c00
 8003314:	40021800 	.word	0x40021800
 8003318:	40003800 	.word	0x40003800
 800331c:	40020400 	.word	0x40020400
 8003320:	40003c00 	.word	0x40003c00
 8003324:	40020000 	.word	0x40020000
 8003328:	40020800 	.word	0x40020800
 800332c:	40013400 	.word	0x40013400
 8003330:	40021000 	.word	0x40021000
  else if(hspi->Instance==SPI6)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <HAL_SPI_MspInit+0x304>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d130      	bne.n	80033a0 <HAL_SPI_MspInit+0x2fc>
    __HAL_RCC_SPI6_CLK_ENABLE();
 800333e:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_SPI_MspInit+0x308>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <HAL_SPI_MspInit+0x308>)
 8003344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003348:	6453      	str	r3, [r2, #68]	; 0x44
 800334a:	4b18      	ldr	r3, [pc, #96]	; (80033ac <HAL_SPI_MspInit+0x308>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <HAL_SPI_MspInit+0x308>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a14      	ldr	r2, [pc, #80]	; (80033ac <HAL_SPI_MspInit+0x308>)
 800335c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <HAL_SPI_MspInit+0x308>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI_6_NCS_Pin|SPI_6_MISO_Pin|SPI_6_CLK_Pin|SPI_6_MOSI_Pin;
 800336e:	f44f 43e2 	mov.w	r3, #28928	; 0x7100
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003374:	2302      	movs	r3, #2
 8003376:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	2300      	movs	r3, #0
 800337a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337c:	2303      	movs	r3, #3
 800337e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8003380:	2305      	movs	r3, #5
 8003382:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003384:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003388:	4619      	mov	r1, r3
 800338a:	4809      	ldr	r0, [pc, #36]	; (80033b0 <HAL_SPI_MspInit+0x30c>)
 800338c:	f001 f9f6 	bl	800477c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
 8003390:	2200      	movs	r2, #0
 8003392:	2107      	movs	r1, #7
 8003394:	2056      	movs	r0, #86	; 0x56
 8003396:	f001 f994 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 800339a:	2056      	movs	r0, #86	; 0x56
 800339c:	f001 f9ad 	bl	80046fa <HAL_NVIC_EnableIRQ>
}
 80033a0:	bf00      	nop
 80033a2:	3750      	adds	r7, #80	; 0x50
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40015400 	.word	0x40015400
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40021800 	.word	0x40021800

080033b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b090      	sub	sp, #64	; 0x40
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d4:	d144      	bne.n	8003460 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033d6:	4b69      	ldr	r3, [pc, #420]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a68      	ldr	r2, [pc, #416]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
 80033e2:	4b66      	ldr	r3, [pc, #408]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ee:	4b63      	ldr	r3, [pc, #396]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a62      	ldr	r2, [pc, #392]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b60      	ldr	r3, [pc, #384]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003406:	4b5d      	ldr	r3, [pc, #372]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	4a5c      	ldr	r2, [pc, #368]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	6313      	str	r3, [r2, #48]	; 0x30
 8003412:	4b5a      	ldr	r3, [pc, #360]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	623b      	str	r3, [r7, #32]
 800341c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A_ENC_3_Pin;
 800341e:	2320      	movs	r3, #32
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003422:	2302      	movs	r3, #2
 8003424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342a:	2300      	movs	r3, #0
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800342e:	2301      	movs	r3, #1
 8003430:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(A_ENC_3_GPIO_Port, &GPIO_InitStruct);
 8003432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003436:	4619      	mov	r1, r3
 8003438:	4851      	ldr	r0, [pc, #324]	; (8003580 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800343a:	f001 f99f 	bl	800477c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B_ENC_3_Pin;
 800343e:	2308      	movs	r3, #8
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003442:	2302      	movs	r3, #2
 8003444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	2300      	movs	r3, #0
 800344c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800344e:	2301      	movs	r3, #1
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(B_ENC_3_GPIO_Port, &GPIO_InitStruct);
 8003452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003456:	4619      	mov	r1, r3
 8003458:	484a      	ldr	r0, [pc, #296]	; (8003584 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800345a:	f001 f98f 	bl	800477c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800345e:	e088      	b.n	8003572 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM3)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a48      	ldr	r2, [pc, #288]	; (8003588 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d128      	bne.n	80034bc <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800346a:	4b44      	ldr	r3, [pc, #272]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	4a43      	ldr	r2, [pc, #268]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003470:	f043 0302 	orr.w	r3, r3, #2
 8003474:	6413      	str	r3, [r2, #64]	; 0x40
 8003476:	4b41      	ldr	r3, [pc, #260]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003482:	4b3e      	ldr	r3, [pc, #248]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4a3d      	ldr	r2, [pc, #244]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003488:	f043 0304 	orr.w	r3, r3, #4
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = A_ENC_2_Pin|B_ENC_2_Pin;
 800349a:	23c0      	movs	r3, #192	; 0xc0
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349e:	2302      	movs	r3, #2
 80034a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a6:	2300      	movs	r3, #0
 80034a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034aa:	2302      	movs	r3, #2
 80034ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034b2:	4619      	mov	r1, r3
 80034b4:	4835      	ldr	r0, [pc, #212]	; (800358c <HAL_TIM_Encoder_MspInit+0x1d8>)
 80034b6:	f001 f961 	bl	800477c <HAL_GPIO_Init>
}
 80034ba:	e05a      	b.n	8003572 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM4)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a33      	ldr	r2, [pc, #204]	; (8003590 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d128      	bne.n	8003518 <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034c6:	4b2d      	ldr	r3, [pc, #180]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	4a2c      	ldr	r2, [pc, #176]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	6413      	str	r3, [r2, #64]	; 0x40
 80034d2:	4b2a      	ldr	r3, [pc, #168]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034de:	4b27      	ldr	r3, [pc, #156]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	4a26      	ldr	r2, [pc, #152]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80034e4:	f043 0302 	orr.w	r3, r3, #2
 80034e8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = A_ENC_1_Pin|B_ENC_1_Pin;
 80034f6:	23c0      	movs	r3, #192	; 0xc0
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fa:	2302      	movs	r3, #2
 80034fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	2300      	movs	r3, #0
 8003504:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003506:	2302      	movs	r3, #2
 8003508:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800350e:	4619      	mov	r1, r3
 8003510:	481c      	ldr	r0, [pc, #112]	; (8003584 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003512:	f001 f933 	bl	800477c <HAL_GPIO_Init>
}
 8003516:	e02c      	b.n	8003572 <HAL_TIM_Encoder_MspInit+0x1be>
  else if(htim_encoder->Instance==TIM5)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <HAL_TIM_Encoder_MspInit+0x1e0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d127      	bne.n	8003572 <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003522:	4b16      	ldr	r3, [pc, #88]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	4a15      	ldr	r2, [pc, #84]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	6413      	str	r3, [r2, #64]	; 0x40
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4a0f      	ldr	r2, [pc, #60]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4b0d      	ldr	r3, [pc, #52]	; (800357c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A_ENC_4_Pin|B_ENC_4_Pin;
 8003552:	2303      	movs	r3, #3
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003556:	2302      	movs	r3, #2
 8003558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	2300      	movs	r3, #0
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355e:	2300      	movs	r3, #0
 8003560:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003562:	2302      	movs	r3, #2
 8003564:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800356a:	4619      	mov	r1, r3
 800356c:	4804      	ldr	r0, [pc, #16]	; (8003580 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800356e:	f001 f905 	bl	800477c <HAL_GPIO_Init>
}
 8003572:	bf00      	nop
 8003574:	3740      	adds	r7, #64	; 0x40
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	40020000 	.word	0x40020000
 8003584:	40020400 	.word	0x40020400
 8003588:	40000400 	.word	0x40000400
 800358c:	40020800 	.word	0x40020800
 8003590:	40000800 	.word	0x40000800
 8003594:	40000c00 	.word	0x40000c00

08003598 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a50      	ldr	r2, [pc, #320]	; (80036e8 <HAL_TIM_Base_MspInit+0x150>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d114      	bne.n	80035d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80035aa:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	4a4f      	ldr	r2, [pc, #316]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 80035b0:	f043 0310 	orr.w	r3, r3, #16
 80035b4:	6413      	str	r3, [r2, #64]	; 0x40
 80035b6:	4b4d      	ldr	r3, [pc, #308]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2101      	movs	r1, #1
 80035c6:	2036      	movs	r0, #54	; 0x36
 80035c8:	f001 f87b 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80035cc:	2036      	movs	r0, #54	; 0x36
 80035ce:	f001 f894 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80035d2:	e084      	b.n	80036de <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM7)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a45      	ldr	r2, [pc, #276]	; (80036f0 <HAL_TIM_Base_MspInit+0x158>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d114      	bne.n	8003608 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80035de:	4b43      	ldr	r3, [pc, #268]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	4a42      	ldr	r2, [pc, #264]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 80035e4:	f043 0320 	orr.w	r3, r3, #32
 80035e8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ea:	4b40      	ldr	r3, [pc, #256]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	623b      	str	r3, [r7, #32]
 80035f4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80035f6:	2200      	movs	r2, #0
 80035f8:	2101      	movs	r1, #1
 80035fa:	2037      	movs	r0, #55	; 0x37
 80035fc:	f001 f861 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003600:	2037      	movs	r0, #55	; 0x37
 8003602:	f001 f87a 	bl	80046fa <HAL_NVIC_EnableIRQ>
}
 8003606:	e06a      	b.n	80036de <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM8)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a39      	ldr	r2, [pc, #228]	; (80036f4 <HAL_TIM_Base_MspInit+0x15c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d10c      	bne.n	800362c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003612:	4b36      	ldr	r3, [pc, #216]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	4a35      	ldr	r2, [pc, #212]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	6453      	str	r3, [r2, #68]	; 0x44
 800361e:	4b33      	ldr	r3, [pc, #204]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	69fb      	ldr	r3, [r7, #28]
}
 800362a:	e058      	b.n	80036de <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM9)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a31      	ldr	r2, [pc, #196]	; (80036f8 <HAL_TIM_Base_MspInit+0x160>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d10c      	bne.n	8003650 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003636:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	4a2c      	ldr	r2, [pc, #176]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003640:	6453      	str	r3, [r2, #68]	; 0x44
 8003642:	4b2a      	ldr	r3, [pc, #168]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	69bb      	ldr	r3, [r7, #24]
}
 800364e:	e046      	b.n	80036de <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM10)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a29      	ldr	r2, [pc, #164]	; (80036fc <HAL_TIM_Base_MspInit+0x164>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d10c      	bne.n	8003674 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800365a:	4b24      	ldr	r3, [pc, #144]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	4a23      	ldr	r2, [pc, #140]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 8003660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003664:	6453      	str	r3, [r2, #68]	; 0x44
 8003666:	4b21      	ldr	r3, [pc, #132]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	697b      	ldr	r3, [r7, #20]
}
 8003672:	e034      	b.n	80036de <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM11)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a21      	ldr	r2, [pc, #132]	; (8003700 <HAL_TIM_Base_MspInit+0x168>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d10c      	bne.n	8003698 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800367e:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	4a1a      	ldr	r2, [pc, #104]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 8003684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003688:	6453      	str	r3, [r2, #68]	; 0x44
 800368a:	4b18      	ldr	r3, [pc, #96]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
}
 8003696:	e022      	b.n	80036de <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM13)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a19      	ldr	r2, [pc, #100]	; (8003704 <HAL_TIM_Base_MspInit+0x16c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10c      	bne.n	80036bc <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a11      	ldr	r2, [pc, #68]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 80036a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
}
 80036ba:	e010      	b.n	80036de <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM14)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a11      	ldr	r2, [pc, #68]	; (8003708 <HAL_TIM_Base_MspInit+0x170>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10b      	bne.n	80036de <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a08      	ldr	r2, [pc, #32]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_TIM_Base_MspInit+0x154>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
}
 80036de:	bf00      	nop
 80036e0:	3728      	adds	r7, #40	; 0x28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40001000 	.word	0x40001000
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40001400 	.word	0x40001400
 80036f4:	40010400 	.word	0x40010400
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40014400 	.word	0x40014400
 8003700:	40014800 	.word	0x40014800
 8003704:	40001c00 	.word	0x40001c00
 8003708:	40002000 	.word	0x40002000

0800370c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08e      	sub	sp, #56	; 0x38
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a67      	ldr	r2, [pc, #412]	; (80038c8 <HAL_TIM_MspPostInit+0x1bc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d11d      	bne.n	800376a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800372e:	4b67      	ldr	r3, [pc, #412]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	4a66      	ldr	r2, [pc, #408]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 8003734:	f043 0304 	orr.w	r3, r3, #4
 8003738:	6313      	str	r3, [r2, #48]	; 0x30
 800373a:	4b64      	ldr	r3, [pc, #400]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	623b      	str	r3, [r7, #32]
 8003744:	6a3b      	ldr	r3, [r7, #32]
    /**TIM8 GPIO Configuration
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = IN1_DM_4_Pin|IN2_DM_4_Pin;
 8003746:	f44f 7340 	mov.w	r3, #768	; 0x300
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374c:	2302      	movs	r3, #2
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	2300      	movs	r3, #0
 8003752:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003754:	2300      	movs	r3, #0
 8003756:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003758:	2303      	movs	r3, #3
 800375a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800375c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003760:	4619      	mov	r1, r3
 8003762:	485b      	ldr	r0, [pc, #364]	; (80038d0 <HAL_TIM_MspPostInit+0x1c4>)
 8003764:	f001 f80a 	bl	800477c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003768:	e0aa      	b.n	80038c0 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM9)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a59      	ldr	r2, [pc, #356]	; (80038d4 <HAL_TIM_MspPostInit+0x1c8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d11c      	bne.n	80037ae <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003774:	4b55      	ldr	r3, [pc, #340]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	4a54      	ldr	r2, [pc, #336]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6313      	str	r3, [r2, #48]	; 0x30
 8003780:	4b52      	ldr	r3, [pc, #328]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = IN1_DM_2_Pin|IN2_DM_2_Pin;
 800378c:	230c      	movs	r3, #12
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003798:	2300      	movs	r3, #0
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800379c:	2303      	movs	r3, #3
 800379e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a4:	4619      	mov	r1, r3
 80037a6:	484c      	ldr	r0, [pc, #304]	; (80038d8 <HAL_TIM_MspPostInit+0x1cc>)
 80037a8:	f000 ffe8 	bl	800477c <HAL_GPIO_Init>
}
 80037ac:	e088      	b.n	80038c0 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM10)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <HAL_TIM_MspPostInit+0x1d0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d11d      	bne.n	80037f4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b8:	4b44      	ldr	r3, [pc, #272]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	4a43      	ldr	r2, [pc, #268]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 80037be:	f043 0302 	orr.w	r3, r3, #2
 80037c2:	6313      	str	r3, [r2, #48]	; 0x30
 80037c4:	4b41      	ldr	r3, [pc, #260]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IN1_DM_1_Pin;
 80037d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d6:	2302      	movs	r3, #2
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037de:	2300      	movs	r3, #0
 80037e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80037e2:	2303      	movs	r3, #3
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(IN1_DM_1_GPIO_Port, &GPIO_InitStruct);
 80037e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ea:	4619      	mov	r1, r3
 80037ec:	483c      	ldr	r0, [pc, #240]	; (80038e0 <HAL_TIM_MspPostInit+0x1d4>)
 80037ee:	f000 ffc5 	bl	800477c <HAL_GPIO_Init>
}
 80037f2:	e065      	b.n	80038c0 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM11)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a3a      	ldr	r2, [pc, #232]	; (80038e4 <HAL_TIM_MspPostInit+0x1d8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d11d      	bne.n	800383a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fe:	4b33      	ldr	r3, [pc, #204]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4a32      	ldr	r2, [pc, #200]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
 800380a:	4b30      	ldr	r3, [pc, #192]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IN2_DM_1_Pin;
 8003816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381c:	2302      	movs	r3, #2
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003820:	2300      	movs	r3, #0
 8003822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003824:	2300      	movs	r3, #0
 8003826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003828:	2303      	movs	r3, #3
 800382a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(IN2_DM_1_GPIO_Port, &GPIO_InitStruct);
 800382c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003830:	4619      	mov	r1, r3
 8003832:	482b      	ldr	r0, [pc, #172]	; (80038e0 <HAL_TIM_MspPostInit+0x1d4>)
 8003834:	f000 ffa2 	bl	800477c <HAL_GPIO_Init>
}
 8003838:	e042      	b.n	80038c0 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM13)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2a      	ldr	r2, [pc, #168]	; (80038e8 <HAL_TIM_MspPostInit+0x1dc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d11c      	bne.n	800387e <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003844:	4b21      	ldr	r3, [pc, #132]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	4a20      	ldr	r2, [pc, #128]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	6313      	str	r3, [r2, #48]	; 0x30
 8003850:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IN1_DM_3_Pin;
 800385c:	2340      	movs	r3, #64	; 0x40
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003860:	2302      	movs	r3, #2
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003868:	2300      	movs	r3, #0
 800386a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800386c:	2309      	movs	r3, #9
 800386e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(IN1_DM_3_GPIO_Port, &GPIO_InitStruct);
 8003870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003874:	4619      	mov	r1, r3
 8003876:	4818      	ldr	r0, [pc, #96]	; (80038d8 <HAL_TIM_MspPostInit+0x1cc>)
 8003878:	f000 ff80 	bl	800477c <HAL_GPIO_Init>
}
 800387c:	e020      	b.n	80038c0 <HAL_TIM_MspPostInit+0x1b4>
  else if(htim->Instance==TIM14)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1a      	ldr	r2, [pc, #104]	; (80038ec <HAL_TIM_MspPostInit+0x1e0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_MspPostInit+0x1b4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	4a0f      	ldr	r2, [pc, #60]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	6313      	str	r3, [r2, #48]	; 0x30
 8003894:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <HAL_TIM_MspPostInit+0x1c0>)
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IN2_DM_3_Pin;
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2300      	movs	r3, #0
 80038ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80038b0:	2309      	movs	r3, #9
 80038b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(IN2_DM_3_GPIO_Port, &GPIO_InitStruct);
 80038b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b8:	4619      	mov	r1, r3
 80038ba:	4807      	ldr	r0, [pc, #28]	; (80038d8 <HAL_TIM_MspPostInit+0x1cc>)
 80038bc:	f000 ff5e 	bl	800477c <HAL_GPIO_Init>
}
 80038c0:	bf00      	nop
 80038c2:	3738      	adds	r7, #56	; 0x38
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40010400 	.word	0x40010400
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020800 	.word	0x40020800
 80038d4:	40014000 	.word	0x40014000
 80038d8:	40020000 	.word	0x40020000
 80038dc:	40014400 	.word	0x40014400
 80038e0:	40020400 	.word	0x40020400
 80038e4:	40014800 	.word	0x40014800
 80038e8:	40001c00 	.word	0x40001c00
 80038ec:	40002000 	.word	0x40002000

080038f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08e      	sub	sp, #56	; 0x38
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a52      	ldr	r2, [pc, #328]	; (8003a58 <HAL_UART_MspInit+0x168>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d131      	bne.n	8003976 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003912:	4b52      	ldr	r3, [pc, #328]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	4a51      	ldr	r2, [pc, #324]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 8003918:	f043 0310 	orr.w	r3, r3, #16
 800391c:	6453      	str	r3, [r2, #68]	; 0x44
 800391e:	4b4f      	ldr	r3, [pc, #316]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	623b      	str	r3, [r7, #32]
 8003928:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392a:	4b4c      	ldr	r3, [pc, #304]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a4b      	ldr	r2, [pc, #300]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b49      	ldr	r3, [pc, #292]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ULTRA_TX_Pin|ULTRA_RX_Pin;
 8003942:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003948:	2302      	movs	r3, #2
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	2300      	movs	r3, #0
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003950:	2303      	movs	r3, #3
 8003952:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003954:	2307      	movs	r3, #7
 8003956:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800395c:	4619      	mov	r1, r3
 800395e:	4840      	ldr	r0, [pc, #256]	; (8003a60 <HAL_UART_MspInit+0x170>)
 8003960:	f000 ff0c 	bl	800477c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8003964:	2200      	movs	r2, #0
 8003966:	2107      	movs	r1, #7
 8003968:	2025      	movs	r0, #37	; 0x25
 800396a:	f000 feaa 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800396e:	2025      	movs	r0, #37	; 0x25
 8003970:	f000 fec3 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003974:	e06b      	b.n	8003a4e <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a3a      	ldr	r2, [pc, #232]	; (8003a64 <HAL_UART_MspInit+0x174>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d130      	bne.n	80039e2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003980:	4b36      	ldr	r3, [pc, #216]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	4a35      	ldr	r2, [pc, #212]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 8003986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398a:	6413      	str	r3, [r2, #64]	; 0x40
 800398c:	4b33      	ldr	r3, [pc, #204]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003998:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	4a2f      	ldr	r2, [pc, #188]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 800399e:	f043 0308 	orr.w	r3, r3, #8
 80039a2:	6313      	str	r3, [r2, #48]	; 0x30
 80039a4:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TTL_TX_Pin|TTL_RX_Pin;
 80039b0:	2360      	movs	r3, #96	; 0x60
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b4:	2302      	movs	r3, #2
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039bc:	2303      	movs	r3, #3
 80039be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039c0:	2307      	movs	r3, #7
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039c8:	4619      	mov	r1, r3
 80039ca:	4827      	ldr	r0, [pc, #156]	; (8003a68 <HAL_UART_MspInit+0x178>)
 80039cc:	f000 fed6 	bl	800477c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 80039d0:	2200      	movs	r2, #0
 80039d2:	2107      	movs	r1, #7
 80039d4:	2026      	movs	r0, #38	; 0x26
 80039d6:	f000 fe74 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039da:	2026      	movs	r0, #38	; 0x26
 80039dc:	f000 fe8d 	bl	80046fa <HAL_NVIC_EnableIRQ>
}
 80039e0:	e035      	b.n	8003a4e <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART3)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <HAL_UART_MspInit+0x17c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d130      	bne.n	8003a4e <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80039ec:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	4a1a      	ldr	r2, [pc, #104]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 80039f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f6:	6413      	str	r3, [r2, #64]	; 0x40
 80039f8:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a04:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	4a14      	ldr	r2, [pc, #80]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 8003a0a:	f043 0308 	orr.w	r3, r3, #8
 8003a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a10:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <HAL_UART_MspInit+0x16c>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a22:	2302      	movs	r3, #2
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a2e:	2307      	movs	r3, #7
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a36:	4619      	mov	r1, r3
 8003a38:	480b      	ldr	r0, [pc, #44]	; (8003a68 <HAL_UART_MspInit+0x178>)
 8003a3a:	f000 fe9f 	bl	800477c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2100      	movs	r1, #0
 8003a42:	2027      	movs	r0, #39	; 0x27
 8003a44:	f000 fe3d 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a48:	2027      	movs	r0, #39	; 0x27
 8003a4a:	f000 fe56 	bl	80046fa <HAL_NVIC_EnableIRQ>
}
 8003a4e:	bf00      	nop
 8003a50:	3738      	adds	r7, #56	; 0x38
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40011000 	.word	0x40011000
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40020000 	.word	0x40020000
 8003a64:	40004400 	.word	0x40004400
 8003a68:	40020c00 	.word	0x40020c00
 8003a6c:	40004800 	.word	0x40004800

08003a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a82:	e7fe      	b.n	8003a82 <HardFault_Handler+0x4>

08003a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a88:	e7fe      	b.n	8003a88 <MemManage_Handler+0x4>

08003a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a8e:	e7fe      	b.n	8003a8e <BusFault_Handler+0x4>

08003a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a94:	e7fe      	b.n	8003a94 <UsageFault_Handler+0x4>

08003a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ac4:	f000 f910 	bl	8003ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	bd80      	pop	{r7, pc}

08003acc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ad0:	4803      	ldr	r0, [pc, #12]	; (8003ae0 <ADC_IRQHandler+0x14>)
 8003ad2:	f000 f96d 	bl	8003db0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8003ad6:	4803      	ldr	r0, [pc, #12]	; (8003ae4 <ADC_IRQHandler+0x18>)
 8003ad8:	f000 f96a 	bl	8003db0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003adc:	bf00      	nop
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	200004f0 	.word	0x200004f0
 8003ae4:	20000538 	.word	0x20000538

08003ae8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <SPI1_IRQHandler+0x10>)
 8003aee:	f002 faa5 	bl	800603c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	2000076c 	.word	0x2000076c

08003afc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003b00:	4802      	ldr	r0, [pc, #8]	; (8003b0c <SPI2_IRQHandler+0x10>)
 8003b02:	f002 fa9b 	bl	800603c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200001fc 	.word	0x200001fc

08003b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b14:	4802      	ldr	r0, [pc, #8]	; (8003b20 <USART1_IRQHandler+0x10>)
 8003b16:	f003 fea7 	bl	8007868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200005c0 	.word	0x200005c0

08003b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b28:	4802      	ldr	r0, [pc, #8]	; (8003b34 <USART2_IRQHandler+0x10>)
 8003b2a:	f003 fe9d 	bl	8007868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000810 	.word	0x20000810

08003b38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b3c:	4802      	ldr	r0, [pc, #8]	; (8003b48 <USART3_IRQHandler+0x10>)
 8003b3e:	f003 fe93 	bl	8007868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200002e4 	.word	0x200002e4

08003b4c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003b50:	4802      	ldr	r0, [pc, #8]	; (8003b5c <SPI3_IRQHandler+0x10>)
 8003b52:	f002 fa73 	bl	800603c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000488 	.word	0x20000488

08003b60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b64:	4802      	ldr	r0, [pc, #8]	; (8003b70 <TIM6_DAC_IRQHandler+0x10>)
 8003b66:	f002 fd21 	bl	80065ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200006e8 	.word	0x200006e8

08003b74 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003b78:	4802      	ldr	r0, [pc, #8]	; (8003b84 <TIM7_IRQHandler+0x10>)
 8003b7a:	f002 fd17 	bl	80065ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200008d0 	.word	0x200008d0

08003b88 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003b8c:	4802      	ldr	r0, [pc, #8]	; (8003b98 <SPI4_IRQHandler+0x10>)
 8003b8e:	f002 fa55 	bl	800603c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000680 	.word	0x20000680

08003b9c <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 8003ba0:	4802      	ldr	r0, [pc, #8]	; (8003bac <SPI6_IRQHandler+0x10>)
 8003ba2:	f002 fa4b 	bl	800603c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	200003a4 	.word	0x200003a4

08003bb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bb4:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <SystemInit+0x5c>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	4a14      	ldr	r2, [pc, #80]	; (8003c0c <SystemInit+0x5c>)
 8003bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003bc4:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <SystemInit+0x60>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a11      	ldr	r2, [pc, #68]	; (8003c10 <SystemInit+0x60>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <SystemInit+0x60>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <SystemInit+0x60>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	490d      	ldr	r1, [pc, #52]	; (8003c10 <SystemInit+0x60>)
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <SystemInit+0x64>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003be2:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <SystemInit+0x60>)
 8003be4:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <SystemInit+0x68>)
 8003be6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003be8:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <SystemInit+0x60>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <SystemInit+0x60>)
 8003bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <SystemInit+0x60>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bfa:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <SystemInit+0x5c>)
 8003bfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c00:	609a      	str	r2, [r3, #8]
#endif
}
 8003c02:	bf00      	nop
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000ed00 	.word	0xe000ed00
 8003c10:	40023800 	.word	0x40023800
 8003c14:	fef6ffff 	.word	0xfef6ffff
 8003c18:	24003010 	.word	0x24003010

08003c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c22:	e003      	b.n	8003c2c <LoopCopyDataInit>

08003c24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c24:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c2a:	3104      	adds	r1, #4

08003c2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c2c:	480b      	ldr	r0, [pc, #44]	; (8003c5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c34:	d3f6      	bcc.n	8003c24 <CopyDataInit>
  ldr  r2, =_sbss
 8003c36:	4a0b      	ldr	r2, [pc, #44]	; (8003c64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c38:	e002      	b.n	8003c40 <LoopFillZerobss>

08003c3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c3c:	f842 3b04 	str.w	r3, [r2], #4

08003c40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c40:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c44:	d3f9      	bcc.n	8003c3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c46:	f7ff ffb3 	bl	8003bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c4a:	f004 fbef 	bl	800842c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c4e:	f7fc ffc7 	bl	8000be0 <main>
  bx  lr    
 8003c52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c54:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003c58:	08008560 	.word	0x08008560
  ldr  r0, =_sdata
 8003c5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c60:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8003c64:	20000030 	.word	0x20000030
  ldr  r3, = _ebss
 8003c68:	200009bc 	.word	0x200009bc

08003c6c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c6c:	e7fe      	b.n	8003c6c <CAN1_RX0_IRQHandler>

08003c6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c72:	2003      	movs	r0, #3
 8003c74:	f000 fd1a 	bl	80046ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c78:	2000      	movs	r0, #0
 8003c7a:	f000 f805 	bl	8003c88 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003c7e:	f7ff f92d 	bl	8002edc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <HAL_InitTick+0x54>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <HAL_InitTick+0x58>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fd39 	bl	800471e <HAL_SYSTICK_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e00e      	b.n	8003cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b0f      	cmp	r3, #15
 8003cba:	d80a      	bhi.n	8003cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	f000 fcfd 	bl	80046c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc8:	4a06      	ldr	r2, [pc, #24]	; (8003ce4 <HAL_InitTick+0x5c>)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e000      	b.n	8003cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000020 	.word	0x20000020
 8003ce0:	20000028 	.word	0x20000028
 8003ce4:	20000024 	.word	0x20000024

08003ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_IncTick+0x20>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_IncTick+0x24>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <HAL_IncTick+0x24>)
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000028 	.word	0x20000028
 8003d0c:	200009b8 	.word	0x200009b8

08003d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return uwTick;
 8003d14:	4b03      	ldr	r3, [pc, #12]	; (8003d24 <HAL_GetTick+0x14>)
 8003d16:	681b      	ldr	r3, [r3, #0]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	200009b8 	.word	0x200009b8

08003d28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e031      	b.n	8003da2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff f8ec 	bl	8002f24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d116      	bne.n	8003d94 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <HAL_ADC_Init+0x84>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	f043 0202 	orr.w	r2, r3, #2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 faae 	bl	80042d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	f043 0201 	orr.w	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
 8003d92:	e001      	b.n	8003d98 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	ffffeefd 	.word	0xffffeefd

08003db0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	bf0c      	ite	eq
 8003dce:	2301      	moveq	r3, #1
 8003dd0:	2300      	movne	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d049      	beq.n	8003e86 <HAL_ADC_IRQHandler+0xd6>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d046      	beq.n	8003e86 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d12b      	bne.n	8003e76 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d127      	bne.n	8003e76 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d006      	beq.n	8003e42 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d119      	bne.n	8003e76 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0220 	bic.w	r2, r2, #32
 8003e50:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d105      	bne.n	8003e76 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f043 0201 	orr.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f8db 	bl	8004032 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0212 	mvn.w	r2, #18
 8003e84:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d057      	beq.n	8003f68 <HAL_ADC_IRQHandler+0x1b8>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d054      	beq.n	8003f68 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d139      	bne.n	8003f58 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d006      	beq.n	8003f00 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d12b      	bne.n	8003f58 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d124      	bne.n	8003f58 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d11d      	bne.n	8003f58 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d119      	bne.n	8003f58 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f043 0201 	orr.w	r2, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fab7 	bl	80044cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f06f 020c 	mvn.w	r2, #12
 8003f66:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	bf0c      	ite	eq
 8003f76:	2301      	moveq	r3, #1
 8003f78:	2300      	movne	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	bf0c      	ite	eq
 8003f8c:	2301      	moveq	r3, #1
 8003f8e:	2300      	movne	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d017      	beq.n	8003fca <HAL_ADC_IRQHandler+0x21a>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d014      	beq.n	8003fca <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d10d      	bne.n	8003fca <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f843 	bl	8004046 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0201 	mvn.w	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d015      	beq.n	800402a <HAL_ADC_IRQHandler+0x27a>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d012      	beq.n	800402a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004008:	f043 0202 	orr.w	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0220 	mvn.w	r2, #32
 8004018:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f81d 	bl	800405a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0220 	mvn.w	r2, #32
 8004028:	601a      	str	r2, [r3, #0]
  }
}
 800402a:	bf00      	nop
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_ADC_ConfigChannel+0x1c>
 8004088:	2302      	movs	r3, #2
 800408a:	e115      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x248>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b09      	cmp	r3, #9
 800409a:	d935      	bls.n	8004108 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68d9      	ldr	r1, [r3, #12]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	4613      	mov	r3, r2
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4413      	add	r3, r2
 80040b0:	3b1e      	subs	r3, #30
 80040b2:	2207      	movs	r2, #7
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	43da      	mvns	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	400a      	ands	r2, r1
 80040c0:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a7f      	ldr	r2, [pc, #508]	; (80042c4 <HAL_ADC_ConfigChannel+0x254>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d10a      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68d9      	ldr	r1, [r3, #12]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	061a      	lsls	r2, r3, #24
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	60da      	str	r2, [r3, #12]
 80040e0:	e035      	b.n	800414e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68d9      	ldr	r1, [r3, #12]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	4618      	mov	r0, r3
 80040f4:	4603      	mov	r3, r0
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4403      	add	r3, r0
 80040fa:	3b1e      	subs	r3, #30
 80040fc:	409a      	lsls	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	e022      	b.n	800414e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6919      	ldr	r1, [r3, #16]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	b29b      	uxth	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	4613      	mov	r3, r2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	4413      	add	r3, r2
 800411c:	2207      	movs	r2, #7
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43da      	mvns	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	400a      	ands	r2, r1
 800412a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6919      	ldr	r1, [r3, #16]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	4618      	mov	r0, r3
 800413e:	4603      	mov	r3, r0
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	4403      	add	r3, r0
 8004144:	409a      	lsls	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b06      	cmp	r3, #6
 8004154:	d824      	bhi.n	80041a0 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	3b05      	subs	r3, #5
 8004168:	221f      	movs	r2, #31
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43da      	mvns	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	400a      	ands	r2, r1
 8004176:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	4618      	mov	r0, r3
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	3b05      	subs	r3, #5
 8004192:	fa00 f203 	lsl.w	r2, r0, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	635a      	str	r2, [r3, #52]	; 0x34
 800419e:	e04c      	b.n	800423a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b0c      	cmp	r3, #12
 80041a6:	d824      	bhi.n	80041f2 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	3b23      	subs	r3, #35	; 0x23
 80041ba:	221f      	movs	r2, #31
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	43da      	mvns	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	400a      	ands	r2, r1
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	4618      	mov	r0, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	3b23      	subs	r3, #35	; 0x23
 80041e4:	fa00 f203 	lsl.w	r2, r0, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
 80041f0:	e023      	b.n	800423a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	3b41      	subs	r3, #65	; 0x41
 8004204:	221f      	movs	r2, #31
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43da      	mvns	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	400a      	ands	r2, r1
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	4618      	mov	r0, r3
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	3b41      	subs	r3, #65	; 0x41
 800422e:	fa00 f203 	lsl.w	r2, r0, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a22      	ldr	r2, [pc, #136]	; (80042c8 <HAL_ADC_ConfigChannel+0x258>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d109      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x1e8>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b12      	cmp	r3, #18
 800424a:	d105      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800424c:	4b1f      	ldr	r3, [pc, #124]	; (80042cc <HAL_ADC_ConfigChannel+0x25c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4a1e      	ldr	r2, [pc, #120]	; (80042cc <HAL_ADC_ConfigChannel+0x25c>)
 8004252:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004256:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1a      	ldr	r2, [pc, #104]	; (80042c8 <HAL_ADC_ConfigChannel+0x258>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d125      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x23e>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <HAL_ADC_ConfigChannel+0x254>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <HAL_ADC_ConfigChannel+0x204>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b11      	cmp	r3, #17
 8004272:	d11c      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004274:	4b15      	ldr	r3, [pc, #84]	; (80042cc <HAL_ADC_ConfigChannel+0x25c>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4a14      	ldr	r2, [pc, #80]	; (80042cc <HAL_ADC_ConfigChannel+0x25c>)
 800427a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800427e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a0f      	ldr	r2, [pc, #60]	; (80042c4 <HAL_ADC_ConfigChannel+0x254>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d111      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800428a:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <HAL_ADC_ConfigChannel+0x260>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <HAL_ADC_ConfigChannel+0x264>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	0c9a      	lsrs	r2, r3, #18
 8004296:	4613      	mov	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80042a0:	e002      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f9      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	10000012 	.word	0x10000012
 80042c8:	40012000 	.word	0x40012000
 80042cc:	40012300 	.word	0x40012300
 80042d0:	20000020 	.word	0x20000020
 80042d4:	431bde83 	.word	0x431bde83

080042d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80042e0:	4b78      	ldr	r3, [pc, #480]	; (80044c4 <ADC_Init+0x1ec>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	4a77      	ldr	r2, [pc, #476]	; (80044c4 <ADC_Init+0x1ec>)
 80042e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80042ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80042ec:	4b75      	ldr	r3, [pc, #468]	; (80044c4 <ADC_Init+0x1ec>)
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4973      	ldr	r1, [pc, #460]	; (80044c4 <ADC_Init+0x1ec>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004308:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	021a      	lsls	r2, r3, #8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800432c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800434e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6899      	ldr	r1, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004366:	4a58      	ldr	r2, [pc, #352]	; (80044c8 <ADC_Init+0x1f0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d022      	beq.n	80043b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800437a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6899      	ldr	r1, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800439c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6899      	ldr	r1, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]
 80043b0:	e00f      	b.n	80043d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0202 	bic.w	r2, r2, #2
 80043e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6899      	ldr	r1, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	005a      	lsls	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01b      	beq.n	8004438 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800440e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800441e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6859      	ldr	r1, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	3b01      	subs	r3, #1
 800442c:	035a      	lsls	r2, r3, #13
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	e007      	b.n	8004448 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004446:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	3b01      	subs	r3, #1
 8004464:	051a      	lsls	r2, r3, #20
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800447c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6899      	ldr	r1, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800448a:	025a      	lsls	r2, r3, #9
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6899      	ldr	r1, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	029a      	lsls	r2, r3, #10
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	40012300 	.word	0x40012300
 80044c8:	0f000001 	.word	0x0f000001

080044cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <__NVIC_SetPriorityGrouping+0x40>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044fc:	4013      	ands	r3, r2
 80044fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <__NVIC_SetPriorityGrouping+0x44>)
 800450a:	4313      	orrs	r3, r2
 800450c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800450e:	4a04      	ldr	r2, [pc, #16]	; (8004520 <__NVIC_SetPriorityGrouping+0x40>)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	60d3      	str	r3, [r2, #12]
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	e000ed00 	.word	0xe000ed00
 8004524:	05fa0000 	.word	0x05fa0000

08004528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <__NVIC_GetPriorityGrouping+0x18>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	0a1b      	lsrs	r3, r3, #8
 8004532:	f003 0307 	and.w	r3, r3, #7
}
 8004536:	4618      	mov	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	2b00      	cmp	r3, #0
 8004554:	db0b      	blt.n	800456e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	f003 021f 	and.w	r2, r3, #31
 800455c:	4907      	ldr	r1, [pc, #28]	; (800457c <__NVIC_EnableIRQ+0x38>)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	2001      	movs	r0, #1
 8004566:	fa00 f202 	lsl.w	r2, r0, r2
 800456a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	e000e100 	.word	0xe000e100

08004580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	6039      	str	r1, [r7, #0]
 800458a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800458c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004590:	2b00      	cmp	r3, #0
 8004592:	db0a      	blt.n	80045aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	490c      	ldr	r1, [pc, #48]	; (80045cc <__NVIC_SetPriority+0x4c>)
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	0112      	lsls	r2, r2, #4
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	440b      	add	r3, r1
 80045a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045a8:	e00a      	b.n	80045c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	4908      	ldr	r1, [pc, #32]	; (80045d0 <__NVIC_SetPriority+0x50>)
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	3b04      	subs	r3, #4
 80045b8:	0112      	lsls	r2, r2, #4
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	440b      	add	r3, r1
 80045be:	761a      	strb	r2, [r3, #24]
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	e000e100 	.word	0xe000e100
 80045d0:	e000ed00 	.word	0xe000ed00

080045d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b089      	sub	sp, #36	; 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f1c3 0307 	rsb	r3, r3, #7
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	bf28      	it	cs
 80045f2:	2304      	movcs	r3, #4
 80045f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3304      	adds	r3, #4
 80045fa:	2b06      	cmp	r3, #6
 80045fc:	d902      	bls.n	8004604 <NVIC_EncodePriority+0x30>
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	3b03      	subs	r3, #3
 8004602:	e000      	b.n	8004606 <NVIC_EncodePriority+0x32>
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004608:	f04f 32ff 	mov.w	r2, #4294967295
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43da      	mvns	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	401a      	ands	r2, r3
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800461c:	f04f 31ff 	mov.w	r1, #4294967295
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	43d9      	mvns	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800462c:	4313      	orrs	r3, r2
         );
}
 800462e:	4618      	mov	r0, r3
 8004630:	3724      	adds	r7, #36	; 0x24
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004640:	f3bf 8f4f 	dsb	sy
}
 8004644:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <__NVIC_SystemReset+0x24>)
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800464e:	4904      	ldr	r1, [pc, #16]	; (8004660 <__NVIC_SystemReset+0x24>)
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <__NVIC_SystemReset+0x28>)
 8004652:	4313      	orrs	r3, r2
 8004654:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004656:	f3bf 8f4f 	dsb	sy
}
 800465a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800465c:	bf00      	nop
 800465e:	e7fd      	b.n	800465c <__NVIC_SystemReset+0x20>
 8004660:	e000ed00 	.word	0xe000ed00
 8004664:	05fa0004 	.word	0x05fa0004

08004668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3b01      	subs	r3, #1
 8004674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004678:	d301      	bcc.n	800467e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800467a:	2301      	movs	r3, #1
 800467c:	e00f      	b.n	800469e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800467e:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <SysTick_Config+0x40>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3b01      	subs	r3, #1
 8004684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004686:	210f      	movs	r1, #15
 8004688:	f04f 30ff 	mov.w	r0, #4294967295
 800468c:	f7ff ff78 	bl	8004580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <SysTick_Config+0x40>)
 8004692:	2200      	movs	r2, #0
 8004694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004696:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <SysTick_Config+0x40>)
 8004698:	2207      	movs	r2, #7
 800469a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	e000e010 	.word	0xe000e010

080046ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ff13 	bl	80044e0 <__NVIC_SetPriorityGrouping>
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b086      	sub	sp, #24
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	4603      	mov	r3, r0
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046d4:	f7ff ff28 	bl	8004528 <__NVIC_GetPriorityGrouping>
 80046d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f7ff ff78 	bl	80045d4 <NVIC_EncodePriority>
 80046e4:	4602      	mov	r2, r0
 80046e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff47 	bl	8004580 <__NVIC_SetPriority>
}
 80046f2:	bf00      	nop
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff1b 	bl	8004544 <__NVIC_EnableIRQ>
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800471a:	f7ff ff8f 	bl	800463c <__NVIC_SystemReset>

0800471e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ff9e 	bl	8004668 <SysTick_Config>
 800472c:	4603      	mov	r3, r0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d004      	beq.n	8004754 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2280      	movs	r2, #128	; 0x80
 800474e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e00c      	b.n	800476e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2205      	movs	r2, #5
 8004758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
	...

0800477c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800477c:	b480      	push	{r7}
 800477e:	b089      	sub	sp, #36	; 0x24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800478e:	2300      	movs	r3, #0
 8004790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	e175      	b.n	8004a88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800479c:	2201      	movs	r2, #1
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4013      	ands	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	f040 8164 	bne.w	8004a82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_Init+0x4e>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b12      	cmp	r3, #18
 80047c8:	d123      	bne.n	8004812 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	08da      	lsrs	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3208      	adds	r2, #8
 80047d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	220f      	movs	r2, #15
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43db      	mvns	r3, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4013      	ands	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	08da      	lsrs	r2, r3, #3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3208      	adds	r2, #8
 800480c:	69b9      	ldr	r1, [r7, #24]
 800480e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	2203      	movs	r2, #3
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 0203 	and.w	r2, r3, #3
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d00b      	beq.n	8004866 <HAL_GPIO_Init+0xea>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d007      	beq.n	8004866 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800485a:	2b11      	cmp	r3, #17
 800485c:	d003      	beq.n	8004866 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b12      	cmp	r3, #18
 8004864:	d130      	bne.n	80048c8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	2203      	movs	r2, #3
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800489c:	2201      	movs	r2, #1
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4013      	ands	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 0201 	and.w	r2, r3, #1
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	2203      	movs	r2, #3
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80be 	beq.w	8004a82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004906:	4b66      	ldr	r3, [pc, #408]	; (8004aa0 <HAL_GPIO_Init+0x324>)
 8004908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490a:	4a65      	ldr	r2, [pc, #404]	; (8004aa0 <HAL_GPIO_Init+0x324>)
 800490c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004910:	6453      	str	r3, [r2, #68]	; 0x44
 8004912:	4b63      	ldr	r3, [pc, #396]	; (8004aa0 <HAL_GPIO_Init+0x324>)
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800491e:	4a61      	ldr	r2, [pc, #388]	; (8004aa4 <HAL_GPIO_Init+0x328>)
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	089b      	lsrs	r3, r3, #2
 8004924:	3302      	adds	r3, #2
 8004926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	220f      	movs	r2, #15
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a58      	ldr	r2, [pc, #352]	; (8004aa8 <HAL_GPIO_Init+0x32c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d037      	beq.n	80049ba <HAL_GPIO_Init+0x23e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a57      	ldr	r2, [pc, #348]	; (8004aac <HAL_GPIO_Init+0x330>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d031      	beq.n	80049b6 <HAL_GPIO_Init+0x23a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a56      	ldr	r2, [pc, #344]	; (8004ab0 <HAL_GPIO_Init+0x334>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d02b      	beq.n	80049b2 <HAL_GPIO_Init+0x236>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a55      	ldr	r2, [pc, #340]	; (8004ab4 <HAL_GPIO_Init+0x338>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d025      	beq.n	80049ae <HAL_GPIO_Init+0x232>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a54      	ldr	r2, [pc, #336]	; (8004ab8 <HAL_GPIO_Init+0x33c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d01f      	beq.n	80049aa <HAL_GPIO_Init+0x22e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a53      	ldr	r2, [pc, #332]	; (8004abc <HAL_GPIO_Init+0x340>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d019      	beq.n	80049a6 <HAL_GPIO_Init+0x22a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a52      	ldr	r2, [pc, #328]	; (8004ac0 <HAL_GPIO_Init+0x344>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_GPIO_Init+0x226>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a51      	ldr	r2, [pc, #324]	; (8004ac4 <HAL_GPIO_Init+0x348>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00d      	beq.n	800499e <HAL_GPIO_Init+0x222>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a50      	ldr	r2, [pc, #320]	; (8004ac8 <HAL_GPIO_Init+0x34c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <HAL_GPIO_Init+0x21e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a4f      	ldr	r2, [pc, #316]	; (8004acc <HAL_GPIO_Init+0x350>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d101      	bne.n	8004996 <HAL_GPIO_Init+0x21a>
 8004992:	2309      	movs	r3, #9
 8004994:	e012      	b.n	80049bc <HAL_GPIO_Init+0x240>
 8004996:	230a      	movs	r3, #10
 8004998:	e010      	b.n	80049bc <HAL_GPIO_Init+0x240>
 800499a:	2308      	movs	r3, #8
 800499c:	e00e      	b.n	80049bc <HAL_GPIO_Init+0x240>
 800499e:	2307      	movs	r3, #7
 80049a0:	e00c      	b.n	80049bc <HAL_GPIO_Init+0x240>
 80049a2:	2306      	movs	r3, #6
 80049a4:	e00a      	b.n	80049bc <HAL_GPIO_Init+0x240>
 80049a6:	2305      	movs	r3, #5
 80049a8:	e008      	b.n	80049bc <HAL_GPIO_Init+0x240>
 80049aa:	2304      	movs	r3, #4
 80049ac:	e006      	b.n	80049bc <HAL_GPIO_Init+0x240>
 80049ae:	2303      	movs	r3, #3
 80049b0:	e004      	b.n	80049bc <HAL_GPIO_Init+0x240>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e002      	b.n	80049bc <HAL_GPIO_Init+0x240>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <HAL_GPIO_Init+0x240>
 80049ba:	2300      	movs	r3, #0
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	f002 0203 	and.w	r2, r2, #3
 80049c2:	0092      	lsls	r2, r2, #2
 80049c4:	4093      	lsls	r3, r2
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80049cc:	4935      	ldr	r1, [pc, #212]	; (8004aa4 <HAL_GPIO_Init+0x328>)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	089b      	lsrs	r3, r3, #2
 80049d2:	3302      	adds	r3, #2
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049da:	4b3d      	ldr	r3, [pc, #244]	; (8004ad0 <HAL_GPIO_Init+0x354>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	43db      	mvns	r3, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4013      	ands	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049fe:	4a34      	ldr	r2, [pc, #208]	; (8004ad0 <HAL_GPIO_Init+0x354>)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a04:	4b32      	ldr	r3, [pc, #200]	; (8004ad0 <HAL_GPIO_Init+0x354>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4013      	ands	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a28:	4a29      	ldr	r2, [pc, #164]	; (8004ad0 <HAL_GPIO_Init+0x354>)
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a2e:	4b28      	ldr	r3, [pc, #160]	; (8004ad0 <HAL_GPIO_Init+0x354>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	43db      	mvns	r3, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a52:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <HAL_GPIO_Init+0x354>)
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a58:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <HAL_GPIO_Init+0x354>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	4013      	ands	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a7c:	4a14      	ldr	r2, [pc, #80]	; (8004ad0 <HAL_GPIO_Init+0x354>)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3301      	adds	r3, #1
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b0f      	cmp	r3, #15
 8004a8c:	f67f ae86 	bls.w	800479c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004a90:	bf00      	nop
 8004a92:	bf00      	nop
 8004a94:	3724      	adds	r7, #36	; 0x24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	40013800 	.word	0x40013800
 8004aa8:	40020000 	.word	0x40020000
 8004aac:	40020400 	.word	0x40020400
 8004ab0:	40020800 	.word	0x40020800
 8004ab4:	40020c00 	.word	0x40020c00
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40021400 	.word	0x40021400
 8004ac0:	40021800 	.word	0x40021800
 8004ac4:	40021c00 	.word	0x40021c00
 8004ac8:	40022000 	.word	0x40022000
 8004acc:	40022400 	.word	0x40022400
 8004ad0:	40013c00 	.word	0x40013c00

08004ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	887b      	ldrh	r3, [r7, #2]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
 8004af0:	e001      	b.n	8004af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004af2:	2300      	movs	r3, #0
 8004af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	807b      	strh	r3, [r7, #2]
 8004b10:	4613      	mov	r3, r2
 8004b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b14:	787b      	ldrb	r3, [r7, #1]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b1a:	887a      	ldrh	r2, [r7, #2]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004b20:	e003      	b.n	8004b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004b22:	887b      	ldrh	r3, [r7, #2]
 8004b24:	041a      	lsls	r2, r3, #16
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	619a      	str	r2, [r3, #24]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	887b      	ldrh	r3, [r7, #2]
 8004b48:	401a      	ands	r2, r3
 8004b4a:	887b      	ldrh	r3, [r7, #2]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d104      	bne.n	8004b5a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b50:	887b      	ldrh	r3, [r7, #2]
 8004b52:	041a      	lsls	r2, r3, #16
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004b58:	e002      	b.n	8004b60 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004b5a:	887a      	ldrh	r2, [r7, #2]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	619a      	str	r2, [r3, #24]
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e07f      	b.n	8004c7e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fe fa42 	bl	800301c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2224      	movs	r2, #36	; 0x24
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d107      	bne.n	8004be6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	e006      	b.n	8004bf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d104      	bne.n	8004c06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6859      	ldr	r1, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4b1d      	ldr	r3, [pc, #116]	; (8004c88 <HAL_I2C_Init+0x11c>)
 8004c12:	430b      	orrs	r3, r1
 8004c14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	ea42 0103 	orr.w	r1, r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	021a      	lsls	r2, r3, #8
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69d9      	ldr	r1, [r3, #28]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1a      	ldr	r2, [r3, #32]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	02008000 	.word	0x02008000

08004c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d138      	bne.n	8004d14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e032      	b.n	8004d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2224      	movs	r2, #36	; 0x24
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0201 	bic.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6819      	ldr	r1, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	e000      	b.n	8004d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d14:	2302      	movs	r3, #2
  }
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d139      	bne.n	8004dac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e033      	b.n	8004dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2224      	movs	r2, #36	; 0x24
 8004d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
  }
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004dc6:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd2:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004dde:	4b1e      	ldr	r3, [pc, #120]	; (8004e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dea:	f7fe ff91 	bl	8003d10 <HAL_GetTick>
 8004dee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004df0:	e009      	b.n	8004e06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004df2:	f7fe ff8d 	bl	8003d10 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e00:	d901      	bls.n	8004e06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e022      	b.n	8004e4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e06:	4b14      	ldr	r3, [pc, #80]	; (8004e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e12:	d1ee      	bne.n	8004df2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e14:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a0f      	ldr	r2, [pc, #60]	; (8004e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e20:	f7fe ff76 	bl	8003d10 <HAL_GetTick>
 8004e24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e26:	e009      	b.n	8004e3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e28:	f7fe ff72 	bl	8003d10 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e36:	d901      	bls.n	8004e3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e007      	b.n	8004e4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e3c:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e48:	d1ee      	bne.n	8004e28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40007000 	.word	0x40007000

08004e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004e64:	2300      	movs	r3, #0
 8004e66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e25e      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 8087 	beq.w	8004f8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e80:	4b96      	ldr	r3, [pc, #600]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 030c 	and.w	r3, r3, #12
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d00c      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e8c:	4b93      	ldr	r3, [pc, #588]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 030c 	and.w	r3, r3, #12
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d112      	bne.n	8004ebe <HAL_RCC_OscConfig+0x62>
 8004e98:	4b90      	ldr	r3, [pc, #576]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea4:	d10b      	bne.n	8004ebe <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea6:	4b8d      	ldr	r3, [pc, #564]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d06c      	beq.n	8004f8c <HAL_RCC_OscConfig+0x130>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d168      	bne.n	8004f8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e238      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec6:	d106      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x7a>
 8004ec8:	4b84      	ldr	r3, [pc, #528]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a83      	ldr	r2, [pc, #524]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	e02e      	b.n	8004f34 <HAL_RCC_OscConfig+0xd8>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x9c>
 8004ede:	4b7f      	ldr	r3, [pc, #508]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a7e      	ldr	r2, [pc, #504]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	4b7c      	ldr	r3, [pc, #496]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a7b      	ldr	r2, [pc, #492]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e01d      	b.n	8004f34 <HAL_RCC_OscConfig+0xd8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCC_OscConfig+0xc0>
 8004f02:	4b76      	ldr	r3, [pc, #472]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a75      	ldr	r2, [pc, #468]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	4b73      	ldr	r3, [pc, #460]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a72      	ldr	r2, [pc, #456]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e00b      	b.n	8004f34 <HAL_RCC_OscConfig+0xd8>
 8004f1c:	4b6f      	ldr	r3, [pc, #444]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a6e      	ldr	r2, [pc, #440]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	4b6c      	ldr	r3, [pc, #432]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a6b      	ldr	r2, [pc, #428]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d013      	beq.n	8004f64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fe fee8 	bl	8003d10 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f44:	f7fe fee4 	bl	8003d10 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	; 0x64
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e1ec      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	4b61      	ldr	r3, [pc, #388]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0xe8>
 8004f62:	e014      	b.n	8004f8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fe fed4 	bl	8003d10 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f6c:	f7fe fed0 	bl	8003d10 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b64      	cmp	r3, #100	; 0x64
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e1d8      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7e:	4b57      	ldr	r3, [pc, #348]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x110>
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d069      	beq.n	800506e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f9a:	4b50      	ldr	r3, [pc, #320]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fa6:	4b4d      	ldr	r3, [pc, #308]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d11c      	bne.n	8004fec <HAL_RCC_OscConfig+0x190>
 8004fb2:	4b4a      	ldr	r3, [pc, #296]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d116      	bne.n	8004fec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fbe:	4b47      	ldr	r3, [pc, #284]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x17a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d001      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e1ac      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd6:	4b41      	ldr	r3, [pc, #260]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	493d      	ldr	r1, [pc, #244]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fea:	e040      	b.n	800506e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d023      	beq.n	800503c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff4:	4b39      	ldr	r3, [pc, #228]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a38      	ldr	r2, [pc, #224]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fe fe86 	bl	8003d10 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005008:	f7fe fe82 	bl	8003d10 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e18a      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501a:	4b30      	ldr	r3, [pc, #192]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005026:	4b2d      	ldr	r3, [pc, #180]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	4929      	ldr	r1, [pc, #164]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8005036:	4313      	orrs	r3, r2
 8005038:	600b      	str	r3, [r1, #0]
 800503a:	e018      	b.n	800506e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800503c:	4b27      	ldr	r3, [pc, #156]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a26      	ldr	r2, [pc, #152]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8005042:	f023 0301 	bic.w	r3, r3, #1
 8005046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fe fe62 	bl	8003d10 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005050:	f7fe fe5e 	bl	8003d10 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e166      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005062:	4b1e      	ldr	r3, [pc, #120]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d038      	beq.n	80050ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d019      	beq.n	80050b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005082:	4b16      	ldr	r3, [pc, #88]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8005084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005086:	4a15      	ldr	r2, [pc, #84]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508e:	f7fe fe3f 	bl	8003d10 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005096:	f7fe fe3b 	bl	8003d10 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e143      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 80050aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x23a>
 80050b4:	e01a      	b.n	80050ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b6:	4b09      	ldr	r3, [pc, #36]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 80050b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ba:	4a08      	ldr	r2, [pc, #32]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 80050bc:	f023 0301 	bic.w	r3, r3, #1
 80050c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c2:	f7fe fe25 	bl	8003d10 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ca:	f7fe fe21 	bl	8003d10 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d903      	bls.n	80050e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e129      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
 80050dc:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050e0:	4b95      	ldr	r3, [pc, #596]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80050e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ee      	bne.n	80050ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 80a4 	beq.w	8005242 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fa:	4b8f      	ldr	r3, [pc, #572]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10d      	bne.n	8005122 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005106:	4b8c      	ldr	r3, [pc, #560]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	4a8b      	ldr	r2, [pc, #556]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005110:	6413      	str	r3, [r2, #64]	; 0x40
 8005112:	4b89      	ldr	r3, [pc, #548]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800511e:	2301      	movs	r3, #1
 8005120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005122:	4b86      	ldr	r3, [pc, #536]	; (800533c <HAL_RCC_OscConfig+0x4e0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d118      	bne.n	8005160 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800512e:	4b83      	ldr	r3, [pc, #524]	; (800533c <HAL_RCC_OscConfig+0x4e0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a82      	ldr	r2, [pc, #520]	; (800533c <HAL_RCC_OscConfig+0x4e0>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513a:	f7fe fde9 	bl	8003d10 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005142:	f7fe fde5 	bl	8003d10 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b64      	cmp	r3, #100	; 0x64
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e0ed      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005154:	4b79      	ldr	r3, [pc, #484]	; (800533c <HAL_RCC_OscConfig+0x4e0>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0f0      	beq.n	8005142 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x31a>
 8005168:	4b73      	ldr	r3, [pc, #460]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	4a72      	ldr	r2, [pc, #456]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6713      	str	r3, [r2, #112]	; 0x70
 8005174:	e02d      	b.n	80051d2 <HAL_RCC_OscConfig+0x376>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0x33c>
 800517e:	4b6e      	ldr	r3, [pc, #440]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	4a6d      	ldr	r2, [pc, #436]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 8005184:	f023 0301 	bic.w	r3, r3, #1
 8005188:	6713      	str	r3, [r2, #112]	; 0x70
 800518a:	4b6b      	ldr	r3, [pc, #428]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	4a6a      	ldr	r2, [pc, #424]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 8005190:	f023 0304 	bic.w	r3, r3, #4
 8005194:	6713      	str	r3, [r2, #112]	; 0x70
 8005196:	e01c      	b.n	80051d2 <HAL_RCC_OscConfig+0x376>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b05      	cmp	r3, #5
 800519e:	d10c      	bne.n	80051ba <HAL_RCC_OscConfig+0x35e>
 80051a0:	4b65      	ldr	r3, [pc, #404]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a4:	4a64      	ldr	r2, [pc, #400]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	6713      	str	r3, [r2, #112]	; 0x70
 80051ac:	4b62      	ldr	r3, [pc, #392]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	4a61      	ldr	r2, [pc, #388]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	6713      	str	r3, [r2, #112]	; 0x70
 80051b8:	e00b      	b.n	80051d2 <HAL_RCC_OscConfig+0x376>
 80051ba:	4b5f      	ldr	r3, [pc, #380]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	4a5e      	ldr	r2, [pc, #376]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	6713      	str	r3, [r2, #112]	; 0x70
 80051c6:	4b5c      	ldr	r3, [pc, #368]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ca:	4a5b      	ldr	r2, [pc, #364]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d015      	beq.n	8005206 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051da:	f7fe fd99 	bl	8003d10 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fe fd95 	bl	8003d10 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e09b      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f8:	4b4f      	ldr	r3, [pc, #316]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0ee      	beq.n	80051e2 <HAL_RCC_OscConfig+0x386>
 8005204:	e014      	b.n	8005230 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005206:	f7fe fd83 	bl	8003d10 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520c:	e00a      	b.n	8005224 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fe fd7f 	bl	8003d10 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e085      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005224:	4b44      	ldr	r3, [pc, #272]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1ee      	bne.n	800520e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005230:	7dfb      	ldrb	r3, [r7, #23]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d105      	bne.n	8005242 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005236:	4b40      	ldr	r3, [pc, #256]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	4a3f      	ldr	r2, [pc, #252]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 800523c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d071      	beq.n	800532e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800524a:	4b3b      	ldr	r3, [pc, #236]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	2b08      	cmp	r3, #8
 8005254:	d069      	beq.n	800532a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d14b      	bne.n	80052f6 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525e:	4b36      	ldr	r3, [pc, #216]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a35      	ldr	r2, [pc, #212]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 8005264:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526a:	f7fe fd51 	bl	8003d10 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005272:	f7fe fd4d 	bl	8003d10 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e055      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005284:	4b2c      	ldr	r3, [pc, #176]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1f0      	bne.n	8005272 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	019b      	lsls	r3, r3, #6
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	085b      	lsrs	r3, r3, #1
 80052a8:	3b01      	subs	r3, #1
 80052aa:	041b      	lsls	r3, r3, #16
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	061b      	lsls	r3, r3, #24
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	071b      	lsls	r3, r3, #28
 80052bc:	491e      	ldr	r1, [pc, #120]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052c2:	4b1d      	ldr	r3, [pc, #116]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1c      	ldr	r2, [pc, #112]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80052c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ce:	f7fe fd1f 	bl	8003d10 <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d6:	f7fe fd1b 	bl	8003d10 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e023      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e8:	4b13      	ldr	r3, [pc, #76]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0f0      	beq.n	80052d6 <HAL_RCC_OscConfig+0x47a>
 80052f4:	e01b      	b.n	800532e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f6:	4b10      	ldr	r3, [pc, #64]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a0f      	ldr	r2, [pc, #60]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 80052fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005302:	f7fe fd05 	bl	8003d10 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800530a:	f7fe fd01 	bl	8003d10 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e009      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531c:	4b06      	ldr	r3, [pc, #24]	; (8005338 <HAL_RCC_OscConfig+0x4dc>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f0      	bne.n	800530a <HAL_RCC_OscConfig+0x4ae>
 8005328:	e001      	b.n	800532e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40023800 	.word	0x40023800
 800533c:	40007000 	.word	0x40007000

08005340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0ce      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005358:	4b69      	ldr	r3, [pc, #420]	; (8005500 <HAL_RCC_ClockConfig+0x1c0>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d910      	bls.n	8005388 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005366:	4b66      	ldr	r3, [pc, #408]	; (8005500 <HAL_RCC_ClockConfig+0x1c0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 020f 	bic.w	r2, r3, #15
 800536e:	4964      	ldr	r1, [pc, #400]	; (8005500 <HAL_RCC_ClockConfig+0x1c0>)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005376:	4b62      	ldr	r3, [pc, #392]	; (8005500 <HAL_RCC_ClockConfig+0x1c0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0b6      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d020      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053a0:	4b58      	ldr	r3, [pc, #352]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4a57      	ldr	r2, [pc, #348]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 80053a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053b8:	4b52      	ldr	r3, [pc, #328]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	4a51      	ldr	r2, [pc, #324]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 80053be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c4:	4b4f      	ldr	r3, [pc, #316]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	494c      	ldr	r1, [pc, #304]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d040      	beq.n	8005464 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d107      	bne.n	80053fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ea:	4b46      	ldr	r3, [pc, #280]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d115      	bne.n	8005422 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e07d      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d107      	bne.n	8005412 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005402:	4b40      	ldr	r3, [pc, #256]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e071      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005412:	4b3c      	ldr	r3, [pc, #240]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e069      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005422:	4b38      	ldr	r3, [pc, #224]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f023 0203 	bic.w	r2, r3, #3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	4935      	ldr	r1, [pc, #212]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 8005430:	4313      	orrs	r3, r2
 8005432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005434:	f7fe fc6c 	bl	8003d10 <HAL_GetTick>
 8005438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543a:	e00a      	b.n	8005452 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800543c:	f7fe fc68 	bl	8003d10 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	; 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e051      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005452:	4b2c      	ldr	r3, [pc, #176]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 020c 	and.w	r2, r3, #12
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	429a      	cmp	r2, r3
 8005462:	d1eb      	bne.n	800543c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005464:	4b26      	ldr	r3, [pc, #152]	; (8005500 <HAL_RCC_ClockConfig+0x1c0>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d210      	bcs.n	8005494 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005472:	4b23      	ldr	r3, [pc, #140]	; (8005500 <HAL_RCC_ClockConfig+0x1c0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f023 020f 	bic.w	r2, r3, #15
 800547a:	4921      	ldr	r1, [pc, #132]	; (8005500 <HAL_RCC_ClockConfig+0x1c0>)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	4313      	orrs	r3, r2
 8005480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005482:	4b1f      	ldr	r3, [pc, #124]	; (8005500 <HAL_RCC_ClockConfig+0x1c0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d001      	beq.n	8005494 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e030      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a0:	4b18      	ldr	r3, [pc, #96]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4915      	ldr	r1, [pc, #84]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054be:	4b11      	ldr	r3, [pc, #68]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	490d      	ldr	r1, [pc, #52]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054d2:	f000 f81d 	bl	8005510 <HAL_RCC_GetSysClockFreq>
 80054d6:	4602      	mov	r2, r0
 80054d8:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	4909      	ldr	r1, [pc, #36]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80054e4:	5ccb      	ldrb	r3, [r1, r3]
 80054e6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ea:	4a08      	ldr	r2, [pc, #32]	; (800550c <HAL_RCC_ClockConfig+0x1cc>)
 80054ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80054ee:	2000      	movs	r0, #0
 80054f0:	f7fe fbca 	bl	8003c88 <HAL_InitTick>

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40023c00 	.word	0x40023c00
 8005504:	40023800 	.word	0x40023800
 8005508:	08008538 	.word	0x08008538
 800550c:	20000020 	.word	0x20000020

08005510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	607b      	str	r3, [r7, #4]
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	2300      	movs	r3, #0
 8005522:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005528:	4b67      	ldr	r3, [pc, #412]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 030c 	and.w	r3, r3, #12
 8005530:	2b08      	cmp	r3, #8
 8005532:	d00d      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0x40>
 8005534:	2b08      	cmp	r3, #8
 8005536:	f200 80bd 	bhi.w	80056b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x34>
 800553e:	2b04      	cmp	r3, #4
 8005540:	d003      	beq.n	800554a <HAL_RCC_GetSysClockFreq+0x3a>
 8005542:	e0b7      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005544:	4b61      	ldr	r3, [pc, #388]	; (80056cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005546:	60bb      	str	r3, [r7, #8]
       break;
 8005548:	e0b7      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800554a:	4b61      	ldr	r3, [pc, #388]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800554c:	60bb      	str	r3, [r7, #8]
      break;
 800554e:	e0b4      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005550:	4b5d      	ldr	r3, [pc, #372]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005558:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800555a:	4b5b      	ldr	r3, [pc, #364]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d04d      	beq.n	8005602 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005566:	4b58      	ldr	r3, [pc, #352]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	099b      	lsrs	r3, r3, #6
 800556c:	461a      	mov	r2, r3
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005576:	f04f 0100 	mov.w	r1, #0
 800557a:	ea02 0800 	and.w	r8, r2, r0
 800557e:	ea03 0901 	and.w	r9, r3, r1
 8005582:	4640      	mov	r0, r8
 8005584:	4649      	mov	r1, r9
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	014b      	lsls	r3, r1, #5
 8005590:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005594:	0142      	lsls	r2, r0, #5
 8005596:	4610      	mov	r0, r2
 8005598:	4619      	mov	r1, r3
 800559a:	ebb0 0008 	subs.w	r0, r0, r8
 800559e:	eb61 0109 	sbc.w	r1, r1, r9
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	018b      	lsls	r3, r1, #6
 80055ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055b0:	0182      	lsls	r2, r0, #6
 80055b2:	1a12      	subs	r2, r2, r0
 80055b4:	eb63 0301 	sbc.w	r3, r3, r1
 80055b8:	f04f 0000 	mov.w	r0, #0
 80055bc:	f04f 0100 	mov.w	r1, #0
 80055c0:	00d9      	lsls	r1, r3, #3
 80055c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055c6:	00d0      	lsls	r0, r2, #3
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	eb12 0208 	adds.w	r2, r2, r8
 80055d0:	eb43 0309 	adc.w	r3, r3, r9
 80055d4:	f04f 0000 	mov.w	r0, #0
 80055d8:	f04f 0100 	mov.w	r1, #0
 80055dc:	0259      	lsls	r1, r3, #9
 80055de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80055e2:	0250      	lsls	r0, r2, #9
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4610      	mov	r0, r2
 80055ea:	4619      	mov	r1, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	f7fa fe20 	bl	8000238 <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4613      	mov	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e04a      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005602:	4b31      	ldr	r3, [pc, #196]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	099b      	lsrs	r3, r3, #6
 8005608:	461a      	mov	r2, r3
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005612:	f04f 0100 	mov.w	r1, #0
 8005616:	ea02 0400 	and.w	r4, r2, r0
 800561a:	ea03 0501 	and.w	r5, r3, r1
 800561e:	4620      	mov	r0, r4
 8005620:	4629      	mov	r1, r5
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	014b      	lsls	r3, r1, #5
 800562c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005630:	0142      	lsls	r2, r0, #5
 8005632:	4610      	mov	r0, r2
 8005634:	4619      	mov	r1, r3
 8005636:	1b00      	subs	r0, r0, r4
 8005638:	eb61 0105 	sbc.w	r1, r1, r5
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	018b      	lsls	r3, r1, #6
 8005646:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800564a:	0182      	lsls	r2, r0, #6
 800564c:	1a12      	subs	r2, r2, r0
 800564e:	eb63 0301 	sbc.w	r3, r3, r1
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f04f 0100 	mov.w	r1, #0
 800565a:	00d9      	lsls	r1, r3, #3
 800565c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005660:	00d0      	lsls	r0, r2, #3
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	1912      	adds	r2, r2, r4
 8005668:	eb45 0303 	adc.w	r3, r5, r3
 800566c:	f04f 0000 	mov.w	r0, #0
 8005670:	f04f 0100 	mov.w	r1, #0
 8005674:	0299      	lsls	r1, r3, #10
 8005676:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800567a:	0290      	lsls	r0, r2, #10
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4610      	mov	r0, r2
 8005682:	4619      	mov	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	461a      	mov	r2, r3
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	f7fa fdd4 	bl	8000238 <__aeabi_uldivmod>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4613      	mov	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	3301      	adds	r3, #1
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	60bb      	str	r3, [r7, #8]
      break;
 80056b2:	e002      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80056b6:	60bb      	str	r3, [r7, #8]
      break;
 80056b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ba:	68bb      	ldr	r3, [r7, #8]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	00f42400 	.word	0x00f42400
 80056d0:	007a1200 	.word	0x007a1200

080056d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d8:	4b03      	ldr	r3, [pc, #12]	; (80056e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000020 	.word	0x20000020

080056ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056f0:	f7ff fff0 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	0a9b      	lsrs	r3, r3, #10
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	4903      	ldr	r1, [pc, #12]	; (8005710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005702:	5ccb      	ldrb	r3, [r1, r3]
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40023800 	.word	0x40023800
 8005710:	08008548 	.word	0x08008548

08005714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005718:	f7ff ffdc 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 800571c:	4602      	mov	r2, r0
 800571e:	4b05      	ldr	r3, [pc, #20]	; (8005734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	0b5b      	lsrs	r3, r3, #13
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	4903      	ldr	r1, [pc, #12]	; (8005738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800572a:	5ccb      	ldrb	r3, [r1, r3]
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005730:	4618      	mov	r0, r3
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40023800 	.word	0x40023800
 8005738:	08008548 	.word	0x08008548

0800573c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d012      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005764:	4b69      	ldr	r3, [pc, #420]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	4a68      	ldr	r2, [pc, #416]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800576a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800576e:	6093      	str	r3, [r2, #8]
 8005770:	4b66      	ldr	r3, [pc, #408]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005778:	4964      	ldr	r1, [pc, #400]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800577a:	4313      	orrs	r3, r2
 800577c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005786:	2301      	movs	r3, #1
 8005788:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d017      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005796:	4b5d      	ldr	r3, [pc, #372]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800579c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a4:	4959      	ldr	r1, [pc, #356]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b4:	d101      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80057b6:	2301      	movs	r3, #1
 80057b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80057c2:	2301      	movs	r3, #1
 80057c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d017      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057d2:	4b4e      	ldr	r3, [pc, #312]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	494a      	ldr	r1, [pc, #296]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057f0:	d101      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80057f2:	2301      	movs	r3, #1
 80057f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80057fe:	2301      	movs	r3, #1
 8005800:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800580e:	2301      	movs	r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 808b 	beq.w	8005936 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005820:	4b3a      	ldr	r3, [pc, #232]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	4a39      	ldr	r2, [pc, #228]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800582a:	6413      	str	r3, [r2, #64]	; 0x40
 800582c:	4b37      	ldr	r3, [pc, #220]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005838:	4b35      	ldr	r3, [pc, #212]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a34      	ldr	r2, [pc, #208]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800583e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005844:	f7fe fa64 	bl	8003d10 <HAL_GetTick>
 8005848:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800584a:	e008      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800584c:	f7fe fa60 	bl	8003d10 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b64      	cmp	r3, #100	; 0x64
 8005858:	d901      	bls.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e356      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800585e:	4b2c      	ldr	r3, [pc, #176]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0f0      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800586a:	4b28      	ldr	r3, [pc, #160]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d035      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	429a      	cmp	r2, r3
 8005886:	d02e      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005888:	4b20      	ldr	r3, [pc, #128]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005890:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005892:	4b1e      	ldr	r3, [pc, #120]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	4a1d      	ldr	r2, [pc, #116]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800589e:	4b1b      	ldr	r3, [pc, #108]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a2:	4a1a      	ldr	r2, [pc, #104]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80058aa:	4a18      	ldr	r2, [pc, #96]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058b0:	4b16      	ldr	r3, [pc, #88]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d114      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058bc:	f7fe fa28 	bl	8003d10 <HAL_GetTick>
 80058c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c2:	e00a      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058c4:	f7fe fa24 	bl	8003d10 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d901      	bls.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e318      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0ee      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058f2:	d111      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005900:	4b04      	ldr	r3, [pc, #16]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005902:	400b      	ands	r3, r1
 8005904:	4901      	ldr	r1, [pc, #4]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005906:	4313      	orrs	r3, r2
 8005908:	608b      	str	r3, [r1, #8]
 800590a:	e00b      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800590c:	40023800 	.word	0x40023800
 8005910:	40007000 	.word	0x40007000
 8005914:	0ffffcff 	.word	0x0ffffcff
 8005918:	4bb1      	ldr	r3, [pc, #708]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	4ab0      	ldr	r2, [pc, #704]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800591e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005922:	6093      	str	r3, [r2, #8]
 8005924:	4bae      	ldr	r3, [pc, #696]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005926:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005930:	49ab      	ldr	r1, [pc, #684]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005932:	4313      	orrs	r3, r2
 8005934:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b00      	cmp	r3, #0
 8005940:	d010      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005942:	4ba7      	ldr	r3, [pc, #668]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005948:	4aa5      	ldr	r2, [pc, #660]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800594a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800594e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005952:	4ba3      	ldr	r3, [pc, #652]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005954:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	49a0      	ldr	r1, [pc, #640]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005970:	4b9b      	ldr	r3, [pc, #620]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005976:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800597e:	4998      	ldr	r1, [pc, #608]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005992:	4b93      	ldr	r3, [pc, #588]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005998:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059a0:	498f      	ldr	r1, [pc, #572]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059b4:	4b8a      	ldr	r3, [pc, #552]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c2:	4987      	ldr	r1, [pc, #540]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059d6:	4b82      	ldr	r3, [pc, #520]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	497e      	ldr	r1, [pc, #504]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059f8:	4b79      	ldr	r3, [pc, #484]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fe:	f023 0203 	bic.w	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a06:	4976      	ldr	r1, [pc, #472]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a1a:	4b71      	ldr	r3, [pc, #452]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	f023 020c 	bic.w	r2, r3, #12
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a28:	496d      	ldr	r1, [pc, #436]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a3c:	4b68      	ldr	r3, [pc, #416]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4a:	4965      	ldr	r1, [pc, #404]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a5e:	4b60      	ldr	r3, [pc, #384]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6c:	495c      	ldr	r1, [pc, #368]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a80:	4b57      	ldr	r3, [pc, #348]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8e:	4954      	ldr	r1, [pc, #336]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005aa2:	4b4f      	ldr	r3, [pc, #316]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab0:	494b      	ldr	r1, [pc, #300]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ac4:	4b46      	ldr	r3, [pc, #280]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad2:	4943      	ldr	r1, [pc, #268]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005ae6:	4b3e      	ldr	r3, [pc, #248]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af4:	493a      	ldr	r1, [pc, #232]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b08:	4b35      	ldr	r3, [pc, #212]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b16:	4932      	ldr	r1, [pc, #200]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d011      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b2a:	4b2d      	ldr	r3, [pc, #180]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b38:	4929      	ldr	r1, [pc, #164]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b48:	d101      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b5a:	4b21      	ldr	r3, [pc, #132]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b60:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b68:	491d      	ldr	r1, [pc, #116]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00b      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b7c:	4b18      	ldr	r3, [pc, #96]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b8c:	4914      	ldr	r1, [pc, #80]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00b      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bb0:	490b      	ldr	r1, [pc, #44]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00f      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bc4:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd4:	4902      	ldr	r1, [pc, #8]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8005bdc:	e002      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005bde:	bf00      	nop
 8005be0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00b      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005bf0:	4b80      	ldr	r3, [pc, #512]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c00:	497c      	ldr	r1, [pc, #496]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d005      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c16:	f040 80d6 	bne.w	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c1a:	4b76      	ldr	r3, [pc, #472]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a75      	ldr	r2, [pc, #468]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005c20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c26:	f7fe f873 	bl	8003d10 <HAL_GetTick>
 8005c2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c2e:	f7fe f86f 	bl	8003d10 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b64      	cmp	r3, #100	; 0x64
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e165      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c40:	4b6c      	ldr	r3, [pc, #432]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1f0      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d021      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x560>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d11d      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c60:	4b64      	ldr	r3, [pc, #400]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c66:	0c1b      	lsrs	r3, r3, #16
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c6e:	4b61      	ldr	r3, [pc, #388]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c74:	0e1b      	lsrs	r3, r3, #24
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	019a      	lsls	r2, r3, #6
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	041b      	lsls	r3, r3, #16
 8005c86:	431a      	orrs	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	061b      	lsls	r3, r3, #24
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	071b      	lsls	r3, r3, #28
 8005c94:	4957      	ldr	r1, [pc, #348]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cb0:	d00a      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d02e      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cc6:	d129      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005cc8:	4b4a      	ldr	r3, [pc, #296]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cce:	0c1b      	lsrs	r3, r3, #16
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cd6:	4b47      	ldr	r3, [pc, #284]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cdc:	0f1b      	lsrs	r3, r3, #28
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	019a      	lsls	r2, r3, #6
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	061b      	lsls	r3, r3, #24
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	071b      	lsls	r3, r3, #28
 8005cfc:	493d      	ldr	r1, [pc, #244]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d04:	4b3b      	ldr	r3, [pc, #236]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d0a:	f023 021f 	bic.w	r2, r3, #31
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	3b01      	subs	r3, #1
 8005d14:	4937      	ldr	r1, [pc, #220]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01d      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d28:	4b32      	ldr	r3, [pc, #200]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d2e:	0e1b      	lsrs	r3, r3, #24
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d36:	4b2f      	ldr	r3, [pc, #188]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d3c:	0f1b      	lsrs	r3, r3, #28
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	019a      	lsls	r2, r3, #6
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	431a      	orrs	r2, r3
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	061b      	lsls	r3, r3, #24
 8005d56:	431a      	orrs	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	071b      	lsls	r3, r3, #28
 8005d5c:	4925      	ldr	r1, [pc, #148]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d011      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	019a      	lsls	r2, r3, #6
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	061b      	lsls	r3, r3, #24
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	071b      	lsls	r3, r3, #28
 8005d8c:	4919      	ldr	r1, [pc, #100]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d94:	4b17      	ldr	r3, [pc, #92]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a16      	ldr	r2, [pc, #88]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005d9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005da0:	f7fd ffb6 	bl	8003d10 <HAL_GetTick>
 8005da4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005da6:	e008      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005da8:	f7fd ffb2 	bl	8003d10 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b64      	cmp	r3, #100	; 0x64
 8005db4:	d901      	bls.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e0a8      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dba:	4b0e      	ldr	r3, [pc, #56]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	f040 809e 	bne.w	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005dce:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a08      	ldr	r2, [pc, #32]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dda:	f7fd ff99 	bl	8003d10 <HAL_GetTick>
 8005dde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005de0:	e00a      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005de2:	f7fd ff95 	bl	8003d10 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b64      	cmp	r3, #100	; 0x64
 8005dee:	d903      	bls.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e08b      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8005df4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005df8:	4b46      	ldr	r3, [pc, #280]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e04:	d0ed      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d009      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d02e      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d12a      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e2e:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e34:	0c1b      	lsrs	r3, r3, #16
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e3c:	4b35      	ldr	r3, [pc, #212]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e42:	0f1b      	lsrs	r3, r3, #28
 8005e44:	f003 0307 	and.w	r3, r3, #7
 8005e48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	019a      	lsls	r2, r3, #6
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	041b      	lsls	r3, r3, #16
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	061b      	lsls	r3, r3, #24
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	071b      	lsls	r3, r3, #28
 8005e62:	492c      	ldr	r1, [pc, #176]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e6a:	4b2a      	ldr	r3, [pc, #168]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	021b      	lsls	r3, r3, #8
 8005e7c:	4925      	ldr	r1, [pc, #148]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d022      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e98:	d11d      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e9a:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea0:	0e1b      	lsrs	r3, r3, #24
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ea8:	4b1a      	ldr	r3, [pc, #104]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eae:	0f1b      	lsrs	r3, r3, #28
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	019a      	lsls	r2, r3, #6
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	041b      	lsls	r3, r3, #16
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	061b      	lsls	r3, r3, #24
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	071b      	lsls	r3, r3, #28
 8005ece:	4911      	ldr	r1, [pc, #68]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ed6:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a0e      	ldr	r2, [pc, #56]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee2:	f7fd ff15 	bl	8003d10 <HAL_GetTick>
 8005ee6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ee8:	e008      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005eea:	f7fd ff11 	bl	8003d10 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b64      	cmp	r3, #100	; 0x64
 8005ef6:	d901      	bls.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e007      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005efc:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f08:	d1ef      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40023800 	.word	0x40023800

08005f18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e084      	b.n	8006034 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d106      	bne.n	8005f4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7fd f8ad 	bl	80030a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f60:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f6a:	d902      	bls.n	8005f72 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e002      	b.n	8005f78 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f80:	d007      	beq.n	8005f92 <HAL_SPI_Init+0x7a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f8a:	d002      	beq.n	8005f92 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10b      	bne.n	8005fb2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fa2:	d903      	bls.n	8005fac <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
 8005faa:	e002      	b.n	8005fb2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	ea42 0103 	orr.w	r1, r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	0c1b      	lsrs	r3, r3, #16
 8005ff2:	f003 0204 	and.w	r2, r3, #4
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	ea42 0103 	orr.w	r1, r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	430a      	orrs	r2, r1
 8006012:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69da      	ldr	r2, [r3, #28]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006022:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	099b      	lsrs	r3, r3, #6
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10f      	bne.n	8006080 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	099b      	lsrs	r3, r3, #6
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
    return;
 800607e:	e0d7      	b.n	8006230 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	085b      	lsrs	r3, r3, #1
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <HAL_SPI_IRQHandler+0x66>
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	09db      	lsrs	r3, r3, #7
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d004      	beq.n	80060a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
    return;
 80060a0:	e0c6      	b.n	8006230 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10c      	bne.n	80060c8 <HAL_SPI_IRQHandler+0x8c>
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	099b      	lsrs	r3, r3, #6
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <HAL_SPI_IRQHandler+0x8c>
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	0a1b      	lsrs	r3, r3, #8
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80b4 	beq.w	8006230 <HAL_SPI_IRQHandler+0x1f4>
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80ad 	beq.w	8006230 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	099b      	lsrs	r3, r3, #6
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d023      	beq.n	800612a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d011      	beq.n	8006112 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f2:	f043 0204 	orr.w	r2, r3, #4
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	e00b      	b.n	800612a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006112:	2300      	movs	r3, #0
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	693b      	ldr	r3, [r7, #16]
        return;
 8006128:	e082      	b.n	8006230 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	095b      	lsrs	r3, r3, #5
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d014      	beq.n	8006160 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613a:	f043 0201 	orr.w	r2, r3, #1
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	0a1b      	lsrs	r3, r3, #8
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006170:	f043 0208 	orr.w	r2, r3, #8
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006178:	2300      	movs	r3, #0
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	60bb      	str	r3, [r7, #8]
 8006184:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800618a:	2b00      	cmp	r3, #0
 800618c:	d04f      	beq.n	800622e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800619c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <HAL_SPI_IRQHandler+0x17e>
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d034      	beq.n	8006224 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0203 	bic.w	r2, r2, #3
 80061c8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d011      	beq.n	80061f6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d6:	4a18      	ldr	r2, [pc, #96]	; (8006238 <HAL_SPI_IRQHandler+0x1fc>)
 80061d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fe faa9 	bl	8004736 <HAL_DMA_Abort_IT>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d005      	beq.n	80061f6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d016      	beq.n	800622c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006202:	4a0d      	ldr	r2, [pc, #52]	; (8006238 <HAL_SPI_IRQHandler+0x1fc>)
 8006204:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	4618      	mov	r0, r3
 800620c:	f7fe fa93 	bl	8004736 <HAL_DMA_Abort_IT>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800621a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006222:	e003      	b.n	800622c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f809 	bl	800623c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800622a:	e000      	b.n	800622e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800622c:	bf00      	nop
    return;
 800622e:	bf00      	nop
  }
}
 8006230:	3720      	adds	r7, #32
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	08006251 	.word	0x08006251

0800623c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f7ff ffe5 	bl	800623c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006272:	bf00      	nop
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e01d      	b.n	80062c8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7fd f979 	bl	8003598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f000 fc9d 	bl	8006bf8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <HAL_TIM_Base_Start_IT+0x50>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b06      	cmp	r3, #6
 80062f8:	d00b      	beq.n	8006312 <HAL_TIM_Base_Start_IT+0x42>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006300:	d007      	beq.n	8006312 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0201 	orr.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	00010007 	.word	0x00010007

08006324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e01d      	b.n	8006372 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f815 	bl	800637a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3304      	adds	r3, #4
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f000 fc48 	bl	8006bf8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
	...

08006390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2201      	movs	r2, #1
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 ffc0 	bl	8007328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a17      	ldr	r2, [pc, #92]	; (800640c <HAL_TIM_PWM_Start+0x7c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d004      	beq.n	80063bc <HAL_TIM_PWM_Start+0x2c>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a16      	ldr	r2, [pc, #88]	; (8006410 <HAL_TIM_PWM_Start+0x80>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d101      	bne.n	80063c0 <HAL_TIM_PWM_Start+0x30>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <HAL_TIM_PWM_Start+0x32>
 80063c0:	2300      	movs	r3, #0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d007      	beq.n	80063d6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <HAL_TIM_PWM_Start+0x84>)
 80063de:	4013      	ands	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b06      	cmp	r3, #6
 80063e6:	d00b      	beq.n	8006400 <HAL_TIM_PWM_Start+0x70>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ee:	d007      	beq.n	8006400 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	40010000 	.word	0x40010000
 8006410:	40010400 	.word	0x40010400
 8006414:	00010007 	.word	0x00010007

08006418 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e07b      	b.n	8006524 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d106      	bne.n	8006446 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fc ffb7 	bl	80033b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2202      	movs	r2, #2
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6899      	ldr	r1, [r3, #8]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	4b34      	ldr	r3, [pc, #208]	; (800652c <HAL_TIM_Encoder_Init+0x114>)
 800645a:	400b      	ands	r3, r1
 800645c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3304      	adds	r3, #4
 8006466:	4619      	mov	r1, r3
 8006468:	4610      	mov	r0, r2
 800646a:	f000 fbc5 	bl	8006bf8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4b27      	ldr	r3, [pc, #156]	; (8006530 <HAL_TIM_Encoder_Init+0x118>)
 8006494:	4013      	ands	r3, r2
 8006496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	021b      	lsls	r3, r3, #8
 80064a2:	4313      	orrs	r3, r2
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4b21      	ldr	r3, [pc, #132]	; (8006534 <HAL_TIM_Encoder_Init+0x11c>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4b20      	ldr	r3, [pc, #128]	; (8006538 <HAL_TIM_Encoder_Init+0x120>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	021b      	lsls	r3, r3, #8
 80064c4:	4313      	orrs	r3, r2
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	011a      	lsls	r2, r3, #4
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	031b      	lsls	r3, r3, #12
 80064d8:	4313      	orrs	r3, r2
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80064e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80064ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	011b      	lsls	r3, r3, #4
 80064fa:	4313      	orrs	r3, r2
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	fffebff8 	.word	0xfffebff8
 8006530:	fffffcfc 	.word	0xfffffcfc
 8006534:	fffff3f3 	.word	0xfffff3f3
 8006538:	ffff0f0f 	.word	0xffff0f0f

0800653c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_TIM_Encoder_Start+0x18>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b04      	cmp	r3, #4
 8006550:	d008      	beq.n	8006564 <HAL_TIM_Encoder_Start+0x28>
 8006552:	e00f      	b.n	8006574 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2201      	movs	r2, #1
 800655a:	2100      	movs	r1, #0
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fee3 	bl	8007328 <TIM_CCxChannelCmd>
      break;
 8006562:	e016      	b.n	8006592 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2201      	movs	r2, #1
 800656a:	2104      	movs	r1, #4
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fedb 	bl	8007328 <TIM_CCxChannelCmd>
      break;
 8006572:	e00e      	b.n	8006592 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2201      	movs	r2, #1
 800657a:	2100      	movs	r1, #0
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fed3 	bl	8007328 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2201      	movs	r2, #1
 8006588:	2104      	movs	r1, #4
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fecc 	bl	8007328 <TIM_CCxChannelCmd>
      break;
 8006590:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0201 	orr.w	r2, r2, #1
 80065a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d122      	bne.n	8006608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d11b      	bne.n	8006608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0202 	mvn.w	r2, #2
 80065d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fae4 	bl	8006bbc <HAL_TIM_IC_CaptureCallback>
 80065f4:	e005      	b.n	8006602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fad6 	bl	8006ba8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fae7 	bl	8006bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b04      	cmp	r3, #4
 8006614:	d122      	bne.n	800665c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b04      	cmp	r3, #4
 8006622:	d11b      	bne.n	800665c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0204 	mvn.w	r2, #4
 800662c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2202      	movs	r2, #2
 8006632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 faba 	bl	8006bbc <HAL_TIM_IC_CaptureCallback>
 8006648:	e005      	b.n	8006656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 faac 	bl	8006ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fabd 	bl	8006bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b08      	cmp	r3, #8
 8006668:	d122      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 0308 	and.w	r3, r3, #8
 8006674:	2b08      	cmp	r3, #8
 8006676:	d11b      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0208 	mvn.w	r2, #8
 8006680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2204      	movs	r2, #4
 8006686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa90 	bl	8006bbc <HAL_TIM_IC_CaptureCallback>
 800669c:	e005      	b.n	80066aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa82 	bl	8006ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fa93 	bl	8006bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f003 0310 	and.w	r3, r3, #16
 80066ba:	2b10      	cmp	r3, #16
 80066bc:	d122      	bne.n	8006704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	d11b      	bne.n	8006704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f06f 0210 	mvn.w	r2, #16
 80066d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2208      	movs	r2, #8
 80066da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa66 	bl	8006bbc <HAL_TIM_IC_CaptureCallback>
 80066f0:	e005      	b.n	80066fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fa58 	bl	8006ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fa69 	bl	8006bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b01      	cmp	r3, #1
 8006710:	d10e      	bne.n	8006730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b01      	cmp	r3, #1
 800671e:	d107      	bne.n	8006730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0201 	mvn.w	r2, #1
 8006728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fa fa20 	bl	8000b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673a:	2b80      	cmp	r3, #128	; 0x80
 800673c:	d10e      	bne.n	800675c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006748:	2b80      	cmp	r3, #128	; 0x80
 800674a:	d107      	bne.n	800675c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fef0 	bl	800753c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800676a:	d10e      	bne.n	800678a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006776:	2b80      	cmp	r3, #128	; 0x80
 8006778:	d107      	bne.n	800678a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fee3 	bl	8007550 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b40      	cmp	r3, #64	; 0x40
 8006796:	d10e      	bne.n	80067b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	d107      	bne.n	80067b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fa17 	bl	8006be4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d10e      	bne.n	80067e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d107      	bne.n	80067e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f06f 0220 	mvn.w	r2, #32
 80067da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fea3 	bl	8007528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006802:	2302      	movs	r3, #2
 8006804:	e105      	b.n	8006a12 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2202      	movs	r2, #2
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b14      	cmp	r3, #20
 800681a:	f200 80f0 	bhi.w	80069fe <HAL_TIM_PWM_ConfigChannel+0x212>
 800681e:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	08006879 	.word	0x08006879
 8006828:	080069ff 	.word	0x080069ff
 800682c:	080069ff 	.word	0x080069ff
 8006830:	080069ff 	.word	0x080069ff
 8006834:	080068b9 	.word	0x080068b9
 8006838:	080069ff 	.word	0x080069ff
 800683c:	080069ff 	.word	0x080069ff
 8006840:	080069ff 	.word	0x080069ff
 8006844:	080068fb 	.word	0x080068fb
 8006848:	080069ff 	.word	0x080069ff
 800684c:	080069ff 	.word	0x080069ff
 8006850:	080069ff 	.word	0x080069ff
 8006854:	0800693b 	.word	0x0800693b
 8006858:	080069ff 	.word	0x080069ff
 800685c:	080069ff 	.word	0x080069ff
 8006860:	080069ff 	.word	0x080069ff
 8006864:	0800697d 	.word	0x0800697d
 8006868:	080069ff 	.word	0x080069ff
 800686c:	080069ff 	.word	0x080069ff
 8006870:	080069ff 	.word	0x080069ff
 8006874:	080069bd 	.word	0x080069bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68b9      	ldr	r1, [r7, #8]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fa5a 	bl	8006d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0208 	orr.w	r2, r2, #8
 8006892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0204 	bic.w	r2, r2, #4
 80068a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6999      	ldr	r1, [r3, #24]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	691a      	ldr	r2, [r3, #16]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	619a      	str	r2, [r3, #24]
      break;
 80068b6:	e0a3      	b.n	8006a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 faac 	bl	8006e1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699a      	ldr	r2, [r3, #24]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6999      	ldr	r1, [r3, #24]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	021a      	lsls	r2, r3, #8
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	619a      	str	r2, [r3, #24]
      break;
 80068f8:	e082      	b.n	8006a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fb03 	bl	8006f0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69da      	ldr	r2, [r3, #28]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0208 	orr.w	r2, r2, #8
 8006914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69da      	ldr	r2, [r3, #28]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0204 	bic.w	r2, r2, #4
 8006924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69d9      	ldr	r1, [r3, #28]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	61da      	str	r2, [r3, #28]
      break;
 8006938:	e062      	b.n	8006a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	4618      	mov	r0, r3
 8006942:	f000 fb59 	bl	8006ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69da      	ldr	r2, [r3, #28]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69da      	ldr	r2, [r3, #28]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69d9      	ldr	r1, [r3, #28]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	021a      	lsls	r2, r3, #8
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	61da      	str	r2, [r3, #28]
      break;
 800697a:	e041      	b.n	8006a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68b9      	ldr	r1, [r7, #8]
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fb90 	bl	80070a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0208 	orr.w	r2, r2, #8
 8006996:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0204 	bic.w	r2, r2, #4
 80069a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	691a      	ldr	r2, [r3, #16]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069ba:	e021      	b.n	8006a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68b9      	ldr	r1, [r7, #8]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fbc2 	bl	800714c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	021a      	lsls	r2, r3, #8
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069fc:	e000      	b.n	8006a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80069fe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop

08006a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_TIM_ConfigClockSource+0x18>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e0b3      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x180>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4b55      	ldr	r3, [pc, #340]	; (8006ba4 <HAL_TIM_ConfigClockSource+0x188>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a6c:	d03e      	beq.n	8006aec <HAL_TIM_ConfigClockSource+0xd0>
 8006a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a72:	f200 8087 	bhi.w	8006b84 <HAL_TIM_ConfigClockSource+0x168>
 8006a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a7a:	f000 8085 	beq.w	8006b88 <HAL_TIM_ConfigClockSource+0x16c>
 8006a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a82:	d87f      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x168>
 8006a84:	2b70      	cmp	r3, #112	; 0x70
 8006a86:	d01a      	beq.n	8006abe <HAL_TIM_ConfigClockSource+0xa2>
 8006a88:	2b70      	cmp	r3, #112	; 0x70
 8006a8a:	d87b      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x168>
 8006a8c:	2b60      	cmp	r3, #96	; 0x60
 8006a8e:	d050      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0x116>
 8006a90:	2b60      	cmp	r3, #96	; 0x60
 8006a92:	d877      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x168>
 8006a94:	2b50      	cmp	r3, #80	; 0x50
 8006a96:	d03c      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0xf6>
 8006a98:	2b50      	cmp	r3, #80	; 0x50
 8006a9a:	d873      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x168>
 8006a9c:	2b40      	cmp	r3, #64	; 0x40
 8006a9e:	d058      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x136>
 8006aa0:	2b40      	cmp	r3, #64	; 0x40
 8006aa2:	d86f      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x168>
 8006aa4:	2b30      	cmp	r3, #48	; 0x30
 8006aa6:	d064      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0x156>
 8006aa8:	2b30      	cmp	r3, #48	; 0x30
 8006aaa:	d86b      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x168>
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d060      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0x156>
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d867      	bhi.n	8006b84 <HAL_TIM_ConfigClockSource+0x168>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d05c      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0x156>
 8006ab8:	2b10      	cmp	r3, #16
 8006aba:	d05a      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006abc:	e062      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	6899      	ldr	r1, [r3, #8]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f000 fc0b 	bl	80072e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ae0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	609a      	str	r2, [r3, #8]
      break;
 8006aea:	e04e      	b.n	8006b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6899      	ldr	r1, [r3, #8]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f000 fbf4 	bl	80072e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b0e:	609a      	str	r2, [r3, #8]
      break;
 8006b10:	e03b      	b.n	8006b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6859      	ldr	r1, [r3, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f000 fb68 	bl	80071f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2150      	movs	r1, #80	; 0x50
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fbc1 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006b30:	e02b      	b.n	8006b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	6859      	ldr	r1, [r3, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f000 fb87 	bl	8007252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2160      	movs	r1, #96	; 0x60
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fbb1 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006b50:	e01b      	b.n	8006b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	6859      	ldr	r1, [r3, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f000 fb48 	bl	80071f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2140      	movs	r1, #64	; 0x40
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fba1 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006b70:	e00b      	b.n	8006b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f000 fb98 	bl	80072b2 <TIM_ITRx_SetConfig>
      break;
 8006b82:	e002      	b.n	8006b8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b84:	bf00      	nop
 8006b86:	e000      	b.n	8006b8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	fffeff88 	.word	0xfffeff88

08006ba8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a40      	ldr	r2, [pc, #256]	; (8006d0c <TIM_Base_SetConfig+0x114>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d013      	beq.n	8006c38 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c16:	d00f      	beq.n	8006c38 <TIM_Base_SetConfig+0x40>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a3d      	ldr	r2, [pc, #244]	; (8006d10 <TIM_Base_SetConfig+0x118>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <TIM_Base_SetConfig+0x40>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a3c      	ldr	r2, [pc, #240]	; (8006d14 <TIM_Base_SetConfig+0x11c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d007      	beq.n	8006c38 <TIM_Base_SetConfig+0x40>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a3b      	ldr	r2, [pc, #236]	; (8006d18 <TIM_Base_SetConfig+0x120>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d003      	beq.n	8006c38 <TIM_Base_SetConfig+0x40>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a3a      	ldr	r2, [pc, #232]	; (8006d1c <TIM_Base_SetConfig+0x124>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d108      	bne.n	8006c4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a2f      	ldr	r2, [pc, #188]	; (8006d0c <TIM_Base_SetConfig+0x114>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d02b      	beq.n	8006caa <TIM_Base_SetConfig+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c58:	d027      	beq.n	8006caa <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a2c      	ldr	r2, [pc, #176]	; (8006d10 <TIM_Base_SetConfig+0x118>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d023      	beq.n	8006caa <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a2b      	ldr	r2, [pc, #172]	; (8006d14 <TIM_Base_SetConfig+0x11c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d01f      	beq.n	8006caa <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a2a      	ldr	r2, [pc, #168]	; (8006d18 <TIM_Base_SetConfig+0x120>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d01b      	beq.n	8006caa <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a29      	ldr	r2, [pc, #164]	; (8006d1c <TIM_Base_SetConfig+0x124>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d017      	beq.n	8006caa <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a28      	ldr	r2, [pc, #160]	; (8006d20 <TIM_Base_SetConfig+0x128>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d013      	beq.n	8006caa <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a27      	ldr	r2, [pc, #156]	; (8006d24 <TIM_Base_SetConfig+0x12c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00f      	beq.n	8006caa <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a26      	ldr	r2, [pc, #152]	; (8006d28 <TIM_Base_SetConfig+0x130>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00b      	beq.n	8006caa <TIM_Base_SetConfig+0xb2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a25      	ldr	r2, [pc, #148]	; (8006d2c <TIM_Base_SetConfig+0x134>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d007      	beq.n	8006caa <TIM_Base_SetConfig+0xb2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a24      	ldr	r2, [pc, #144]	; (8006d30 <TIM_Base_SetConfig+0x138>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d003      	beq.n	8006caa <TIM_Base_SetConfig+0xb2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a23      	ldr	r2, [pc, #140]	; (8006d34 <TIM_Base_SetConfig+0x13c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d108      	bne.n	8006cbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a0a      	ldr	r2, [pc, #40]	; (8006d0c <TIM_Base_SetConfig+0x114>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_Base_SetConfig+0xf8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a0c      	ldr	r2, [pc, #48]	; (8006d1c <TIM_Base_SetConfig+0x124>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d103      	bne.n	8006cf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	615a      	str	r2, [r3, #20]
}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40010000 	.word	0x40010000
 8006d10:	40000400 	.word	0x40000400
 8006d14:	40000800 	.word	0x40000800
 8006d18:	40000c00 	.word	0x40000c00
 8006d1c:	40010400 	.word	0x40010400
 8006d20:	40014000 	.word	0x40014000
 8006d24:	40014400 	.word	0x40014400
 8006d28:	40014800 	.word	0x40014800
 8006d2c:	40001800 	.word	0x40001800
 8006d30:	40001c00 	.word	0x40001c00
 8006d34:	40002000 	.word	0x40002000

08006d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	f023 0201 	bic.w	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4b2b      	ldr	r3, [pc, #172]	; (8006e10 <TIM_OC1_SetConfig+0xd8>)
 8006d64:	4013      	ands	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0303 	bic.w	r3, r3, #3
 8006d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f023 0302 	bic.w	r3, r3, #2
 8006d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a21      	ldr	r2, [pc, #132]	; (8006e14 <TIM_OC1_SetConfig+0xdc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d003      	beq.n	8006d9c <TIM_OC1_SetConfig+0x64>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a20      	ldr	r2, [pc, #128]	; (8006e18 <TIM_OC1_SetConfig+0xe0>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d10c      	bne.n	8006db6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f023 0308 	bic.w	r3, r3, #8
 8006da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f023 0304 	bic.w	r3, r3, #4
 8006db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a16      	ldr	r2, [pc, #88]	; (8006e14 <TIM_OC1_SetConfig+0xdc>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d003      	beq.n	8006dc6 <TIM_OC1_SetConfig+0x8e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a15      	ldr	r2, [pc, #84]	; (8006e18 <TIM_OC1_SetConfig+0xe0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d111      	bne.n	8006dea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	621a      	str	r2, [r3, #32]
}
 8006e04:	bf00      	nop
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	fffeff8f 	.word	0xfffeff8f
 8006e14:	40010000 	.word	0x40010000
 8006e18:	40010400 	.word	0x40010400

08006e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	f023 0210 	bic.w	r2, r3, #16
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4b2e      	ldr	r3, [pc, #184]	; (8006f00 <TIM_OC2_SetConfig+0xe4>)
 8006e48:	4013      	ands	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	021b      	lsls	r3, r3, #8
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f023 0320 	bic.w	r3, r3, #32
 8006e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	011b      	lsls	r3, r3, #4
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a23      	ldr	r2, [pc, #140]	; (8006f04 <TIM_OC2_SetConfig+0xe8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_OC2_SetConfig+0x68>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a22      	ldr	r2, [pc, #136]	; (8006f08 <TIM_OC2_SetConfig+0xec>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d10d      	bne.n	8006ea0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	011b      	lsls	r3, r3, #4
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a18      	ldr	r2, [pc, #96]	; (8006f04 <TIM_OC2_SetConfig+0xe8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <TIM_OC2_SetConfig+0x94>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a17      	ldr	r2, [pc, #92]	; (8006f08 <TIM_OC2_SetConfig+0xec>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d113      	bne.n	8006ed8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	621a      	str	r2, [r3, #32]
}
 8006ef2:	bf00      	nop
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	feff8fff 	.word	0xfeff8fff
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40010400 	.word	0x40010400

08006f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4b2d      	ldr	r3, [pc, #180]	; (8006fec <TIM_OC3_SetConfig+0xe0>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0303 	bic.w	r3, r3, #3
 8006f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	021b      	lsls	r3, r3, #8
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a22      	ldr	r2, [pc, #136]	; (8006ff0 <TIM_OC3_SetConfig+0xe4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_OC3_SetConfig+0x66>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a21      	ldr	r2, [pc, #132]	; (8006ff4 <TIM_OC3_SetConfig+0xe8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d10d      	bne.n	8006f8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a17      	ldr	r2, [pc, #92]	; (8006ff0 <TIM_OC3_SetConfig+0xe4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d003      	beq.n	8006f9e <TIM_OC3_SetConfig+0x92>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a16      	ldr	r2, [pc, #88]	; (8006ff4 <TIM_OC3_SetConfig+0xe8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d113      	bne.n	8006fc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	621a      	str	r2, [r3, #32]
}
 8006fe0:	bf00      	nop
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	fffeff8f 	.word	0xfffeff8f
 8006ff0:	40010000 	.word	0x40010000
 8006ff4:	40010400 	.word	0x40010400

08006ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	4b1e      	ldr	r3, [pc, #120]	; (800709c <TIM_OC4_SetConfig+0xa4>)
 8007024:	4013      	ands	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	031b      	lsls	r3, r3, #12
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a13      	ldr	r2, [pc, #76]	; (80070a0 <TIM_OC4_SetConfig+0xa8>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_OC4_SetConfig+0x68>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a12      	ldr	r2, [pc, #72]	; (80070a4 <TIM_OC4_SetConfig+0xac>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d109      	bne.n	8007074 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	019b      	lsls	r3, r3, #6
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	621a      	str	r2, [r3, #32]
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	feff8fff 	.word	0xfeff8fff
 80070a0:	40010000 	.word	0x40010000
 80070a4:	40010400 	.word	0x40010400

080070a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4b1b      	ldr	r3, [pc, #108]	; (8007140 <TIM_OC5_SetConfig+0x98>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	041b      	lsls	r3, r3, #16
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a12      	ldr	r2, [pc, #72]	; (8007144 <TIM_OC5_SetConfig+0x9c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d003      	beq.n	8007106 <TIM_OC5_SetConfig+0x5e>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a11      	ldr	r2, [pc, #68]	; (8007148 <TIM_OC5_SetConfig+0xa0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d109      	bne.n	800711a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800710c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	621a      	str	r2, [r3, #32]
}
 8007134:	bf00      	nop
 8007136:	371c      	adds	r7, #28
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	fffeff8f 	.word	0xfffeff8f
 8007144:	40010000 	.word	0x40010000
 8007148:	40010400 	.word	0x40010400

0800714c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <TIM_OC6_SetConfig+0x9c>)
 8007178:	4013      	ands	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	021b      	lsls	r3, r3, #8
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4313      	orrs	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800718e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	051b      	lsls	r3, r3, #20
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	4313      	orrs	r3, r2
 800719a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a13      	ldr	r2, [pc, #76]	; (80071ec <TIM_OC6_SetConfig+0xa0>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_OC6_SetConfig+0x60>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a12      	ldr	r2, [pc, #72]	; (80071f0 <TIM_OC6_SetConfig+0xa4>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d109      	bne.n	80071c0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	029b      	lsls	r3, r3, #10
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	feff8fff 	.word	0xfeff8fff
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40010400 	.word	0x40010400

080071f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f023 0201 	bic.w	r2, r3, #1
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800721e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f023 030a 	bic.w	r3, r3, #10
 8007230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007252:	b480      	push	{r7}
 8007254:	b087      	sub	sp, #28
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f023 0210 	bic.w	r2, r3, #16
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800727c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	031b      	lsls	r3, r3, #12
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800728e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f043 0307 	orr.w	r3, r3, #7
 80072d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	609a      	str	r2, [r3, #8]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	021a      	lsls	r2, r3, #8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	431a      	orrs	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4313      	orrs	r3, r2
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	609a      	str	r2, [r3, #8]
}
 800731c:	bf00      	nop
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	2201      	movs	r2, #1
 800733c:	fa02 f303 	lsl.w	r3, r2, r3
 8007340:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a1a      	ldr	r2, [r3, #32]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	43db      	mvns	r3, r3
 800734a:	401a      	ands	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1a      	ldr	r2, [r3, #32]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	fa01 f303 	lsl.w	r3, r1, r3
 8007360:	431a      	orrs	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	621a      	str	r2, [r3, #32]
}
 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
	...

08007374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007388:	2302      	movs	r3, #2
 800738a:	e045      	b.n	8007418 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a1c      	ldr	r2, [pc, #112]	; (8007424 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d004      	beq.n	80073c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a1b      	ldr	r2, [pc, #108]	; (8007428 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d108      	bne.n	80073d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ea:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	40010000 	.word	0x40010000
 8007428:	40010400 	.word	0x40010400

0800742c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007444:	2302      	movs	r3, #2
 8007446:	e065      	b.n	8007514 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	4313      	orrs	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4313      	orrs	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	041b      	lsls	r3, r3, #16
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a16      	ldr	r2, [pc, #88]	; (8007520 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d004      	beq.n	80074d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a14      	ldr	r2, [pc, #80]	; (8007524 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d115      	bne.n	8007502 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	051b      	lsls	r3, r3, #20
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	4313      	orrs	r3, r2
 8007500:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	40010000 	.word	0x40010000
 8007524:	40010400 	.word	0x40010400

08007528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e040      	b.n	80075f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800757a:	2b00      	cmp	r3, #0
 800757c:	d106      	bne.n	800758c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fc f9b2 	bl	80038f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2224      	movs	r2, #36	; 0x24
 8007590:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0201 	bic.w	r2, r2, #1
 80075a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa8e 	bl	8007ac4 <UART_SetConfig>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e022      	b.n	80075f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fd28 	bl	8008010 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689a      	ldr	r2, [r3, #8]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075de:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0201 	orr.w	r2, r2, #1
 80075ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fdaf 	bl	8008154 <UART_CheckIdleState>
 80075f6:	4603      	mov	r3, r0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	; 0x28
 8007604:	af02      	add	r7, sp, #8
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	603b      	str	r3, [r7, #0]
 800760c:	4613      	mov	r3, r2
 800760e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007614:	2b20      	cmp	r3, #32
 8007616:	d17f      	bne.n	8007718 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_UART_Transmit+0x24>
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e078      	b.n	800771a <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800762e:	2b01      	cmp	r3, #1
 8007630:	d101      	bne.n	8007636 <HAL_UART_Transmit+0x36>
 8007632:	2302      	movs	r3, #2
 8007634:	e071      	b.n	800771a <HAL_UART_Transmit+0x11a>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2221      	movs	r2, #33	; 0x21
 8007648:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800764a:	f7fc fb61 	bl	8003d10 <HAL_GetTick>
 800764e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	88fa      	ldrh	r2, [r7, #6]
 8007654:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	88fa      	ldrh	r2, [r7, #6]
 800765c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007668:	d108      	bne.n	800767c <HAL_UART_Transmit+0x7c>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d104      	bne.n	800767c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8007672:	2300      	movs	r3, #0
 8007674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	61bb      	str	r3, [r7, #24]
 800767a:	e003      	b.n	8007684 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007680:	2300      	movs	r3, #0
 8007682:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007684:	e02c      	b.n	80076e0 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2200      	movs	r2, #0
 800768e:	2180      	movs	r1, #128	; 0x80
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 fd8e 	bl	80081b2 <UART_WaitOnFlagUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e03c      	b.n	800771a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10b      	bne.n	80076be <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	3302      	adds	r3, #2
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	e007      	b.n	80076ce <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	781a      	ldrb	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	3301      	adds	r3, #1
 80076cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	3b01      	subs	r3, #1
 80076d8:	b29a      	uxth	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1cc      	bne.n	8007686 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2200      	movs	r2, #0
 80076f4:	2140      	movs	r1, #64	; 0x40
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fd5b 	bl	80081b2 <UART_WaitOnFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e009      	b.n	800771a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2220      	movs	r2, #32
 800770a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	e000      	b.n	800771a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8007718:	2302      	movs	r3, #2
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	3720      	adds	r7, #32
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	4613      	mov	r3, r2
 8007730:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007736:	2b20      	cmp	r3, #32
 8007738:	f040 808a 	bne.w	8007850 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <HAL_UART_Receive_IT+0x24>
 8007742:	88fb      	ldrh	r3, [r7, #6]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d101      	bne.n	800774c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e082      	b.n	8007852 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_UART_Receive_IT+0x36>
 8007756:	2302      	movs	r3, #2
 8007758:	e07b      	b.n	8007852 <HAL_UART_Receive_IT+0x12e>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	88fa      	ldrh	r2, [r7, #6]
 800776c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	88fa      	ldrh	r2, [r7, #6]
 8007774:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007786:	d10e      	bne.n	80077a6 <HAL_UART_Receive_IT+0x82>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <HAL_UART_Receive_IT+0x78>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007796:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800779a:	e02d      	b.n	80077f8 <HAL_UART_Receive_IT+0xd4>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	22ff      	movs	r2, #255	; 0xff
 80077a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077a4:	e028      	b.n	80077f8 <HAL_UART_Receive_IT+0xd4>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10d      	bne.n	80077ca <HAL_UART_Receive_IT+0xa6>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d104      	bne.n	80077c0 <HAL_UART_Receive_IT+0x9c>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	22ff      	movs	r2, #255	; 0xff
 80077ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077be:	e01b      	b.n	80077f8 <HAL_UART_Receive_IT+0xd4>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	227f      	movs	r2, #127	; 0x7f
 80077c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077c8:	e016      	b.n	80077f8 <HAL_UART_Receive_IT+0xd4>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077d2:	d10d      	bne.n	80077f0 <HAL_UART_Receive_IT+0xcc>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <HAL_UART_Receive_IT+0xc2>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	227f      	movs	r2, #127	; 0x7f
 80077e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077e4:	e008      	b.n	80077f8 <HAL_UART_Receive_IT+0xd4>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	223f      	movs	r2, #63	; 0x3f
 80077ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077ee:	e003      	b.n	80077f8 <HAL_UART_Receive_IT+0xd4>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2222      	movs	r2, #34	; 0x22
 8007802:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0201 	orr.w	r2, r2, #1
 8007812:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800781c:	d107      	bne.n	800782e <HAL_UART_Receive_IT+0x10a>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d103      	bne.n	800782e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4a0d      	ldr	r2, [pc, #52]	; (8007860 <HAL_UART_Receive_IT+0x13c>)
 800782a:	661a      	str	r2, [r3, #96]	; 0x60
 800782c:	e002      	b.n	8007834 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	4a0c      	ldr	r2, [pc, #48]	; (8007864 <HAL_UART_Receive_IT+0x140>)
 8007832:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800784a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	e000      	b.n	8007852 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007850:	2302      	movs	r3, #2
  }
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	08008387 	.word	0x08008387
 8007864:	080082e1 	.word	0x080082e1

08007868 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	f003 030f 	and.w	r3, r3, #15
 800788e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d113      	bne.n	80078be <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00e      	beq.n	80078be <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d009      	beq.n	80078be <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 80ea 	beq.w	8007a88 <HAL_UART_IRQHandler+0x220>
      {
        huart->RxISR(huart);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	4798      	blx	r3
      }
      return;
 80078bc:	e0e4      	b.n	8007a88 <HAL_UART_IRQHandler+0x220>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 80c0 	beq.w	8007a46 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d105      	bne.n	80078dc <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80b5 	beq.w	8007a46 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00e      	beq.n	8007904 <HAL_UART_IRQHandler+0x9c>
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d009      	beq.n	8007904 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2201      	movs	r2, #1
 80078f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078fc:	f043 0201 	orr.w	r2, r3, #1
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00e      	beq.n	800792c <HAL_UART_IRQHandler+0xc4>
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d009      	beq.n	800792c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2202      	movs	r2, #2
 800791e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007924:	f043 0204 	orr.w	r2, r3, #4
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	f003 0304 	and.w	r3, r3, #4
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00e      	beq.n	8007954 <HAL_UART_IRQHandler+0xec>
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	d009      	beq.n	8007954 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2204      	movs	r2, #4
 8007946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800794c:	f043 0202 	orr.w	r2, r3, #2
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	f003 0308 	and.w	r3, r3, #8
 800795a:	2b00      	cmp	r3, #0
 800795c:	d013      	beq.n	8007986 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b00      	cmp	r3, #0
 8007966:	d104      	bne.n	8007972 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800796e:	2b00      	cmp	r3, #0
 8007970:	d009      	beq.n	8007986 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2208      	movs	r2, #8
 8007978:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800797e:	f043 0208 	orr.w	r2, r3, #8
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d07e      	beq.n	8007a8c <HAL_UART_IRQHandler+0x224>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00c      	beq.n	80079b2 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d007      	beq.n	80079b2 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079b6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c2:	2b40      	cmp	r3, #64	; 0x40
 80079c4:	d004      	beq.n	80079d0 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d031      	beq.n	8007a34 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fc36 	bl	8008242 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d123      	bne.n	8007a2c <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d013      	beq.n	8007a24 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a00:	4a25      	ldr	r2, [pc, #148]	; (8007a98 <HAL_UART_IRQHandler+0x230>)
 8007a02:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fc fe94 	bl	8004736 <HAL_DMA_Abort_IT>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d016      	beq.n	8007a42 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007a1e:	4610      	mov	r0, r2
 8007a20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a22:	e00e      	b.n	8007a42 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f843 	bl	8007ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2a:	e00a      	b.n	8007a42 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f83f 	bl	8007ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a32:	e006      	b.n	8007a42 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f83b 	bl	8007ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007a40:	e024      	b.n	8007a8c <HAL_UART_IRQHandler+0x224>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a42:	bf00      	nop
    return;
 8007a44:	e022      	b.n	8007a8c <HAL_UART_IRQHandler+0x224>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00d      	beq.n	8007a6c <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d008      	beq.n	8007a6c <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d016      	beq.n	8007a90 <HAL_UART_IRQHandler+0x228>
    {
      huart->TxISR(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
    }
    return;
 8007a6a:	e011      	b.n	8007a90 <HAL_UART_IRQHandler+0x228>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00d      	beq.n	8007a92 <HAL_UART_IRQHandler+0x22a>
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d008      	beq.n	8007a92 <HAL_UART_IRQHandler+0x22a>
  {
    UART_EndTransmit_IT(huart);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fc14 	bl	80082ae <UART_EndTransmit_IT>
    return;
 8007a86:	e004      	b.n	8007a92 <HAL_UART_IRQHandler+0x22a>
      return;
 8007a88:	bf00      	nop
 8007a8a:	e002      	b.n	8007a92 <HAL_UART_IRQHandler+0x22a>
    return;
 8007a8c:	bf00      	nop
 8007a8e:	e000      	b.n	8007a92 <HAL_UART_IRQHandler+0x22a>
    return;
 8007a90:	bf00      	nop
  }

}
 8007a92:	3720      	adds	r7, #32
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	08008283 	.word	0x08008283

08007a9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b088      	sub	sp, #32
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	431a      	orrs	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4ba7      	ldr	r3, [pc, #668]	; (8007d90 <UART_SetConfig+0x2cc>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6812      	ldr	r2, [r2, #0]
 8007afa:	6939      	ldr	r1, [r7, #16]
 8007afc:	430b      	orrs	r3, r1
 8007afe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a1b      	ldr	r3, [r3, #32]
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a95      	ldr	r2, [pc, #596]	; (8007d94 <UART_SetConfig+0x2d0>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d120      	bne.n	8007b86 <UART_SetConfig+0xc2>
 8007b44:	4b94      	ldr	r3, [pc, #592]	; (8007d98 <UART_SetConfig+0x2d4>)
 8007b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4a:	f003 0303 	and.w	r3, r3, #3
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d816      	bhi.n	8007b80 <UART_SetConfig+0xbc>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <UART_SetConfig+0x94>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007b75 	.word	0x08007b75
 8007b60:	08007b6f 	.word	0x08007b6f
 8007b64:	08007b7b 	.word	0x08007b7b
 8007b68:	2301      	movs	r3, #1
 8007b6a:	77fb      	strb	r3, [r7, #31]
 8007b6c:	e14f      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007b6e:	2302      	movs	r3, #2
 8007b70:	77fb      	strb	r3, [r7, #31]
 8007b72:	e14c      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007b74:	2304      	movs	r3, #4
 8007b76:	77fb      	strb	r3, [r7, #31]
 8007b78:	e149      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007b7a:	2308      	movs	r3, #8
 8007b7c:	77fb      	strb	r3, [r7, #31]
 8007b7e:	e146      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007b80:	2310      	movs	r3, #16
 8007b82:	77fb      	strb	r3, [r7, #31]
 8007b84:	e143      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a84      	ldr	r2, [pc, #528]	; (8007d9c <UART_SetConfig+0x2d8>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d132      	bne.n	8007bf6 <UART_SetConfig+0x132>
 8007b90:	4b81      	ldr	r3, [pc, #516]	; (8007d98 <UART_SetConfig+0x2d4>)
 8007b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b96:	f003 030c 	and.w	r3, r3, #12
 8007b9a:	2b0c      	cmp	r3, #12
 8007b9c:	d828      	bhi.n	8007bf0 <UART_SetConfig+0x12c>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <UART_SetConfig+0xe0>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bd9 	.word	0x08007bd9
 8007ba8:	08007bf1 	.word	0x08007bf1
 8007bac:	08007bf1 	.word	0x08007bf1
 8007bb0:	08007bf1 	.word	0x08007bf1
 8007bb4:	08007be5 	.word	0x08007be5
 8007bb8:	08007bf1 	.word	0x08007bf1
 8007bbc:	08007bf1 	.word	0x08007bf1
 8007bc0:	08007bf1 	.word	0x08007bf1
 8007bc4:	08007bdf 	.word	0x08007bdf
 8007bc8:	08007bf1 	.word	0x08007bf1
 8007bcc:	08007bf1 	.word	0x08007bf1
 8007bd0:	08007bf1 	.word	0x08007bf1
 8007bd4:	08007beb 	.word	0x08007beb
 8007bd8:	2300      	movs	r3, #0
 8007bda:	77fb      	strb	r3, [r7, #31]
 8007bdc:	e117      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007bde:	2302      	movs	r3, #2
 8007be0:	77fb      	strb	r3, [r7, #31]
 8007be2:	e114      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007be4:	2304      	movs	r3, #4
 8007be6:	77fb      	strb	r3, [r7, #31]
 8007be8:	e111      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007bea:	2308      	movs	r3, #8
 8007bec:	77fb      	strb	r3, [r7, #31]
 8007bee:	e10e      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	77fb      	strb	r3, [r7, #31]
 8007bf4:	e10b      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a69      	ldr	r2, [pc, #420]	; (8007da0 <UART_SetConfig+0x2dc>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d120      	bne.n	8007c42 <UART_SetConfig+0x17e>
 8007c00:	4b65      	ldr	r3, [pc, #404]	; (8007d98 <UART_SetConfig+0x2d4>)
 8007c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c0a:	2b30      	cmp	r3, #48	; 0x30
 8007c0c:	d013      	beq.n	8007c36 <UART_SetConfig+0x172>
 8007c0e:	2b30      	cmp	r3, #48	; 0x30
 8007c10:	d814      	bhi.n	8007c3c <UART_SetConfig+0x178>
 8007c12:	2b20      	cmp	r3, #32
 8007c14:	d009      	beq.n	8007c2a <UART_SetConfig+0x166>
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	d810      	bhi.n	8007c3c <UART_SetConfig+0x178>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <UART_SetConfig+0x160>
 8007c1e:	2b10      	cmp	r3, #16
 8007c20:	d006      	beq.n	8007c30 <UART_SetConfig+0x16c>
 8007c22:	e00b      	b.n	8007c3c <UART_SetConfig+0x178>
 8007c24:	2300      	movs	r3, #0
 8007c26:	77fb      	strb	r3, [r7, #31]
 8007c28:	e0f1      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	77fb      	strb	r3, [r7, #31]
 8007c2e:	e0ee      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007c30:	2304      	movs	r3, #4
 8007c32:	77fb      	strb	r3, [r7, #31]
 8007c34:	e0eb      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007c36:	2308      	movs	r3, #8
 8007c38:	77fb      	strb	r3, [r7, #31]
 8007c3a:	e0e8      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007c3c:	2310      	movs	r3, #16
 8007c3e:	77fb      	strb	r3, [r7, #31]
 8007c40:	e0e5      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a57      	ldr	r2, [pc, #348]	; (8007da4 <UART_SetConfig+0x2e0>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d120      	bne.n	8007c8e <UART_SetConfig+0x1ca>
 8007c4c:	4b52      	ldr	r3, [pc, #328]	; (8007d98 <UART_SetConfig+0x2d4>)
 8007c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c56:	2bc0      	cmp	r3, #192	; 0xc0
 8007c58:	d013      	beq.n	8007c82 <UART_SetConfig+0x1be>
 8007c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c5c:	d814      	bhi.n	8007c88 <UART_SetConfig+0x1c4>
 8007c5e:	2b80      	cmp	r3, #128	; 0x80
 8007c60:	d009      	beq.n	8007c76 <UART_SetConfig+0x1b2>
 8007c62:	2b80      	cmp	r3, #128	; 0x80
 8007c64:	d810      	bhi.n	8007c88 <UART_SetConfig+0x1c4>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <UART_SetConfig+0x1ac>
 8007c6a:	2b40      	cmp	r3, #64	; 0x40
 8007c6c:	d006      	beq.n	8007c7c <UART_SetConfig+0x1b8>
 8007c6e:	e00b      	b.n	8007c88 <UART_SetConfig+0x1c4>
 8007c70:	2300      	movs	r3, #0
 8007c72:	77fb      	strb	r3, [r7, #31]
 8007c74:	e0cb      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007c76:	2302      	movs	r3, #2
 8007c78:	77fb      	strb	r3, [r7, #31]
 8007c7a:	e0c8      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	77fb      	strb	r3, [r7, #31]
 8007c80:	e0c5      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007c82:	2308      	movs	r3, #8
 8007c84:	77fb      	strb	r3, [r7, #31]
 8007c86:	e0c2      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007c88:	2310      	movs	r3, #16
 8007c8a:	77fb      	strb	r3, [r7, #31]
 8007c8c:	e0bf      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a45      	ldr	r2, [pc, #276]	; (8007da8 <UART_SetConfig+0x2e4>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d125      	bne.n	8007ce4 <UART_SetConfig+0x220>
 8007c98:	4b3f      	ldr	r3, [pc, #252]	; (8007d98 <UART_SetConfig+0x2d4>)
 8007c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ca6:	d017      	beq.n	8007cd8 <UART_SetConfig+0x214>
 8007ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cac:	d817      	bhi.n	8007cde <UART_SetConfig+0x21a>
 8007cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb2:	d00b      	beq.n	8007ccc <UART_SetConfig+0x208>
 8007cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb8:	d811      	bhi.n	8007cde <UART_SetConfig+0x21a>
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d003      	beq.n	8007cc6 <UART_SetConfig+0x202>
 8007cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cc2:	d006      	beq.n	8007cd2 <UART_SetConfig+0x20e>
 8007cc4:	e00b      	b.n	8007cde <UART_SetConfig+0x21a>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	77fb      	strb	r3, [r7, #31]
 8007cca:	e0a0      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	77fb      	strb	r3, [r7, #31]
 8007cd0:	e09d      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007cd2:	2304      	movs	r3, #4
 8007cd4:	77fb      	strb	r3, [r7, #31]
 8007cd6:	e09a      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007cd8:	2308      	movs	r3, #8
 8007cda:	77fb      	strb	r3, [r7, #31]
 8007cdc:	e097      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007cde:	2310      	movs	r3, #16
 8007ce0:	77fb      	strb	r3, [r7, #31]
 8007ce2:	e094      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a30      	ldr	r2, [pc, #192]	; (8007dac <UART_SetConfig+0x2e8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d125      	bne.n	8007d3a <UART_SetConfig+0x276>
 8007cee:	4b2a      	ldr	r3, [pc, #168]	; (8007d98 <UART_SetConfig+0x2d4>)
 8007cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cfc:	d017      	beq.n	8007d2e <UART_SetConfig+0x26a>
 8007cfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d02:	d817      	bhi.n	8007d34 <UART_SetConfig+0x270>
 8007d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d08:	d00b      	beq.n	8007d22 <UART_SetConfig+0x25e>
 8007d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d0e:	d811      	bhi.n	8007d34 <UART_SetConfig+0x270>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <UART_SetConfig+0x258>
 8007d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d18:	d006      	beq.n	8007d28 <UART_SetConfig+0x264>
 8007d1a:	e00b      	b.n	8007d34 <UART_SetConfig+0x270>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	77fb      	strb	r3, [r7, #31]
 8007d20:	e075      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007d22:	2302      	movs	r3, #2
 8007d24:	77fb      	strb	r3, [r7, #31]
 8007d26:	e072      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007d28:	2304      	movs	r3, #4
 8007d2a:	77fb      	strb	r3, [r7, #31]
 8007d2c:	e06f      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007d2e:	2308      	movs	r3, #8
 8007d30:	77fb      	strb	r3, [r7, #31]
 8007d32:	e06c      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007d34:	2310      	movs	r3, #16
 8007d36:	77fb      	strb	r3, [r7, #31]
 8007d38:	e069      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1c      	ldr	r2, [pc, #112]	; (8007db0 <UART_SetConfig+0x2ec>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d137      	bne.n	8007db4 <UART_SetConfig+0x2f0>
 8007d44:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <UART_SetConfig+0x2d4>)
 8007d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d52:	d017      	beq.n	8007d84 <UART_SetConfig+0x2c0>
 8007d54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d58:	d817      	bhi.n	8007d8a <UART_SetConfig+0x2c6>
 8007d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5e:	d00b      	beq.n	8007d78 <UART_SetConfig+0x2b4>
 8007d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d64:	d811      	bhi.n	8007d8a <UART_SetConfig+0x2c6>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <UART_SetConfig+0x2ae>
 8007d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6e:	d006      	beq.n	8007d7e <UART_SetConfig+0x2ba>
 8007d70:	e00b      	b.n	8007d8a <UART_SetConfig+0x2c6>
 8007d72:	2300      	movs	r3, #0
 8007d74:	77fb      	strb	r3, [r7, #31]
 8007d76:	e04a      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	77fb      	strb	r3, [r7, #31]
 8007d7c:	e047      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007d7e:	2304      	movs	r3, #4
 8007d80:	77fb      	strb	r3, [r7, #31]
 8007d82:	e044      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007d84:	2308      	movs	r3, #8
 8007d86:	77fb      	strb	r3, [r7, #31]
 8007d88:	e041      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007d8a:	2310      	movs	r3, #16
 8007d8c:	77fb      	strb	r3, [r7, #31]
 8007d8e:	e03e      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007d90:	efff69f3 	.word	0xefff69f3
 8007d94:	40011000 	.word	0x40011000
 8007d98:	40023800 	.word	0x40023800
 8007d9c:	40004400 	.word	0x40004400
 8007da0:	40004800 	.word	0x40004800
 8007da4:	40004c00 	.word	0x40004c00
 8007da8:	40005000 	.word	0x40005000
 8007dac:	40011400 	.word	0x40011400
 8007db0:	40007800 	.word	0x40007800
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a91      	ldr	r2, [pc, #580]	; (8008000 <UART_SetConfig+0x53c>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d125      	bne.n	8007e0a <UART_SetConfig+0x346>
 8007dbe:	4b91      	ldr	r3, [pc, #580]	; (8008004 <UART_SetConfig+0x540>)
 8007dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007dc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007dcc:	d017      	beq.n	8007dfe <UART_SetConfig+0x33a>
 8007dce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007dd2:	d817      	bhi.n	8007e04 <UART_SetConfig+0x340>
 8007dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dd8:	d00b      	beq.n	8007df2 <UART_SetConfig+0x32e>
 8007dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dde:	d811      	bhi.n	8007e04 <UART_SetConfig+0x340>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <UART_SetConfig+0x328>
 8007de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007de8:	d006      	beq.n	8007df8 <UART_SetConfig+0x334>
 8007dea:	e00b      	b.n	8007e04 <UART_SetConfig+0x340>
 8007dec:	2300      	movs	r3, #0
 8007dee:	77fb      	strb	r3, [r7, #31]
 8007df0:	e00d      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007df2:	2302      	movs	r3, #2
 8007df4:	77fb      	strb	r3, [r7, #31]
 8007df6:	e00a      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007df8:	2304      	movs	r3, #4
 8007dfa:	77fb      	strb	r3, [r7, #31]
 8007dfc:	e007      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007dfe:	2308      	movs	r3, #8
 8007e00:	77fb      	strb	r3, [r7, #31]
 8007e02:	e004      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007e04:	2310      	movs	r3, #16
 8007e06:	77fb      	strb	r3, [r7, #31]
 8007e08:	e001      	b.n	8007e0e <UART_SetConfig+0x34a>
 8007e0a:	2310      	movs	r3, #16
 8007e0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e16:	d17c      	bne.n	8007f12 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8007e18:	7ffb      	ldrb	r3, [r7, #31]
 8007e1a:	2b08      	cmp	r3, #8
 8007e1c:	d859      	bhi.n	8007ed2 <UART_SetConfig+0x40e>
 8007e1e:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <UART_SetConfig+0x360>)
 8007e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e67 	.word	0x08007e67
 8007e2c:	08007e85 	.word	0x08007e85
 8007e30:	08007ed3 	.word	0x08007ed3
 8007e34:	08007e9d 	.word	0x08007e9d
 8007e38:	08007ed3 	.word	0x08007ed3
 8007e3c:	08007ed3 	.word	0x08007ed3
 8007e40:	08007ed3 	.word	0x08007ed3
 8007e44:	08007ebb 	.word	0x08007ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007e48:	f7fd fc50 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	005a      	lsls	r2, r3, #1
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	085b      	lsrs	r3, r3, #1
 8007e56:	441a      	add	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	61bb      	str	r3, [r7, #24]
        break;
 8007e64:	e038      	b.n	8007ed8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007e66:	f7fd fc55 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	005a      	lsls	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	085b      	lsrs	r3, r3, #1
 8007e74:	441a      	add	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	61bb      	str	r3, [r7, #24]
        break;
 8007e82:	e029      	b.n	8007ed8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	085a      	lsrs	r2, r3, #1
 8007e8a:	4b5f      	ldr	r3, [pc, #380]	; (8008008 <UART_SetConfig+0x544>)
 8007e8c:	4413      	add	r3, r2
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6852      	ldr	r2, [r2, #4]
 8007e92:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	61bb      	str	r3, [r7, #24]
        break;
 8007e9a:	e01d      	b.n	8007ed8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007e9c:	f7fd fb38 	bl	8005510 <HAL_RCC_GetSysClockFreq>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	005a      	lsls	r2, r3, #1
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	085b      	lsrs	r3, r3, #1
 8007eaa:	441a      	add	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	61bb      	str	r3, [r7, #24]
        break;
 8007eb8:	e00e      	b.n	8007ed8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	085b      	lsrs	r3, r3, #1
 8007ec0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	61bb      	str	r3, [r7, #24]
        break;
 8007ed0:	e002      	b.n	8007ed8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	75fb      	strb	r3, [r7, #23]
        break;
 8007ed6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	2b0f      	cmp	r3, #15
 8007edc:	d916      	bls.n	8007f0c <UART_SetConfig+0x448>
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee4:	d212      	bcs.n	8007f0c <UART_SetConfig+0x448>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	f023 030f 	bic.w	r3, r3, #15
 8007eee:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	89fb      	ldrh	r3, [r7, #14]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	89fa      	ldrh	r2, [r7, #14]
 8007f08:	60da      	str	r2, [r3, #12]
 8007f0a:	e06e      	b.n	8007fea <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	75fb      	strb	r3, [r7, #23]
 8007f10:	e06b      	b.n	8007fea <UART_SetConfig+0x526>
    }
  }
  else
  {
    switch (clocksource)
 8007f12:	7ffb      	ldrb	r3, [r7, #31]
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d857      	bhi.n	8007fc8 <UART_SetConfig+0x504>
 8007f18:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <UART_SetConfig+0x45c>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007f45 	.word	0x08007f45
 8007f24:	08007f61 	.word	0x08007f61
 8007f28:	08007f7d 	.word	0x08007f7d
 8007f2c:	08007fc9 	.word	0x08007fc9
 8007f30:	08007f95 	.word	0x08007f95
 8007f34:	08007fc9 	.word	0x08007fc9
 8007f38:	08007fc9 	.word	0x08007fc9
 8007f3c:	08007fc9 	.word	0x08007fc9
 8007f40:	08007fb1 	.word	0x08007fb1
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007f44:	f7fd fbd2 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	441a      	add	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	61bb      	str	r3, [r7, #24]
        break;
 8007f5e:	e036      	b.n	8007fce <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007f60:	f7fd fbd8 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 8007f64:	4602      	mov	r2, r0
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	085b      	lsrs	r3, r3, #1
 8007f6c:	441a      	add	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	61bb      	str	r3, [r7, #24]
        break;
 8007f7a:	e028      	b.n	8007fce <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	085a      	lsrs	r2, r3, #1
 8007f82:	4b22      	ldr	r3, [pc, #136]	; (800800c <UART_SetConfig+0x548>)
 8007f84:	4413      	add	r3, r2
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6852      	ldr	r2, [r2, #4]
 8007f8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	61bb      	str	r3, [r7, #24]
        break;
 8007f92:	e01c      	b.n	8007fce <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007f94:	f7fd fabc 	bl	8005510 <HAL_RCC_GetSysClockFreq>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	085b      	lsrs	r3, r3, #1
 8007fa0:	441a      	add	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	61bb      	str	r3, [r7, #24]
        break;
 8007fae:	e00e      	b.n	8007fce <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	085b      	lsrs	r3, r3, #1
 8007fb6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	61bb      	str	r3, [r7, #24]
        break;
 8007fc6:	e002      	b.n	8007fce <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]
        break;
 8007fcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	2b0f      	cmp	r3, #15
 8007fd2:	d908      	bls.n	8007fe6 <UART_SetConfig+0x522>
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fda:	d204      	bcs.n	8007fe6 <UART_SetConfig+0x522>
    {
      huart->Instance->BRR = usartdiv;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	60da      	str	r2, [r3, #12]
 8007fe4:	e001      	b.n	8007fea <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3720      	adds	r7, #32
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40007c00 	.word	0x40007c00
 8008004:	40023800 	.word	0x40023800
 8008008:	01e84800 	.word	0x01e84800
 800800c:	00f42400 	.word	0x00f42400

08008010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	430a      	orrs	r2, r1
 800805a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	f003 0304 	and.w	r3, r3, #4
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	f003 0308 	and.w	r3, r3, #8
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	430a      	orrs	r2, r1
 800809e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	f003 0310 	and.w	r3, r3, #16
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	f003 0320 	and.w	r3, r3, #32
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01a      	beq.n	8008126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	430a      	orrs	r2, r1
 8008104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800810e:	d10a      	bne.n	8008126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	605a      	str	r2, [r3, #4]
  }
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af02      	add	r7, sp, #8
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008162:	f7fb fdd5 	bl	8003d10 <HAL_GetTick>
 8008166:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0308 	and.w	r3, r3, #8
 8008172:	2b08      	cmp	r3, #8
 8008174:	d10e      	bne.n	8008194 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008176:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f814 	bl	80081b2 <UART_WaitOnFlagUntilTimeout>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e00a      	b.n	80081aa <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2220      	movs	r2, #32
 8008198:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2220      	movs	r2, #32
 800819e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	603b      	str	r3, [r7, #0]
 80081be:	4613      	mov	r3, r2
 80081c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081c2:	e02a      	b.n	800821a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ca:	d026      	beq.n	800821a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081cc:	f7fb fda0 	bl	8003d10 <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d302      	bcc.n	80081e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d11b      	bne.n	800821a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80081f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689a      	ldr	r2, [r3, #8]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f022 0201 	bic.w	r2, r2, #1
 8008200:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2220      	movs	r2, #32
 800820c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e00f      	b.n	800823a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69da      	ldr	r2, [r3, #28]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4013      	ands	r3, r2
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	429a      	cmp	r2, r3
 8008228:	bf0c      	ite	eq
 800822a:	2301      	moveq	r3, #1
 800822c:	2300      	movne	r3, #0
 800822e:	b2db      	uxtb	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	79fb      	ldrb	r3, [r7, #7]
 8008234:	429a      	cmp	r2, r3
 8008236:	d0c5      	beq.n	80081c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008258:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0201 	bic.w	r2, r2, #1
 8008268:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2220      	movs	r2, #32
 800826e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008276:	bf00      	nop
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f7ff fc05 	bl	8007ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082a6:	bf00      	nop
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082c4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff fbe2 	bl	8007a9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082ee:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082f4:	2b22      	cmp	r3, #34	; 0x22
 80082f6:	d13a      	bne.n	800836e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008300:	89bb      	ldrh	r3, [r7, #12]
 8008302:	b2d9      	uxtb	r1, r3
 8008304:	89fb      	ldrh	r3, [r7, #14]
 8008306:	b2da      	uxtb	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830c:	400a      	ands	r2, r1
 800830e:	b2d2      	uxtb	r2, r2
 8008310:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008322:	b29b      	uxth	r3, r3
 8008324:	3b01      	subs	r3, #1
 8008326:	b29a      	uxth	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008334:	b29b      	uxth	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d121      	bne.n	800837e <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008348:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0201 	bic.w	r2, r2, #1
 8008358:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2220      	movs	r2, #32
 800835e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7f8 fc1c 	bl	8000ba4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800836c:	e007      	b.n	800837e <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	699a      	ldr	r2, [r3, #24]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f042 0208 	orr.w	r2, r2, #8
 800837c:	619a      	str	r2, [r3, #24]
}
 800837e:	bf00      	nop
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008394:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800839a:	2b22      	cmp	r3, #34	; 0x22
 800839c:	d13a      	bne.n	8008414 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083aa:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80083ac:	89ba      	ldrh	r2, [r7, #12]
 80083ae:	89fb      	ldrh	r3, [r7, #14]
 80083b0:	4013      	ands	r3, r2
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083bc:	1c9a      	adds	r2, r3, #2
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	3b01      	subs	r3, #1
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083da:	b29b      	uxth	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d121      	bne.n	8008424 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80083ee:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689a      	ldr	r2, [r3, #8]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0201 	bic.w	r2, r2, #1
 80083fe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7f8 fbc9 	bl	8000ba4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008412:	e007      	b.n	8008424 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699a      	ldr	r2, [r3, #24]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f042 0208 	orr.w	r2, r2, #8
 8008422:	619a      	str	r2, [r3, #24]
}
 8008424:	bf00      	nop
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <__libc_init_array>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	4d0d      	ldr	r5, [pc, #52]	; (8008464 <__libc_init_array+0x38>)
 8008430:	4c0d      	ldr	r4, [pc, #52]	; (8008468 <__libc_init_array+0x3c>)
 8008432:	1b64      	subs	r4, r4, r5
 8008434:	10a4      	asrs	r4, r4, #2
 8008436:	2600      	movs	r6, #0
 8008438:	42a6      	cmp	r6, r4
 800843a:	d109      	bne.n	8008450 <__libc_init_array+0x24>
 800843c:	4d0b      	ldr	r5, [pc, #44]	; (800846c <__libc_init_array+0x40>)
 800843e:	4c0c      	ldr	r4, [pc, #48]	; (8008470 <__libc_init_array+0x44>)
 8008440:	f000 f820 	bl	8008484 <_init>
 8008444:	1b64      	subs	r4, r4, r5
 8008446:	10a4      	asrs	r4, r4, #2
 8008448:	2600      	movs	r6, #0
 800844a:	42a6      	cmp	r6, r4
 800844c:	d105      	bne.n	800845a <__libc_init_array+0x2e>
 800844e:	bd70      	pop	{r4, r5, r6, pc}
 8008450:	f855 3b04 	ldr.w	r3, [r5], #4
 8008454:	4798      	blx	r3
 8008456:	3601      	adds	r6, #1
 8008458:	e7ee      	b.n	8008438 <__libc_init_array+0xc>
 800845a:	f855 3b04 	ldr.w	r3, [r5], #4
 800845e:	4798      	blx	r3
 8008460:	3601      	adds	r6, #1
 8008462:	e7f2      	b.n	800844a <__libc_init_array+0x1e>
 8008464:	08008558 	.word	0x08008558
 8008468:	08008558 	.word	0x08008558
 800846c:	08008558 	.word	0x08008558
 8008470:	0800855c 	.word	0x0800855c

08008474 <memset>:
 8008474:	4402      	add	r2, r0
 8008476:	4603      	mov	r3, r0
 8008478:	4293      	cmp	r3, r2
 800847a:	d100      	bne.n	800847e <memset+0xa>
 800847c:	4770      	bx	lr
 800847e:	f803 1b01 	strb.w	r1, [r3], #1
 8008482:	e7f9      	b.n	8008478 <memset+0x4>

08008484 <_init>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	bf00      	nop
 8008488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848a:	bc08      	pop	{r3}
 800848c:	469e      	mov	lr, r3
 800848e:	4770      	bx	lr

08008490 <_fini>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	bf00      	nop
 8008494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008496:	bc08      	pop	{r3}
 8008498:	469e      	mov	lr, r3
 800849a:	4770      	bx	lr
